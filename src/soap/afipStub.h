/* afipStub.h
   Generated by gSOAP 2.8.89 for soap/afip_soap.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://wsaa.view.sua.dvadac.desein.afip.gov"
#define SOAP_NAMESPACE_OF_ns2	"https://wsaahomo.afip.gov.ar/ws/services/LoginCms"
#define SOAP_NAMESPACE_OF_ns3	"http://ar.gov.afip.dif.FEV1/"

#ifndef afipStub_H
#define afipStub_H
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
// #if GSOAP_VERSION != 20889
// # error "GSOAP VERSION 20889 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
// #endif


namespace afip {

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class _ns1__loginCms;	/* soap/afip_soap.h:164 */
class _ns1__loginCmsResponse;	/* soap/afip_soap.h:166 */
class ns2__LoginFault;	/* soap/afip_soap.h:168 */
class ns3__FEAuthRequest;	/* soap/afip_soap.h:170 */
class ns3__FECAERequest;	/* soap/afip_soap.h:172 */
class ns3__FECabRequest;	/* soap/afip_soap.h:176 */
class ns3__ArrayOfFECAEDetRequest;	/* soap/afip_soap.h:178 */
class ns3__FEDetRequest;	/* soap/afip_soap.h:182 */
class ns3__ArrayOfCbteAsoc;	/* soap/afip_soap.h:184 */
class ns3__CbteAsoc;	/* soap/afip_soap.h:186 */
class ns3__ArrayOfTributo;	/* soap/afip_soap.h:188 */
class ns3__Tributo;	/* soap/afip_soap.h:190 */
class ns3__ArrayOfAlicIva;	/* soap/afip_soap.h:192 */
class ns3__AlicIva;	/* soap/afip_soap.h:194 */
class ns3__ArrayOfOpcional;	/* soap/afip_soap.h:196 */
class ns3__Opcional;	/* soap/afip_soap.h:198 */
class ns3__ArrayOfComprador;	/* soap/afip_soap.h:200 */
class ns3__Comprador;	/* soap/afip_soap.h:202 */
class ns3__FECAEResponse;	/* soap/afip_soap.h:204 */
class ns3__FECabResponse;	/* soap/afip_soap.h:208 */
class ns3__ArrayOfFECAEDetResponse;	/* soap/afip_soap.h:210 */
class ns3__FEDetResponse;	/* soap/afip_soap.h:214 */
class ns3__ArrayOfObs;	/* soap/afip_soap.h:216 */
class ns3__Obs;	/* soap/afip_soap.h:218 */
class ns3__ArrayOfEvt;	/* soap/afip_soap.h:220 */
class ns3__Evt;	/* soap/afip_soap.h:222 */
class ns3__ArrayOfErr;	/* soap/afip_soap.h:224 */
class ns3__Err;	/* soap/afip_soap.h:226 */
class ns3__FERegXReqResponse;	/* soap/afip_soap.h:228 */
class ns3__DummyResponse;	/* soap/afip_soap.h:230 */
class ns3__FERecuperaLastCbteResponse;	/* soap/afip_soap.h:232 */
class ns3__FECompConsultaReq;	/* soap/afip_soap.h:234 */
class ns3__FECompConsultaResponse;	/* soap/afip_soap.h:236 */
class ns3__FECAEARequest;	/* soap/afip_soap.h:240 */
class ns3__ArrayOfFECAEADetRequest;	/* soap/afip_soap.h:244 */
class ns3__FECAEAResponse;	/* soap/afip_soap.h:248 */
class ns3__ArrayOfFECAEADetResponse;	/* soap/afip_soap.h:252 */
class ns3__FECAEAGetResponse;	/* soap/afip_soap.h:256 */
class ns3__FECAEAGet;	/* soap/afip_soap.h:258 */
class ns3__FECAEASinMovConsResponse;	/* soap/afip_soap.h:260 */
class ns3__ArrayOfFECAEASinMov;	/* soap/afip_soap.h:262 */
class ns3__FECAEASinMov;	/* soap/afip_soap.h:264 */
class ns3__FECotizacionResponse;	/* soap/afip_soap.h:268 */
class ns3__Cotizacion;	/* soap/afip_soap.h:270 */
class ns3__FETributoResponse;	/* soap/afip_soap.h:272 */
class ns3__ArrayOfTributoTipo;	/* soap/afip_soap.h:274 */
class ns3__TributoTipo;	/* soap/afip_soap.h:276 */
class ns3__MonedaResponse;	/* soap/afip_soap.h:278 */
class ns3__ArrayOfMoneda;	/* soap/afip_soap.h:280 */
class ns3__Moneda;	/* soap/afip_soap.h:282 */
class ns3__IvaTipoResponse;	/* soap/afip_soap.h:284 */
class ns3__ArrayOfIvaTipo;	/* soap/afip_soap.h:286 */
class ns3__IvaTipo;	/* soap/afip_soap.h:288 */
class ns3__OpcionalTipoResponse;	/* soap/afip_soap.h:290 */
class ns3__ArrayOfOpcionalTipo;	/* soap/afip_soap.h:292 */
class ns3__OpcionalTipo;	/* soap/afip_soap.h:294 */
class ns3__ConceptoTipoResponse;	/* soap/afip_soap.h:296 */
class ns3__ArrayOfConceptoTipo;	/* soap/afip_soap.h:298 */
class ns3__ConceptoTipo;	/* soap/afip_soap.h:300 */
class ns3__FEPtoVentaResponse;	/* soap/afip_soap.h:302 */
class ns3__ArrayOfPtoVenta;	/* soap/afip_soap.h:304 */
class ns3__PtoVenta;	/* soap/afip_soap.h:306 */
class ns3__CbteTipoResponse;	/* soap/afip_soap.h:308 */
class ns3__ArrayOfCbteTipo;	/* soap/afip_soap.h:310 */
class ns3__CbteTipo;	/* soap/afip_soap.h:312 */
class ns3__DocTipoResponse;	/* soap/afip_soap.h:314 */
class ns3__ArrayOfDocTipo;	/* soap/afip_soap.h:316 */
class ns3__DocTipo;	/* soap/afip_soap.h:318 */
class ns3__FEPaisResponse;	/* soap/afip_soap.h:320 */
class ns3__ArrayOfPaisTipo;	/* soap/afip_soap.h:322 */
class ns3__PaisTipo;	/* soap/afip_soap.h:324 */
class _ns3__FECAESolicitar;	/* soap/afip_soap.h:326 */
class _ns3__FECAESolicitarResponse;	/* soap/afip_soap.h:328 */
class _ns3__FECompTotXRequest;	/* soap/afip_soap.h:330 */
class _ns3__FECompTotXRequestResponse;	/* soap/afip_soap.h:332 */
class _ns3__FEDummy;	/* soap/afip_soap.h:334 */
class _ns3__FEDummyResponse;	/* soap/afip_soap.h:336 */
class _ns3__FECompUltimoAutorizado;	/* soap/afip_soap.h:338 */
class _ns3__FECompUltimoAutorizadoResponse;	/* soap/afip_soap.h:340 */
class _ns3__FECompConsultar;	/* soap/afip_soap.h:342 */
class _ns3__FECompConsultarResponse;	/* soap/afip_soap.h:344 */
class _ns3__FECAEARegInformativo;	/* soap/afip_soap.h:346 */
class _ns3__FECAEARegInformativoResponse;	/* soap/afip_soap.h:348 */
class _ns3__FECAEASolicitar;	/* soap/afip_soap.h:350 */
class _ns3__FECAEASolicitarResponse;	/* soap/afip_soap.h:352 */
class _ns3__FECAEASinMovimientoConsultar;	/* soap/afip_soap.h:354 */
class _ns3__FECAEASinMovimientoConsultarResponse;	/* soap/afip_soap.h:356 */
class _ns3__FECAEASinMovimientoInformar;	/* soap/afip_soap.h:358 */
class _ns3__FECAEASinMovimientoInformarResponse;	/* soap/afip_soap.h:360 */
class _ns3__FECAEAConsultar;	/* soap/afip_soap.h:362 */
class _ns3__FECAEAConsultarResponse;	/* soap/afip_soap.h:364 */
class _ns3__FEParamGetCotizacion;	/* soap/afip_soap.h:366 */
class _ns3__FEParamGetCotizacionResponse;	/* soap/afip_soap.h:368 */
class _ns3__FEParamGetTiposTributos;	/* soap/afip_soap.h:370 */
class _ns3__FEParamGetTiposTributosResponse;	/* soap/afip_soap.h:372 */
class _ns3__FEParamGetTiposMonedas;	/* soap/afip_soap.h:374 */
class _ns3__FEParamGetTiposMonedasResponse;	/* soap/afip_soap.h:376 */
class _ns3__FEParamGetTiposIva;	/* soap/afip_soap.h:378 */
class _ns3__FEParamGetTiposIvaResponse;	/* soap/afip_soap.h:380 */
class _ns3__FEParamGetTiposOpcional;	/* soap/afip_soap.h:382 */
class _ns3__FEParamGetTiposOpcionalResponse;	/* soap/afip_soap.h:384 */
class _ns3__FEParamGetTiposConcepto;	/* soap/afip_soap.h:386 */
class _ns3__FEParamGetTiposConceptoResponse;	/* soap/afip_soap.h:388 */
class _ns3__FEParamGetPtosVenta;	/* soap/afip_soap.h:390 */
class _ns3__FEParamGetPtosVentaResponse;	/* soap/afip_soap.h:392 */
class _ns3__FEParamGetTiposCbte;	/* soap/afip_soap.h:394 */
class _ns3__FEParamGetTiposCbteResponse;	/* soap/afip_soap.h:396 */
class _ns3__FEParamGetTiposDoc;	/* soap/afip_soap.h:398 */
class _ns3__FEParamGetTiposDocResponse;	/* soap/afip_soap.h:400 */
class _ns3__FEParamGetTiposPaises;	/* soap/afip_soap.h:402 */
class _ns3__FEParamGetTiposPaisesResponse;	/* soap/afip_soap.h:404 */
class ns3__FECAECabRequest;	/* soap/afip_soap.h:174 */
class ns3__FECAEDetRequest;	/* soap/afip_soap.h:180 */
class ns3__FECAECabResponse;	/* soap/afip_soap.h:206 */
class ns3__FECAEDetResponse;	/* soap/afip_soap.h:212 */
class ns3__FECAEACabRequest;	/* soap/afip_soap.h:242 */
class ns3__FECAEADetRequest;	/* soap/afip_soap.h:246 */
class ns3__FECAEACabResponse;	/* soap/afip_soap.h:250 */
class ns3__FECAEADetResponse;	/* soap/afip_soap.h:254 */
class ns3__FECAEASinMovResponse;	/* soap/afip_soap.h:266 */
class ns3__FECompConsResponse;	/* soap/afip_soap.h:238 */
struct __ns2__loginCms;	/* soap/afip_soap.h:3878 */
struct __ns3__FECAESolicitar;	/* soap/afip_soap.h:3965 */
struct __ns3__FECompTotXRequest;	/* soap/afip_soap.h:4037 */
struct __ns3__FEDummy;	/* soap/afip_soap.h:4108 */
struct __ns3__FECompUltimoAutorizado;	/* soap/afip_soap.h:4180 */
struct __ns3__FECompConsultar;	/* soap/afip_soap.h:4251 */
struct __ns3__FECAEARegInformativo;	/* soap/afip_soap.h:4322 */
struct __ns3__FECAEASolicitar;	/* soap/afip_soap.h:4393 */
struct __ns3__FECAEASinMovimientoConsultar;	/* soap/afip_soap.h:4464 */
struct __ns3__FECAEASinMovimientoInformar;	/* soap/afip_soap.h:4535 */
struct __ns3__FECAEAConsultar;	/* soap/afip_soap.h:4606 */
struct __ns3__FEParamGetCotizacion;	/* soap/afip_soap.h:4677 */
struct __ns3__FEParamGetTiposTributos;	/* soap/afip_soap.h:4749 */
struct __ns3__FEParamGetTiposMonedas;	/* soap/afip_soap.h:4820 */
struct __ns3__FEParamGetTiposIva;	/* soap/afip_soap.h:4891 */
struct __ns3__FEParamGetTiposOpcional;	/* soap/afip_soap.h:4962 */
struct __ns3__FEParamGetTiposConcepto;	/* soap/afip_soap.h:5033 */
struct __ns3__FEParamGetPtosVenta;	/* soap/afip_soap.h:5104 */
struct __ns3__FEParamGetTiposCbte;	/* soap/afip_soap.h:5175 */
struct __ns3__FEParamGetTiposDoc;	/* soap/afip_soap.h:5246 */
struct __ns3__FEParamGetTiposPaises;	/* soap/afip_soap.h:5318 */
struct __ns3__FECAESolicitar_;	/* soap/afip_soap.h:5389 */
struct __ns3__FECompTotXRequest_;	/* soap/afip_soap.h:5461 */
struct __ns3__FEDummy_;	/* soap/afip_soap.h:5532 */
struct __ns3__FECompUltimoAutorizado_;	/* soap/afip_soap.h:5604 */
struct __ns3__FECompConsultar_;	/* soap/afip_soap.h:5675 */
struct __ns3__FECAEARegInformativo_;	/* soap/afip_soap.h:5746 */
struct __ns3__FECAEASolicitar_;	/* soap/afip_soap.h:5817 */
struct __ns3__FECAEASinMovimientoConsultar_;	/* soap/afip_soap.h:5888 */
struct __ns3__FECAEASinMovimientoInformar_;	/* soap/afip_soap.h:5959 */
struct __ns3__FECAEAConsultar_;	/* soap/afip_soap.h:6030 */
struct __ns3__FEParamGetCotizacion_;	/* soap/afip_soap.h:6101 */
struct __ns3__FEParamGetTiposTributos_;	/* soap/afip_soap.h:6173 */
struct __ns3__FEParamGetTiposMonedas_;	/* soap/afip_soap.h:6244 */
struct __ns3__FEParamGetTiposIva_;	/* soap/afip_soap.h:6315 */
struct __ns3__FEParamGetTiposOpcional_;	/* soap/afip_soap.h:6386 */
struct __ns3__FEParamGetTiposConcepto_;	/* soap/afip_soap.h:6457 */
struct __ns3__FEParamGetPtosVenta_;	/* soap/afip_soap.h:6528 */
struct __ns3__FEParamGetTiposCbte_;	/* soap/afip_soap.h:6599 */
struct __ns3__FEParamGetTiposDoc_;	/* soap/afip_soap.h:6670 */
struct __ns3__FEParamGetTiposPaises_;	/* soap/afip_soap.h:6742 */

/* soap/afip_soap.h:164 */
#ifndef SOAP_TYPE_afip__ns1__loginCms
#define SOAP_TYPE_afip__ns1__loginCms (-2046771207)
/* complex XML schema type 'ns1:loginCms': */
class SOAP_CMAC _ns1__loginCms {
      public:
        /// Required element 'ns1:in0' of XML schema type 'xsd:string'
        std::string in0;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns1__loginCms
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns1__loginCms; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__loginCms, default initialized and not managed by a soap context
        virtual _ns1__loginCms *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__loginCms); }
      public:
        /// Constructor with default initializations
        _ns1__loginCms() : in0(), soap() { }
        virtual ~_ns1__loginCms() { }
        /// Friend allocator used by soap_new__ns1__loginCms(struct soap*, int)
        friend SOAP_FMAC1 _ns1__loginCms * SOAP_FMAC2 soap_instantiate__ns1__loginCms(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:166 */
#ifndef SOAP_TYPE_afip__ns1__loginCmsResponse
#define SOAP_TYPE_afip__ns1__loginCmsResponse (-2046771208)
/* complex XML schema type 'ns1:loginCmsResponse': */
class SOAP_CMAC _ns1__loginCmsResponse {
      public:
        /// Required element 'ns1:loginCmsReturn' of XML schema type 'xsd:string'
        std::string loginCmsReturn;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns1__loginCmsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns1__loginCmsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns1__loginCmsResponse, default initialized and not managed by a soap context
        virtual _ns1__loginCmsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns1__loginCmsResponse); }
      public:
        /// Constructor with default initializations
        _ns1__loginCmsResponse() : loginCmsReturn(), soap() { }
        virtual ~_ns1__loginCmsResponse() { }
        /// Friend allocator used by soap_new__ns1__loginCmsResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns1__loginCmsResponse * SOAP_FMAC2 soap_instantiate__ns1__loginCmsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:168 */
#ifndef SOAP_TYPE_afip_ns2__LoginFault
#define SOAP_TYPE_afip_ns2__LoginFault (-2046771209)
/* complex XML schema type 'ns2:LoginFault': */
class SOAP_CMAC ns2__LoginFault {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns2__LoginFault
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns2__LoginFault; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns2__LoginFault, default initialized and not managed by a soap context
        virtual ns2__LoginFault *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns2__LoginFault); }
      public:
        /// Constructor with default initializations
        ns2__LoginFault() : soap() { }
        virtual ~ns2__LoginFault() { }
        /// Friend allocator used by soap_new_ns2__LoginFault(struct soap*, int)
        friend SOAP_FMAC1 ns2__LoginFault * SOAP_FMAC2 soap_instantiate_ns2__LoginFault(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:170 */
#ifndef SOAP_TYPE_afip_ns3__FEAuthRequest
#define SOAP_TYPE_afip_ns3__FEAuthRequest (-2046771210)
/* complex XML schema type 'ns3:FEAuthRequest': */
class SOAP_CMAC ns3__FEAuthRequest {
      public:
        /// Optional element 'ns3:Token' of XML schema type 'xsd:string'
        std::string *Token;
        /// Optional element 'ns3:Sign' of XML schema type 'xsd:string'
        std::string *Sign;
        /// Required element 'ns3:Cuit' of XML schema type 'xsd:long'
        LONG64 Cuit;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FEAuthRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FEAuthRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FEAuthRequest, default initialized and not managed by a soap context
        virtual ns3__FEAuthRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FEAuthRequest); }
      public:
        /// Constructor with default initializations
        ns3__FEAuthRequest() : Token(), Sign(), Cuit(), soap() { }
        virtual ~ns3__FEAuthRequest() { }
        /// Friend allocator used by soap_new_ns3__FEAuthRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FEAuthRequest * SOAP_FMAC2 soap_instantiate_ns3__FEAuthRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:172 */
#ifndef SOAP_TYPE_afip_ns3__FECAERequest
#define SOAP_TYPE_afip_ns3__FECAERequest (-2046771211)
/* complex XML schema type 'ns3:FECAERequest': */
class SOAP_CMAC ns3__FECAERequest {
      public:
        /// Optional element 'ns3:FeCabReq' of XML schema type 'ns3:FECAECabRequest'
        ns3__FECAECabRequest *FeCabReq;
        /// Optional element 'ns3:FeDetReq' of XML schema type 'ns3:ArrayOfFECAEDetRequest'
        ns3__ArrayOfFECAEDetRequest *FeDetReq;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAERequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAERequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAERequest, default initialized and not managed by a soap context
        virtual ns3__FECAERequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAERequest); }
      public:
        /// Constructor with default initializations
        ns3__FECAERequest() : FeCabReq(), FeDetReq(), soap() { }
        virtual ~ns3__FECAERequest() { }
        /// Friend allocator used by soap_new_ns3__FECAERequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAERequest * SOAP_FMAC2 soap_instantiate_ns3__FECAERequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:176 */
#ifndef SOAP_TYPE_afip_ns3__FECabRequest
#define SOAP_TYPE_afip_ns3__FECabRequest (-2046771213)
/* complex XML schema type 'ns3:FECabRequest': */
class SOAP_CMAC ns3__FECabRequest {
      public:
        /// Required element 'ns3:CantReg' of XML schema type 'xsd:int'
        int CantReg;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Required element 'ns3:CbteTipo' of XML schema type 'xsd:int'
        int CbteTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECabRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECabRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECabRequest, default initialized and not managed by a soap context
        virtual ns3__FECabRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECabRequest); }
      public:
        /// Constructor with default initializations
        ns3__FECabRequest() : CantReg(), PtoVta(), CbteTipo(), soap() { }
        virtual ~ns3__FECabRequest() { }
        /// Friend allocator used by soap_new_ns3__FECabRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECabRequest * SOAP_FMAC2 soap_instantiate_ns3__FECabRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:178 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest (-2046771214)
/* complex XML schema type 'ns3:ArrayOfFECAEDetRequest': */
class SOAP_CMAC ns3__ArrayOfFECAEDetRequest {
      public:
        /// Optional element 'ns3:FECAEDetRequest' of XML schema type 'ns3:FECAEDetRequest'
        std::vector<ns3__FECAEDetRequest *> FECAEDetRequest;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfFECAEDetRequest, default initialized and not managed by a soap context
        virtual ns3__ArrayOfFECAEDetRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfFECAEDetRequest); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfFECAEDetRequest() : FECAEDetRequest(), soap() { }
        virtual ~ns3__ArrayOfFECAEDetRequest() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfFECAEDetRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfFECAEDetRequest * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:182 */
#ifndef SOAP_TYPE_afip_ns3__FEDetRequest
#define SOAP_TYPE_afip_ns3__FEDetRequest (-2046771216)
/* complex XML schema type 'ns3:FEDetRequest': */
class SOAP_CMAC ns3__FEDetRequest {
      public:
        /// Required element 'ns3:Concepto' of XML schema type 'xsd:int'
        int Concepto;
        /// Required element 'ns3:DocTipo' of XML schema type 'xsd:int'
        int DocTipo;
        /// Required element 'ns3:DocNro' of XML schema type 'xsd:long'
        LONG64 DocNro;
        /// Required element 'ns3:CbteDesde' of XML schema type 'xsd:long'
        LONG64 CbteDesde;
        /// Required element 'ns3:CbteHasta' of XML schema type 'xsd:long'
        LONG64 CbteHasta;
        /// Optional element 'ns3:CbteFch' of XML schema type 'xsd:string'
        std::string *CbteFch;
        /// Required element 'ns3:ImpTotal' of XML schema type 'xsd:double'
        double ImpTotal;
        /// Required element 'ns3:ImpTotConc' of XML schema type 'xsd:double'
        double ImpTotConc;
        /// Required element 'ns3:ImpNeto' of XML schema type 'xsd:double'
        double ImpNeto;
        /// Required element 'ns3:ImpOpEx' of XML schema type 'xsd:double'
        double ImpOpEx;
        /// Required element 'ns3:ImpTrib' of XML schema type 'xsd:double'
        double ImpTrib;
        /// Required element 'ns3:ImpIVA' of XML schema type 'xsd:double'
        double ImpIVA;
        /// Optional element 'ns3:FchServDesde' of XML schema type 'xsd:string'
        std::string *FchServDesde;
        /// Optional element 'ns3:FchServHasta' of XML schema type 'xsd:string'
        std::string *FchServHasta;
        /// Optional element 'ns3:FchVtoPago' of XML schema type 'xsd:string'
        std::string *FchVtoPago;
        /// Optional element 'ns3:MonId' of XML schema type 'xsd:string'
        std::string *MonId;
        /// Required element 'ns3:MonCotiz' of XML schema type 'xsd:double'
        double MonCotiz;
        /// Optional element 'ns3:CbtesAsoc' of XML schema type 'ns3:ArrayOfCbteAsoc'
        ns3__ArrayOfCbteAsoc *CbtesAsoc;
        /// Optional element 'ns3:Tributos' of XML schema type 'ns3:ArrayOfTributo'
        ns3__ArrayOfTributo *Tributos;
        /// Optional element 'ns3:Iva' of XML schema type 'ns3:ArrayOfAlicIva'
        ns3__ArrayOfAlicIva *Iva;
        /// Optional element 'ns3:Opcionales' of XML schema type 'ns3:ArrayOfOpcional'
        ns3__ArrayOfOpcional *Opcionales;
        /// Optional element 'ns3:Compradores' of XML schema type 'ns3:ArrayOfComprador'
        ns3__ArrayOfComprador *Compradores;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FEDetRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FEDetRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FEDetRequest, default initialized and not managed by a soap context
        virtual ns3__FEDetRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FEDetRequest); }
      public:
        /// Constructor with default initializations
        ns3__FEDetRequest() : Concepto(), DocTipo(), DocNro(), CbteDesde(), CbteHasta(), CbteFch(), ImpTotal(), ImpTotConc(), ImpNeto(), ImpOpEx(), ImpTrib(), ImpIVA(), FchServDesde(), FchServHasta(), FchVtoPago(), MonId(), MonCotiz(), CbtesAsoc(), Tributos(), Iva(), Opcionales(), Compradores(), soap() { }
        virtual ~ns3__FEDetRequest() { }
        /// Friend allocator used by soap_new_ns3__FEDetRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FEDetRequest * SOAP_FMAC2 soap_instantiate_ns3__FEDetRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:184 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc
#define SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc (-2046771217)
/* complex XML schema type 'ns3:ArrayOfCbteAsoc': */
class SOAP_CMAC ns3__ArrayOfCbteAsoc {
      public:
        /// Optional element 'ns3:CbteAsoc' of XML schema type 'ns3:CbteAsoc'
        std::vector<ns3__CbteAsoc *> CbteAsoc;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfCbteAsoc, default initialized and not managed by a soap context
        virtual ns3__ArrayOfCbteAsoc *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfCbteAsoc); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfCbteAsoc() : CbteAsoc(), soap() { }
        virtual ~ns3__ArrayOfCbteAsoc() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfCbteAsoc(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfCbteAsoc * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfCbteAsoc(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:186 */
#ifndef SOAP_TYPE_afip_ns3__CbteAsoc
#define SOAP_TYPE_afip_ns3__CbteAsoc (-2046771218)
/* complex XML schema type 'ns3:CbteAsoc': */
class SOAP_CMAC ns3__CbteAsoc {
      public:
        /// Required element 'ns3:Tipo' of XML schema type 'xsd:int'
        int Tipo;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Required element 'ns3:Nro' of XML schema type 'xsd:long'
        LONG64 Nro;
        /// Optional element 'ns3:Cuit' of XML schema type 'xsd:string'
        std::string *Cuit;
        /// Optional element 'ns3:CbteFch' of XML schema type 'xsd:string'
        std::string *CbteFch;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__CbteAsoc
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__CbteAsoc; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__CbteAsoc, default initialized and not managed by a soap context
        virtual ns3__CbteAsoc *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__CbteAsoc); }
      public:
        /// Constructor with default initializations
        ns3__CbteAsoc() : Tipo(), PtoVta(), Nro(), Cuit(), CbteFch(), soap() { }
        virtual ~ns3__CbteAsoc() { }
        /// Friend allocator used by soap_new_ns3__CbteAsoc(struct soap*, int)
        friend SOAP_FMAC1 ns3__CbteAsoc * SOAP_FMAC2 soap_instantiate_ns3__CbteAsoc(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:188 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfTributo
#define SOAP_TYPE_afip_ns3__ArrayOfTributo (-2046771219)
/* complex XML schema type 'ns3:ArrayOfTributo': */
class SOAP_CMAC ns3__ArrayOfTributo {
      public:
        /// Optional element 'ns3:Tributo' of XML schema type 'ns3:Tributo'
        std::vector<ns3__Tributo *> Tributo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfTributo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfTributo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfTributo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfTributo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfTributo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfTributo() : Tributo(), soap() { }
        virtual ~ns3__ArrayOfTributo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfTributo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfTributo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfTributo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:190 */
#ifndef SOAP_TYPE_afip_ns3__Tributo
#define SOAP_TYPE_afip_ns3__Tributo (-2046771220)
/* complex XML schema type 'ns3:Tributo': */
class SOAP_CMAC ns3__Tributo {
      public:
        /// Required element 'ns3:Id' of XML schema type 'xsd:short'
        short Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Required element 'ns3:BaseImp' of XML schema type 'xsd:double'
        double BaseImp;
        /// Required element 'ns3:Alic' of XML schema type 'xsd:double'
        double Alic;
        /// Required element 'ns3:Importe' of XML schema type 'xsd:double'
        double Importe;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Tributo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Tributo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Tributo, default initialized and not managed by a soap context
        virtual ns3__Tributo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Tributo); }
      public:
        /// Constructor with default initializations
        ns3__Tributo() : Id(), Desc(), BaseImp(), Alic(), Importe(), soap() { }
        virtual ~ns3__Tributo() { }
        /// Friend allocator used by soap_new_ns3__Tributo(struct soap*, int)
        friend SOAP_FMAC1 ns3__Tributo * SOAP_FMAC2 soap_instantiate_ns3__Tributo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:192 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfAlicIva
#define SOAP_TYPE_afip_ns3__ArrayOfAlicIva (-2046771221)
/* complex XML schema type 'ns3:ArrayOfAlicIva': */
class SOAP_CMAC ns3__ArrayOfAlicIva {
      public:
        /// Optional element 'ns3:AlicIva' of XML schema type 'ns3:AlicIva'
        std::vector<ns3__AlicIva *> AlicIva;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfAlicIva
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfAlicIva; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfAlicIva, default initialized and not managed by a soap context
        virtual ns3__ArrayOfAlicIva *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfAlicIva); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfAlicIva() : AlicIva(), soap() { }
        virtual ~ns3__ArrayOfAlicIva() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfAlicIva(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfAlicIva * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfAlicIva(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:194 */
#ifndef SOAP_TYPE_afip_ns3__AlicIva
#define SOAP_TYPE_afip_ns3__AlicIva (-2046771222)
/* complex XML schema type 'ns3:AlicIva': */
class SOAP_CMAC ns3__AlicIva {
      public:
        /// Required element 'ns3:Id' of XML schema type 'xsd:int'
        int Id;
        /// Required element 'ns3:BaseImp' of XML schema type 'xsd:double'
        double BaseImp;
        /// Required element 'ns3:Importe' of XML schema type 'xsd:double'
        double Importe;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__AlicIva
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__AlicIva; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__AlicIva, default initialized and not managed by a soap context
        virtual ns3__AlicIva *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__AlicIva); }
      public:
        /// Constructor with default initializations
        ns3__AlicIva() : Id(), BaseImp(), Importe(), soap() { }
        virtual ~ns3__AlicIva() { }
        /// Friend allocator used by soap_new_ns3__AlicIva(struct soap*, int)
        friend SOAP_FMAC1 ns3__AlicIva * SOAP_FMAC2 soap_instantiate_ns3__AlicIva(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:196 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfOpcional
#define SOAP_TYPE_afip_ns3__ArrayOfOpcional (-2046771223)
/* complex XML schema type 'ns3:ArrayOfOpcional': */
class SOAP_CMAC ns3__ArrayOfOpcional {
      public:
        /// Optional element 'ns3:Opcional' of XML schema type 'ns3:Opcional'
        std::vector<ns3__Opcional *> Opcional;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfOpcional
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfOpcional; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfOpcional, default initialized and not managed by a soap context
        virtual ns3__ArrayOfOpcional *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfOpcional); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfOpcional() : Opcional(), soap() { }
        virtual ~ns3__ArrayOfOpcional() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfOpcional(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfOpcional * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfOpcional(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:198 */
#ifndef SOAP_TYPE_afip_ns3__Opcional
#define SOAP_TYPE_afip_ns3__Opcional (-2046771224)
/* complex XML schema type 'ns3:Opcional': */
class SOAP_CMAC ns3__Opcional {
      public:
        /// Optional element 'ns3:Id' of XML schema type 'xsd:string'
        std::string *Id;
        /// Optional element 'ns3:Valor' of XML schema type 'xsd:string'
        std::string *Valor;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Opcional
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Opcional; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Opcional, default initialized and not managed by a soap context
        virtual ns3__Opcional *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Opcional); }
      public:
        /// Constructor with default initializations
        ns3__Opcional() : Id(), Valor(), soap() { }
        virtual ~ns3__Opcional() { }
        /// Friend allocator used by soap_new_ns3__Opcional(struct soap*, int)
        friend SOAP_FMAC1 ns3__Opcional * SOAP_FMAC2 soap_instantiate_ns3__Opcional(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:200 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfComprador
#define SOAP_TYPE_afip_ns3__ArrayOfComprador (-2046771225)
/* complex XML schema type 'ns3:ArrayOfComprador': */
class SOAP_CMAC ns3__ArrayOfComprador {
      public:
        /// Optional element 'ns3:Comprador' of XML schema type 'ns3:Comprador'
        std::vector<ns3__Comprador *> Comprador;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfComprador
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfComprador; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfComprador, default initialized and not managed by a soap context
        virtual ns3__ArrayOfComprador *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfComprador); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfComprador() : Comprador(), soap() { }
        virtual ~ns3__ArrayOfComprador() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfComprador(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfComprador * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfComprador(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:202 */
#ifndef SOAP_TYPE_afip_ns3__Comprador
#define SOAP_TYPE_afip_ns3__Comprador (-2046771226)
/* complex XML schema type 'ns3:Comprador': */
class SOAP_CMAC ns3__Comprador {
      public:
        /// Required element 'ns3:DocTipo' of XML schema type 'xsd:int'
        int DocTipo;
        /// Required element 'ns3:DocNro' of XML schema type 'xsd:long'
        LONG64 DocNro;
        /// Required element 'ns3:Porcentaje' of XML schema type 'xsd:double'
        double Porcentaje;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Comprador
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Comprador; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Comprador, default initialized and not managed by a soap context
        virtual ns3__Comprador *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Comprador); }
      public:
        /// Constructor with default initializations
        ns3__Comprador() : DocTipo(), DocNro(), Porcentaje(), soap() { }
        virtual ~ns3__Comprador() { }
        /// Friend allocator used by soap_new_ns3__Comprador(struct soap*, int)
        friend SOAP_FMAC1 ns3__Comprador * SOAP_FMAC2 soap_instantiate_ns3__Comprador(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:204 */
#ifndef SOAP_TYPE_afip_ns3__FECAEResponse
#define SOAP_TYPE_afip_ns3__FECAEResponse (-2046771227)
/* complex XML schema type 'ns3:FECAEResponse': */
class SOAP_CMAC ns3__FECAEResponse {
      public:
        /// Optional element 'ns3:FeCabResp' of XML schema type 'ns3:FECAECabResponse'
        ns3__FECAECabResponse *FeCabResp;
        /// Optional element 'ns3:FeDetResp' of XML schema type 'ns3:ArrayOfFECAEDetResponse'
        ns3__ArrayOfFECAEDetResponse *FeDetResp;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEResponse() : FeCabResp(), FeDetResp(), Events(), Errors(), soap() { }
        virtual ~ns3__FECAEResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:208 */
#ifndef SOAP_TYPE_afip_ns3__FECabResponse
#define SOAP_TYPE_afip_ns3__FECabResponse (-2046771229)
/* complex XML schema type 'ns3:FECabResponse': */
class SOAP_CMAC ns3__FECabResponse {
      public:
        /// Required element 'ns3:Cuit' of XML schema type 'xsd:long'
        LONG64 Cuit;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Required element 'ns3:CbteTipo' of XML schema type 'xsd:int'
        int CbteTipo;
        /// Optional element 'ns3:FchProceso' of XML schema type 'xsd:string'
        std::string *FchProceso;
        /// Required element 'ns3:CantReg' of XML schema type 'xsd:int'
        int CantReg;
        /// Optional element 'ns3:Resultado' of XML schema type 'xsd:string'
        std::string *Resultado;
        /// Optional element 'ns3:Reproceso' of XML schema type 'xsd:string'
        std::string *Reproceso;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECabResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECabResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECabResponse, default initialized and not managed by a soap context
        virtual ns3__FECabResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECabResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECabResponse() : Cuit(), PtoVta(), CbteTipo(), FchProceso(), CantReg(), Resultado(), Reproceso(), soap() { }
        virtual ~ns3__FECabResponse() { }
        /// Friend allocator used by soap_new_ns3__FECabResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECabResponse * SOAP_FMAC2 soap_instantiate_ns3__FECabResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:210 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse (-2046771230)
/* complex XML schema type 'ns3:ArrayOfFECAEDetResponse': */
class SOAP_CMAC ns3__ArrayOfFECAEDetResponse {
      public:
        /// Optional element 'ns3:FECAEDetResponse' of XML schema type 'ns3:FECAEDetResponse'
        std::vector<ns3__FECAEDetResponse *> FECAEDetResponse;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfFECAEDetResponse, default initialized and not managed by a soap context
        virtual ns3__ArrayOfFECAEDetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfFECAEDetResponse); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfFECAEDetResponse() : FECAEDetResponse(), soap() { }
        virtual ~ns3__ArrayOfFECAEDetResponse() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfFECAEDetResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfFECAEDetResponse * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:214 */
#ifndef SOAP_TYPE_afip_ns3__FEDetResponse
#define SOAP_TYPE_afip_ns3__FEDetResponse (-2046771232)
/* complex XML schema type 'ns3:FEDetResponse': */
class SOAP_CMAC ns3__FEDetResponse {
      public:
        /// Required element 'ns3:Concepto' of XML schema type 'xsd:int'
        int Concepto;
        /// Required element 'ns3:DocTipo' of XML schema type 'xsd:int'
        int DocTipo;
        /// Required element 'ns3:DocNro' of XML schema type 'xsd:long'
        LONG64 DocNro;
        /// Required element 'ns3:CbteDesde' of XML schema type 'xsd:long'
        LONG64 CbteDesde;
        /// Required element 'ns3:CbteHasta' of XML schema type 'xsd:long'
        LONG64 CbteHasta;
        /// Optional element 'ns3:CbteFch' of XML schema type 'xsd:string'
        std::string *CbteFch;
        /// Optional element 'ns3:Resultado' of XML schema type 'xsd:string'
        std::string *Resultado;
        /// Optional element 'ns3:Observaciones' of XML schema type 'ns3:ArrayOfObs'
        ns3__ArrayOfObs *Observaciones;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FEDetResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FEDetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FEDetResponse, default initialized and not managed by a soap context
        virtual ns3__FEDetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FEDetResponse); }
      public:
        /// Constructor with default initializations
        ns3__FEDetResponse() : Concepto(), DocTipo(), DocNro(), CbteDesde(), CbteHasta(), CbteFch(), Resultado(), Observaciones(), soap() { }
        virtual ~ns3__FEDetResponse() { }
        /// Friend allocator used by soap_new_ns3__FEDetResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FEDetResponse * SOAP_FMAC2 soap_instantiate_ns3__FEDetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:216 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfObs
#define SOAP_TYPE_afip_ns3__ArrayOfObs (-2046771233)
/* complex XML schema type 'ns3:ArrayOfObs': */
class SOAP_CMAC ns3__ArrayOfObs {
      public:
        /// Optional element 'ns3:Obs' of XML schema type 'ns3:Obs'
        std::vector<ns3__Obs *> Obs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfObs
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfObs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfObs, default initialized and not managed by a soap context
        virtual ns3__ArrayOfObs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfObs); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfObs() : Obs(), soap() { }
        virtual ~ns3__ArrayOfObs() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfObs(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfObs * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfObs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:218 */
#ifndef SOAP_TYPE_afip_ns3__Obs
#define SOAP_TYPE_afip_ns3__Obs (-2046771234)
/* complex XML schema type 'ns3:Obs': */
class SOAP_CMAC ns3__Obs {
      public:
        /// Required element 'ns3:Code' of XML schema type 'xsd:int'
        int Code;
        /// Optional element 'ns3:Msg' of XML schema type 'xsd:string'
        std::string *Msg;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Obs
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Obs; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Obs, default initialized and not managed by a soap context
        virtual ns3__Obs *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Obs); }
      public:
        /// Constructor with default initializations
        ns3__Obs() : Code(), Msg(), soap() { }
        virtual ~ns3__Obs() { }
        /// Friend allocator used by soap_new_ns3__Obs(struct soap*, int)
        friend SOAP_FMAC1 ns3__Obs * SOAP_FMAC2 soap_instantiate_ns3__Obs(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:220 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfEvt
#define SOAP_TYPE_afip_ns3__ArrayOfEvt (-2046771235)
/* complex XML schema type 'ns3:ArrayOfEvt': */
class SOAP_CMAC ns3__ArrayOfEvt {
      public:
        /// Optional element 'ns3:Evt' of XML schema type 'ns3:Evt'
        std::vector<ns3__Evt *> Evt;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfEvt
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfEvt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfEvt, default initialized and not managed by a soap context
        virtual ns3__ArrayOfEvt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfEvt); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfEvt() : Evt(), soap() { }
        virtual ~ns3__ArrayOfEvt() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfEvt(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfEvt * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfEvt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:222 */
#ifndef SOAP_TYPE_afip_ns3__Evt
#define SOAP_TYPE_afip_ns3__Evt (-2046771236)
/* complex XML schema type 'ns3:Evt': */
class SOAP_CMAC ns3__Evt {
      public:
        /// Required element 'ns3:Code' of XML schema type 'xsd:int'
        int Code;
        /// Optional element 'ns3:Msg' of XML schema type 'xsd:string'
        std::string *Msg;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Evt
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Evt; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Evt, default initialized and not managed by a soap context
        virtual ns3__Evt *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Evt); }
      public:
        /// Constructor with default initializations
        ns3__Evt() : Code(), Msg(), soap() { }
        virtual ~ns3__Evt() { }
        /// Friend allocator used by soap_new_ns3__Evt(struct soap*, int)
        friend SOAP_FMAC1 ns3__Evt * SOAP_FMAC2 soap_instantiate_ns3__Evt(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:224 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfErr
#define SOAP_TYPE_afip_ns3__ArrayOfErr (-2046771237)
/* complex XML schema type 'ns3:ArrayOfErr': */
class SOAP_CMAC ns3__ArrayOfErr {
      public:
        /// Optional element 'ns3:Err' of XML schema type 'ns3:Err'
        std::vector<ns3__Err *> Err;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfErr
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfErr; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfErr, default initialized and not managed by a soap context
        virtual ns3__ArrayOfErr *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfErr); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfErr() : Err(), soap() { }
        virtual ~ns3__ArrayOfErr() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfErr(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfErr * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfErr(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:226 */
#ifndef SOAP_TYPE_afip_ns3__Err
#define SOAP_TYPE_afip_ns3__Err (-2046771238)
/* complex XML schema type 'ns3:Err': */
class SOAP_CMAC ns3__Err {
      public:
        /// Required element 'ns3:Code' of XML schema type 'xsd:int'
        int Code;
        /// Optional element 'ns3:Msg' of XML schema type 'xsd:string'
        std::string *Msg;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Err
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Err; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Err, default initialized and not managed by a soap context
        virtual ns3__Err *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Err); }
      public:
        /// Constructor with default initializations
        ns3__Err() : Code(), Msg(), soap() { }
        virtual ~ns3__Err() { }
        /// Friend allocator used by soap_new_ns3__Err(struct soap*, int)
        friend SOAP_FMAC1 ns3__Err * SOAP_FMAC2 soap_instantiate_ns3__Err(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:228 */
#ifndef SOAP_TYPE_afip_ns3__FERegXReqResponse
#define SOAP_TYPE_afip_ns3__FERegXReqResponse (-2046771239)
/* complex XML schema type 'ns3:FERegXReqResponse': */
class SOAP_CMAC ns3__FERegXReqResponse {
      public:
        /// Required element 'ns3:RegXReq' of XML schema type 'xsd:int'
        int RegXReq;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FERegXReqResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FERegXReqResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FERegXReqResponse, default initialized and not managed by a soap context
        virtual ns3__FERegXReqResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FERegXReqResponse); }
      public:
        /// Constructor with default initializations
        ns3__FERegXReqResponse() : RegXReq(), Errors(), Events(), soap() { }
        virtual ~ns3__FERegXReqResponse() { }
        /// Friend allocator used by soap_new_ns3__FERegXReqResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FERegXReqResponse * SOAP_FMAC2 soap_instantiate_ns3__FERegXReqResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:230 */
#ifndef SOAP_TYPE_afip_ns3__DummyResponse
#define SOAP_TYPE_afip_ns3__DummyResponse (-2046771240)
/* complex XML schema type 'ns3:DummyResponse': */
class SOAP_CMAC ns3__DummyResponse {
      public:
        /// Optional element 'ns3:AppServer' of XML schema type 'xsd:string'
        std::string *AppServer;
        /// Optional element 'ns3:DbServer' of XML schema type 'xsd:string'
        std::string *DbServer;
        /// Optional element 'ns3:AuthServer' of XML schema type 'xsd:string'
        std::string *AuthServer;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__DummyResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__DummyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__DummyResponse, default initialized and not managed by a soap context
        virtual ns3__DummyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__DummyResponse); }
      public:
        /// Constructor with default initializations
        ns3__DummyResponse() : AppServer(), DbServer(), AuthServer(), soap() { }
        virtual ~ns3__DummyResponse() { }
        /// Friend allocator used by soap_new_ns3__DummyResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__DummyResponse * SOAP_FMAC2 soap_instantiate_ns3__DummyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:232 */
#ifndef SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse
#define SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse (-2046771241)
/* complex XML schema type 'ns3:FERecuperaLastCbteResponse': */
class SOAP_CMAC ns3__FERecuperaLastCbteResponse {
      public:
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Required element 'ns3:CbteTipo' of XML schema type 'xsd:int'
        int CbteTipo;
        /// Required element 'ns3:CbteNro' of XML schema type 'xsd:int'
        int CbteNro;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FERecuperaLastCbteResponse, default initialized and not managed by a soap context
        virtual ns3__FERecuperaLastCbteResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FERecuperaLastCbteResponse); }
      public:
        /// Constructor with default initializations
        ns3__FERecuperaLastCbteResponse() : PtoVta(), CbteTipo(), CbteNro(), Errors(), Events(), soap() { }
        virtual ~ns3__FERecuperaLastCbteResponse() { }
        /// Friend allocator used by soap_new_ns3__FERecuperaLastCbteResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FERecuperaLastCbteResponse * SOAP_FMAC2 soap_instantiate_ns3__FERecuperaLastCbteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:234 */
#ifndef SOAP_TYPE_afip_ns3__FECompConsultaReq
#define SOAP_TYPE_afip_ns3__FECompConsultaReq (-2046771242)
/* complex XML schema type 'ns3:FECompConsultaReq': */
class SOAP_CMAC ns3__FECompConsultaReq {
      public:
        /// Required element 'ns3:CbteTipo' of XML schema type 'xsd:int'
        int CbteTipo;
        /// Required element 'ns3:CbteNro' of XML schema type 'xsd:long'
        LONG64 CbteNro;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECompConsultaReq
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECompConsultaReq; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECompConsultaReq, default initialized and not managed by a soap context
        virtual ns3__FECompConsultaReq *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECompConsultaReq); }
      public:
        /// Constructor with default initializations
        ns3__FECompConsultaReq() : CbteTipo(), CbteNro(), PtoVta(), soap() { }
        virtual ~ns3__FECompConsultaReq() { }
        /// Friend allocator used by soap_new_ns3__FECompConsultaReq(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECompConsultaReq * SOAP_FMAC2 soap_instantiate_ns3__FECompConsultaReq(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:236 */
#ifndef SOAP_TYPE_afip_ns3__FECompConsultaResponse
#define SOAP_TYPE_afip_ns3__FECompConsultaResponse (-2046771243)
/* complex XML schema type 'ns3:FECompConsultaResponse': */
class SOAP_CMAC ns3__FECompConsultaResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:FECompConsResponse'
        ns3__FECompConsResponse *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECompConsultaResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECompConsultaResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECompConsultaResponse, default initialized and not managed by a soap context
        virtual ns3__FECompConsultaResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECompConsultaResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECompConsultaResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__FECompConsultaResponse() { }
        /// Friend allocator used by soap_new_ns3__FECompConsultaResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECompConsultaResponse * SOAP_FMAC2 soap_instantiate_ns3__FECompConsultaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:240 */
#ifndef SOAP_TYPE_afip_ns3__FECAEARequest
#define SOAP_TYPE_afip_ns3__FECAEARequest (-2046771245)
/* complex XML schema type 'ns3:FECAEARequest': */
class SOAP_CMAC ns3__FECAEARequest {
      public:
        /// Optional element 'ns3:FeCabReq' of XML schema type 'ns3:FECAEACabRequest'
        ns3__FECAEACabRequest *FeCabReq;
        /// Optional element 'ns3:FeDetReq' of XML schema type 'ns3:ArrayOfFECAEADetRequest'
        ns3__ArrayOfFECAEADetRequest *FeDetReq;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEARequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEARequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEARequest, default initialized and not managed by a soap context
        virtual ns3__FECAEARequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEARequest); }
      public:
        /// Constructor with default initializations
        ns3__FECAEARequest() : FeCabReq(), FeDetReq(), soap() { }
        virtual ~ns3__FECAEARequest() { }
        /// Friend allocator used by soap_new_ns3__FECAEARequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEARequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEARequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:244 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest (-2046771247)
/* complex XML schema type 'ns3:ArrayOfFECAEADetRequest': */
class SOAP_CMAC ns3__ArrayOfFECAEADetRequest {
      public:
        /// Optional element 'ns3:FECAEADetRequest' of XML schema type 'ns3:FECAEADetRequest'
        std::vector<ns3__FECAEADetRequest *> FECAEADetRequest;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfFECAEADetRequest, default initialized and not managed by a soap context
        virtual ns3__ArrayOfFECAEADetRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfFECAEADetRequest); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfFECAEADetRequest() : FECAEADetRequest(), soap() { }
        virtual ~ns3__ArrayOfFECAEADetRequest() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfFECAEADetRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfFECAEADetRequest * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:248 */
#ifndef SOAP_TYPE_afip_ns3__FECAEAResponse
#define SOAP_TYPE_afip_ns3__FECAEAResponse (-2046771249)
/* complex XML schema type 'ns3:FECAEAResponse': */
class SOAP_CMAC ns3__FECAEAResponse {
      public:
        /// Optional element 'ns3:FeCabResp' of XML schema type 'ns3:FECAEACabResponse'
        ns3__FECAEACabResponse *FeCabResp;
        /// Optional element 'ns3:FeDetResp' of XML schema type 'ns3:ArrayOfFECAEADetResponse'
        ns3__ArrayOfFECAEADetResponse *FeDetResp;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEAResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEAResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEAResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEAResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEAResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEAResponse() : FeCabResp(), FeDetResp(), Events(), Errors(), soap() { }
        virtual ~ns3__FECAEAResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEAResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEAResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEAResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:252 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse (-2046771251)
/* complex XML schema type 'ns3:ArrayOfFECAEADetResponse': */
class SOAP_CMAC ns3__ArrayOfFECAEADetResponse {
      public:
        /// Optional element 'ns3:FECAEADetResponse' of XML schema type 'ns3:FECAEADetResponse'
        std::vector<ns3__FECAEADetResponse *> FECAEADetResponse;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfFECAEADetResponse, default initialized and not managed by a soap context
        virtual ns3__ArrayOfFECAEADetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfFECAEADetResponse); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfFECAEADetResponse() : FECAEADetResponse(), soap() { }
        virtual ~ns3__ArrayOfFECAEADetResponse() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfFECAEADetResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfFECAEADetResponse * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:256 */
#ifndef SOAP_TYPE_afip_ns3__FECAEAGetResponse
#define SOAP_TYPE_afip_ns3__FECAEAGetResponse (-2046771253)
/* complex XML schema type 'ns3:FECAEAGetResponse': */
class SOAP_CMAC ns3__FECAEAGetResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:FECAEAGet'
        ns3__FECAEAGet *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEAGetResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEAGetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEAGetResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEAGetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEAGetResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEAGetResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__FECAEAGetResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEAGetResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEAGetResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEAGetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:258 */
#ifndef SOAP_TYPE_afip_ns3__FECAEAGet
#define SOAP_TYPE_afip_ns3__FECAEAGet (-2046771254)
/* complex XML schema type 'ns3:FECAEAGet': */
class SOAP_CMAC ns3__FECAEAGet {
      public:
        /// Optional element 'ns3:CAEA' of XML schema type 'xsd:string'
        std::string *CAEA;
        /// Required element 'ns3:Periodo' of XML schema type 'xsd:int'
        int Periodo;
        /// Required element 'ns3:Orden' of XML schema type 'xsd:short'
        short Orden;
        /// Optional element 'ns3:FchVigDesde' of XML schema type 'xsd:string'
        std::string *FchVigDesde;
        /// Optional element 'ns3:FchVigHasta' of XML schema type 'xsd:string'
        std::string *FchVigHasta;
        /// Optional element 'ns3:FchTopeInf' of XML schema type 'xsd:string'
        std::string *FchTopeInf;
        /// Optional element 'ns3:FchProceso' of XML schema type 'xsd:string'
        std::string *FchProceso;
        /// Optional element 'ns3:Observaciones' of XML schema type 'ns3:ArrayOfObs'
        ns3__ArrayOfObs *Observaciones;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEAGet
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEAGet; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEAGet, default initialized and not managed by a soap context
        virtual ns3__FECAEAGet *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEAGet); }
      public:
        /// Constructor with default initializations
        ns3__FECAEAGet() : CAEA(), Periodo(), Orden(), FchVigDesde(), FchVigHasta(), FchTopeInf(), FchProceso(), Observaciones(), soap() { }
        virtual ~ns3__FECAEAGet() { }
        /// Friend allocator used by soap_new_ns3__FECAEAGet(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEAGet * SOAP_FMAC2 soap_instantiate_ns3__FECAEAGet(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:260 */
#ifndef SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse
#define SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse (-2046771255)
/* complex XML schema type 'ns3:FECAEASinMovConsResponse': */
class SOAP_CMAC ns3__FECAEASinMovConsResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfFECAEASinMov'
        ns3__ArrayOfFECAEASinMov *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEASinMovConsResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEASinMovConsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEASinMovConsResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEASinMovConsResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__FECAEASinMovConsResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEASinMovConsResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEASinMovConsResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEASinMovConsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:262 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov (-2046771256)
/* complex XML schema type 'ns3:ArrayOfFECAEASinMov': */
class SOAP_CMAC ns3__ArrayOfFECAEASinMov {
      public:
        /// Optional element 'ns3:FECAEASinMov' of XML schema type 'ns3:FECAEASinMov'
        std::vector<ns3__FECAEASinMov *> FECAEASinMov;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfFECAEASinMov, default initialized and not managed by a soap context
        virtual ns3__ArrayOfFECAEASinMov *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfFECAEASinMov); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfFECAEASinMov() : FECAEASinMov(), soap() { }
        virtual ~ns3__ArrayOfFECAEASinMov() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfFECAEASinMov(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfFECAEASinMov * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEASinMov(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:264 */
#ifndef SOAP_TYPE_afip_ns3__FECAEASinMov
#define SOAP_TYPE_afip_ns3__FECAEASinMov (-2046771257)
/* complex XML schema type 'ns3:FECAEASinMov': */
class SOAP_CMAC ns3__FECAEASinMov {
      public:
        /// Optional element 'ns3:CAEA' of XML schema type 'xsd:string'
        std::string *CAEA;
        /// Optional element 'ns3:FchProceso' of XML schema type 'xsd:string'
        std::string *FchProceso;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEASinMov
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEASinMov; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEASinMov, default initialized and not managed by a soap context
        virtual ns3__FECAEASinMov *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEASinMov); }
      public:
        /// Constructor with default initializations
        ns3__FECAEASinMov() : CAEA(), FchProceso(), PtoVta(), soap() { }
        virtual ~ns3__FECAEASinMov() { }
        /// Friend allocator used by soap_new_ns3__FECAEASinMov(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEASinMov * SOAP_FMAC2 soap_instantiate_ns3__FECAEASinMov(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:268 */
#ifndef SOAP_TYPE_afip_ns3__FECotizacionResponse
#define SOAP_TYPE_afip_ns3__FECotizacionResponse (-2046771259)
/* complex XML schema type 'ns3:FECotizacionResponse': */
class SOAP_CMAC ns3__FECotizacionResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:Cotizacion'
        ns3__Cotizacion *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECotizacionResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECotizacionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECotizacionResponse, default initialized and not managed by a soap context
        virtual ns3__FECotizacionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECotizacionResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECotizacionResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__FECotizacionResponse() { }
        /// Friend allocator used by soap_new_ns3__FECotizacionResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECotizacionResponse * SOAP_FMAC2 soap_instantiate_ns3__FECotizacionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:270 */
#ifndef SOAP_TYPE_afip_ns3__Cotizacion
#define SOAP_TYPE_afip_ns3__Cotizacion (-2046771260)
/* complex XML schema type 'ns3:Cotizacion': */
class SOAP_CMAC ns3__Cotizacion {
      public:
        /// Optional element 'ns3:MonId' of XML schema type 'xsd:string'
        std::string *MonId;
        /// Required element 'ns3:MonCotiz' of XML schema type 'xsd:double'
        double MonCotiz;
        /// Optional element 'ns3:FchCotiz' of XML schema type 'xsd:string'
        std::string *FchCotiz;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Cotizacion
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Cotizacion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Cotizacion, default initialized and not managed by a soap context
        virtual ns3__Cotizacion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Cotizacion); }
      public:
        /// Constructor with default initializations
        ns3__Cotizacion() : MonId(), MonCotiz(), FchCotiz(), soap() { }
        virtual ~ns3__Cotizacion() { }
        /// Friend allocator used by soap_new_ns3__Cotizacion(struct soap*, int)
        friend SOAP_FMAC1 ns3__Cotizacion * SOAP_FMAC2 soap_instantiate_ns3__Cotizacion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:272 */
#ifndef SOAP_TYPE_afip_ns3__FETributoResponse
#define SOAP_TYPE_afip_ns3__FETributoResponse (-2046771261)
/* complex XML schema type 'ns3:FETributoResponse': */
class SOAP_CMAC ns3__FETributoResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfTributoTipo'
        ns3__ArrayOfTributoTipo *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FETributoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FETributoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FETributoResponse, default initialized and not managed by a soap context
        virtual ns3__FETributoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FETributoResponse); }
      public:
        /// Constructor with default initializations
        ns3__FETributoResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__FETributoResponse() { }
        /// Friend allocator used by soap_new_ns3__FETributoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FETributoResponse * SOAP_FMAC2 soap_instantiate_ns3__FETributoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:274 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfTributoTipo
#define SOAP_TYPE_afip_ns3__ArrayOfTributoTipo (-2046771262)
/* complex XML schema type 'ns3:ArrayOfTributoTipo': */
class SOAP_CMAC ns3__ArrayOfTributoTipo {
      public:
        /// Optional element 'ns3:TributoTipo' of XML schema type 'ns3:TributoTipo'
        std::vector<ns3__TributoTipo *> TributoTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfTributoTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfTributoTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfTributoTipo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfTributoTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfTributoTipo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfTributoTipo() : TributoTipo(), soap() { }
        virtual ~ns3__ArrayOfTributoTipo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfTributoTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfTributoTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfTributoTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:276 */
#ifndef SOAP_TYPE_afip_ns3__TributoTipo
#define SOAP_TYPE_afip_ns3__TributoTipo (-2046771263)
/* complex XML schema type 'ns3:TributoTipo': */
class SOAP_CMAC ns3__TributoTipo {
      public:
        /// Required element 'ns3:Id' of XML schema type 'xsd:short'
        short Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Optional element 'ns3:FchDesde' of XML schema type 'xsd:string'
        std::string *FchDesde;
        /// Optional element 'ns3:FchHasta' of XML schema type 'xsd:string'
        std::string *FchHasta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__TributoTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__TributoTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__TributoTipo, default initialized and not managed by a soap context
        virtual ns3__TributoTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__TributoTipo); }
      public:
        /// Constructor with default initializations
        ns3__TributoTipo() : Id(), Desc(), FchDesde(), FchHasta(), soap() { }
        virtual ~ns3__TributoTipo() { }
        /// Friend allocator used by soap_new_ns3__TributoTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__TributoTipo * SOAP_FMAC2 soap_instantiate_ns3__TributoTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:278 */
#ifndef SOAP_TYPE_afip_ns3__MonedaResponse
#define SOAP_TYPE_afip_ns3__MonedaResponse (-2046771264)
/* complex XML schema type 'ns3:MonedaResponse': */
class SOAP_CMAC ns3__MonedaResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfMoneda'
        ns3__ArrayOfMoneda *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__MonedaResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__MonedaResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__MonedaResponse, default initialized and not managed by a soap context
        virtual ns3__MonedaResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__MonedaResponse); }
      public:
        /// Constructor with default initializations
        ns3__MonedaResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__MonedaResponse() { }
        /// Friend allocator used by soap_new_ns3__MonedaResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__MonedaResponse * SOAP_FMAC2 soap_instantiate_ns3__MonedaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:280 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfMoneda
#define SOAP_TYPE_afip_ns3__ArrayOfMoneda (-2046771265)
/* complex XML schema type 'ns3:ArrayOfMoneda': */
class SOAP_CMAC ns3__ArrayOfMoneda {
      public:
        /// Optional element 'ns3:Moneda' of XML schema type 'ns3:Moneda'
        std::vector<ns3__Moneda *> Moneda;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfMoneda
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfMoneda; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfMoneda, default initialized and not managed by a soap context
        virtual ns3__ArrayOfMoneda *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfMoneda); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfMoneda() : Moneda(), soap() { }
        virtual ~ns3__ArrayOfMoneda() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfMoneda(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfMoneda * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfMoneda(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:282 */
#ifndef SOAP_TYPE_afip_ns3__Moneda
#define SOAP_TYPE_afip_ns3__Moneda (-2046771266)
/* complex XML schema type 'ns3:Moneda': */
class SOAP_CMAC ns3__Moneda {
      public:
        /// Optional element 'ns3:Id' of XML schema type 'xsd:string'
        std::string *Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Optional element 'ns3:FchDesde' of XML schema type 'xsd:string'
        std::string *FchDesde;
        /// Optional element 'ns3:FchHasta' of XML schema type 'xsd:string'
        std::string *FchHasta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__Moneda
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__Moneda; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__Moneda, default initialized and not managed by a soap context
        virtual ns3__Moneda *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__Moneda); }
      public:
        /// Constructor with default initializations
        ns3__Moneda() : Id(), Desc(), FchDesde(), FchHasta(), soap() { }
        virtual ~ns3__Moneda() { }
        /// Friend allocator used by soap_new_ns3__Moneda(struct soap*, int)
        friend SOAP_FMAC1 ns3__Moneda * SOAP_FMAC2 soap_instantiate_ns3__Moneda(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:284 */
#ifndef SOAP_TYPE_afip_ns3__IvaTipoResponse
#define SOAP_TYPE_afip_ns3__IvaTipoResponse (-2046771267)
/* complex XML schema type 'ns3:IvaTipoResponse': */
class SOAP_CMAC ns3__IvaTipoResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfIvaTipo'
        ns3__ArrayOfIvaTipo *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__IvaTipoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__IvaTipoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__IvaTipoResponse, default initialized and not managed by a soap context
        virtual ns3__IvaTipoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__IvaTipoResponse); }
      public:
        /// Constructor with default initializations
        ns3__IvaTipoResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__IvaTipoResponse() { }
        /// Friend allocator used by soap_new_ns3__IvaTipoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__IvaTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__IvaTipoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:286 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfIvaTipo
#define SOAP_TYPE_afip_ns3__ArrayOfIvaTipo (-2046771268)
/* complex XML schema type 'ns3:ArrayOfIvaTipo': */
class SOAP_CMAC ns3__ArrayOfIvaTipo {
      public:
        /// Optional element 'ns3:IvaTipo' of XML schema type 'ns3:IvaTipo'
        std::vector<ns3__IvaTipo *> IvaTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfIvaTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfIvaTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfIvaTipo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfIvaTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfIvaTipo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfIvaTipo() : IvaTipo(), soap() { }
        virtual ~ns3__ArrayOfIvaTipo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfIvaTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfIvaTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfIvaTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:288 */
#ifndef SOAP_TYPE_afip_ns3__IvaTipo
#define SOAP_TYPE_afip_ns3__IvaTipo (-2046771269)
/* complex XML schema type 'ns3:IvaTipo': */
class SOAP_CMAC ns3__IvaTipo {
      public:
        /// Optional element 'ns3:Id' of XML schema type 'xsd:string'
        std::string *Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Optional element 'ns3:FchDesde' of XML schema type 'xsd:string'
        std::string *FchDesde;
        /// Optional element 'ns3:FchHasta' of XML schema type 'xsd:string'
        std::string *FchHasta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__IvaTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__IvaTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__IvaTipo, default initialized and not managed by a soap context
        virtual ns3__IvaTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__IvaTipo); }
      public:
        /// Constructor with default initializations
        ns3__IvaTipo() : Id(), Desc(), FchDesde(), FchHasta(), soap() { }
        virtual ~ns3__IvaTipo() { }
        /// Friend allocator used by soap_new_ns3__IvaTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__IvaTipo * SOAP_FMAC2 soap_instantiate_ns3__IvaTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:290 */
#ifndef SOAP_TYPE_afip_ns3__OpcionalTipoResponse
#define SOAP_TYPE_afip_ns3__OpcionalTipoResponse (-2046771270)
/* complex XML schema type 'ns3:OpcionalTipoResponse': */
class SOAP_CMAC ns3__OpcionalTipoResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfOpcionalTipo'
        ns3__ArrayOfOpcionalTipo *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__OpcionalTipoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__OpcionalTipoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__OpcionalTipoResponse, default initialized and not managed by a soap context
        virtual ns3__OpcionalTipoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__OpcionalTipoResponse); }
      public:
        /// Constructor with default initializations
        ns3__OpcionalTipoResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__OpcionalTipoResponse() { }
        /// Friend allocator used by soap_new_ns3__OpcionalTipoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__OpcionalTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__OpcionalTipoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:292 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo
#define SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo (-2046771271)
/* complex XML schema type 'ns3:ArrayOfOpcionalTipo': */
class SOAP_CMAC ns3__ArrayOfOpcionalTipo {
      public:
        /// Optional element 'ns3:OpcionalTipo' of XML schema type 'ns3:OpcionalTipo'
        std::vector<ns3__OpcionalTipo *> OpcionalTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfOpcionalTipo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfOpcionalTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfOpcionalTipo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfOpcionalTipo() : OpcionalTipo(), soap() { }
        virtual ~ns3__ArrayOfOpcionalTipo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfOpcionalTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfOpcionalTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfOpcionalTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:294 */
#ifndef SOAP_TYPE_afip_ns3__OpcionalTipo
#define SOAP_TYPE_afip_ns3__OpcionalTipo (-2046771272)
/* complex XML schema type 'ns3:OpcionalTipo': */
class SOAP_CMAC ns3__OpcionalTipo {
      public:
        /// Optional element 'ns3:Id' of XML schema type 'xsd:string'
        std::string *Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Optional element 'ns3:FchDesde' of XML schema type 'xsd:string'
        std::string *FchDesde;
        /// Optional element 'ns3:FchHasta' of XML schema type 'xsd:string'
        std::string *FchHasta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__OpcionalTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__OpcionalTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__OpcionalTipo, default initialized and not managed by a soap context
        virtual ns3__OpcionalTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__OpcionalTipo); }
      public:
        /// Constructor with default initializations
        ns3__OpcionalTipo() : Id(), Desc(), FchDesde(), FchHasta(), soap() { }
        virtual ~ns3__OpcionalTipo() { }
        /// Friend allocator used by soap_new_ns3__OpcionalTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__OpcionalTipo * SOAP_FMAC2 soap_instantiate_ns3__OpcionalTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:296 */
#ifndef SOAP_TYPE_afip_ns3__ConceptoTipoResponse
#define SOAP_TYPE_afip_ns3__ConceptoTipoResponse (-2046771273)
/* complex XML schema type 'ns3:ConceptoTipoResponse': */
class SOAP_CMAC ns3__ConceptoTipoResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfConceptoTipo'
        ns3__ArrayOfConceptoTipo *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ConceptoTipoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ConceptoTipoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ConceptoTipoResponse, default initialized and not managed by a soap context
        virtual ns3__ConceptoTipoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ConceptoTipoResponse); }
      public:
        /// Constructor with default initializations
        ns3__ConceptoTipoResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__ConceptoTipoResponse() { }
        /// Friend allocator used by soap_new_ns3__ConceptoTipoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__ConceptoTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__ConceptoTipoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:298 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo
#define SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo (-2046771274)
/* complex XML schema type 'ns3:ArrayOfConceptoTipo': */
class SOAP_CMAC ns3__ArrayOfConceptoTipo {
      public:
        /// Optional element 'ns3:ConceptoTipo' of XML schema type 'ns3:ConceptoTipo'
        std::vector<ns3__ConceptoTipo *> ConceptoTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfConceptoTipo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfConceptoTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfConceptoTipo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfConceptoTipo() : ConceptoTipo(), soap() { }
        virtual ~ns3__ArrayOfConceptoTipo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfConceptoTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfConceptoTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfConceptoTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:300 */
#ifndef SOAP_TYPE_afip_ns3__ConceptoTipo
#define SOAP_TYPE_afip_ns3__ConceptoTipo (-2046771275)
/* complex XML schema type 'ns3:ConceptoTipo': */
class SOAP_CMAC ns3__ConceptoTipo {
      public:
        /// Required element 'ns3:Id' of XML schema type 'xsd:int'
        int Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Optional element 'ns3:FchDesde' of XML schema type 'xsd:string'
        std::string *FchDesde;
        /// Optional element 'ns3:FchHasta' of XML schema type 'xsd:string'
        std::string *FchHasta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ConceptoTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ConceptoTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ConceptoTipo, default initialized and not managed by a soap context
        virtual ns3__ConceptoTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ConceptoTipo); }
      public:
        /// Constructor with default initializations
        ns3__ConceptoTipo() : Id(), Desc(), FchDesde(), FchHasta(), soap() { }
        virtual ~ns3__ConceptoTipo() { }
        /// Friend allocator used by soap_new_ns3__ConceptoTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ConceptoTipo * SOAP_FMAC2 soap_instantiate_ns3__ConceptoTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:302 */
#ifndef SOAP_TYPE_afip_ns3__FEPtoVentaResponse
#define SOAP_TYPE_afip_ns3__FEPtoVentaResponse (-2046771276)
/* complex XML schema type 'ns3:FEPtoVentaResponse': */
class SOAP_CMAC ns3__FEPtoVentaResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfPtoVenta'
        ns3__ArrayOfPtoVenta *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FEPtoVentaResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FEPtoVentaResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FEPtoVentaResponse, default initialized and not managed by a soap context
        virtual ns3__FEPtoVentaResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FEPtoVentaResponse); }
      public:
        /// Constructor with default initializations
        ns3__FEPtoVentaResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__FEPtoVentaResponse() { }
        /// Friend allocator used by soap_new_ns3__FEPtoVentaResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FEPtoVentaResponse * SOAP_FMAC2 soap_instantiate_ns3__FEPtoVentaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:304 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfPtoVenta
#define SOAP_TYPE_afip_ns3__ArrayOfPtoVenta (-2046771277)
/* complex XML schema type 'ns3:ArrayOfPtoVenta': */
class SOAP_CMAC ns3__ArrayOfPtoVenta {
      public:
        /// Optional element 'ns3:PtoVenta' of XML schema type 'ns3:PtoVenta'
        std::vector<ns3__PtoVenta *> PtoVenta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfPtoVenta
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfPtoVenta; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfPtoVenta, default initialized and not managed by a soap context
        virtual ns3__ArrayOfPtoVenta *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfPtoVenta); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfPtoVenta() : PtoVenta(), soap() { }
        virtual ~ns3__ArrayOfPtoVenta() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfPtoVenta(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfPtoVenta * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfPtoVenta(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:306 */
#ifndef SOAP_TYPE_afip_ns3__PtoVenta
#define SOAP_TYPE_afip_ns3__PtoVenta (-2046771278)
/* complex XML schema type 'ns3:PtoVenta': */
class SOAP_CMAC ns3__PtoVenta {
      public:
        /// Required element 'ns3:Nro' of XML schema type 'xsd:int'
        int Nro;
        /// Optional element 'ns3:EmisionTipo' of XML schema type 'xsd:string'
        std::string *EmisionTipo;
        /// Optional element 'ns3:Bloqueado' of XML schema type 'xsd:string'
        std::string *Bloqueado;
        /// Optional element 'ns3:FchBaja' of XML schema type 'xsd:string'
        std::string *FchBaja;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__PtoVenta
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__PtoVenta; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__PtoVenta, default initialized and not managed by a soap context
        virtual ns3__PtoVenta *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__PtoVenta); }
      public:
        /// Constructor with default initializations
        ns3__PtoVenta() : Nro(), EmisionTipo(), Bloqueado(), FchBaja(), soap() { }
        virtual ~ns3__PtoVenta() { }
        /// Friend allocator used by soap_new_ns3__PtoVenta(struct soap*, int)
        friend SOAP_FMAC1 ns3__PtoVenta * SOAP_FMAC2 soap_instantiate_ns3__PtoVenta(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:308 */
#ifndef SOAP_TYPE_afip_ns3__CbteTipoResponse
#define SOAP_TYPE_afip_ns3__CbteTipoResponse (-2046771279)
/* complex XML schema type 'ns3:CbteTipoResponse': */
class SOAP_CMAC ns3__CbteTipoResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfCbteTipo'
        ns3__ArrayOfCbteTipo *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__CbteTipoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__CbteTipoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__CbteTipoResponse, default initialized and not managed by a soap context
        virtual ns3__CbteTipoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__CbteTipoResponse); }
      public:
        /// Constructor with default initializations
        ns3__CbteTipoResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__CbteTipoResponse() { }
        /// Friend allocator used by soap_new_ns3__CbteTipoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__CbteTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__CbteTipoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:310 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfCbteTipo
#define SOAP_TYPE_afip_ns3__ArrayOfCbteTipo (-2046771280)
/* complex XML schema type 'ns3:ArrayOfCbteTipo': */
class SOAP_CMAC ns3__ArrayOfCbteTipo {
      public:
        /// Optional element 'ns3:CbteTipo' of XML schema type 'ns3:CbteTipo'
        std::vector<ns3__CbteTipo *> CbteTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfCbteTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfCbteTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfCbteTipo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfCbteTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfCbteTipo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfCbteTipo() : CbteTipo(), soap() { }
        virtual ~ns3__ArrayOfCbteTipo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfCbteTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfCbteTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfCbteTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:312 */
#ifndef SOAP_TYPE_afip_ns3__CbteTipo
#define SOAP_TYPE_afip_ns3__CbteTipo (-2046771281)
/* complex XML schema type 'ns3:CbteTipo': */
class SOAP_CMAC ns3__CbteTipo {
      public:
        /// Required element 'ns3:Id' of XML schema type 'xsd:int'
        int Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Optional element 'ns3:FchDesde' of XML schema type 'xsd:string'
        std::string *FchDesde;
        /// Optional element 'ns3:FchHasta' of XML schema type 'xsd:string'
        std::string *FchHasta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__CbteTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__CbteTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__CbteTipo, default initialized and not managed by a soap context
        virtual ns3__CbteTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__CbteTipo); }
      public:
        /// Constructor with default initializations
        ns3__CbteTipo() : Id(), Desc(), FchDesde(), FchHasta(), soap() { }
        virtual ~ns3__CbteTipo() { }
        /// Friend allocator used by soap_new_ns3__CbteTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__CbteTipo * SOAP_FMAC2 soap_instantiate_ns3__CbteTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:314 */
#ifndef SOAP_TYPE_afip_ns3__DocTipoResponse
#define SOAP_TYPE_afip_ns3__DocTipoResponse (-2046771282)
/* complex XML schema type 'ns3:DocTipoResponse': */
class SOAP_CMAC ns3__DocTipoResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfDocTipo'
        ns3__ArrayOfDocTipo *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__DocTipoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__DocTipoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__DocTipoResponse, default initialized and not managed by a soap context
        virtual ns3__DocTipoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__DocTipoResponse); }
      public:
        /// Constructor with default initializations
        ns3__DocTipoResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__DocTipoResponse() { }
        /// Friend allocator used by soap_new_ns3__DocTipoResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__DocTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__DocTipoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:316 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfDocTipo
#define SOAP_TYPE_afip_ns3__ArrayOfDocTipo (-2046771283)
/* complex XML schema type 'ns3:ArrayOfDocTipo': */
class SOAP_CMAC ns3__ArrayOfDocTipo {
      public:
        /// Optional element 'ns3:DocTipo' of XML schema type 'ns3:DocTipo'
        std::vector<ns3__DocTipo *> DocTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfDocTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfDocTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfDocTipo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfDocTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfDocTipo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfDocTipo() : DocTipo(), soap() { }
        virtual ~ns3__ArrayOfDocTipo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfDocTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfDocTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfDocTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:318 */
#ifndef SOAP_TYPE_afip_ns3__DocTipo
#define SOAP_TYPE_afip_ns3__DocTipo (-2046771284)
/* complex XML schema type 'ns3:DocTipo': */
class SOAP_CMAC ns3__DocTipo {
      public:
        /// Required element 'ns3:Id' of XML schema type 'xsd:int'
        int Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Optional element 'ns3:FchDesde' of XML schema type 'xsd:string'
        std::string *FchDesde;
        /// Optional element 'ns3:FchHasta' of XML schema type 'xsd:string'
        std::string *FchHasta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__DocTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__DocTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__DocTipo, default initialized and not managed by a soap context
        virtual ns3__DocTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__DocTipo); }
      public:
        /// Constructor with default initializations
        ns3__DocTipo() : Id(), Desc(), FchDesde(), FchHasta(), soap() { }
        virtual ~ns3__DocTipo() { }
        /// Friend allocator used by soap_new_ns3__DocTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__DocTipo * SOAP_FMAC2 soap_instantiate_ns3__DocTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:320 */
#ifndef SOAP_TYPE_afip_ns3__FEPaisResponse
#define SOAP_TYPE_afip_ns3__FEPaisResponse (-2046771285)
/* complex XML schema type 'ns3:FEPaisResponse': */
class SOAP_CMAC ns3__FEPaisResponse {
      public:
        /// Optional element 'ns3:ResultGet' of XML schema type 'ns3:ArrayOfPaisTipo'
        ns3__ArrayOfPaisTipo *ResultGet;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FEPaisResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FEPaisResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FEPaisResponse, default initialized and not managed by a soap context
        virtual ns3__FEPaisResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FEPaisResponse); }
      public:
        /// Constructor with default initializations
        ns3__FEPaisResponse() : ResultGet(), Errors(), Events(), soap() { }
        virtual ~ns3__FEPaisResponse() { }
        /// Friend allocator used by soap_new_ns3__FEPaisResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FEPaisResponse * SOAP_FMAC2 soap_instantiate_ns3__FEPaisResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:322 */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfPaisTipo
#define SOAP_TYPE_afip_ns3__ArrayOfPaisTipo (-2046771286)
/* complex XML schema type 'ns3:ArrayOfPaisTipo': */
class SOAP_CMAC ns3__ArrayOfPaisTipo {
      public:
        /// Optional element 'ns3:PaisTipo' of XML schema type 'ns3:PaisTipo'
        std::vector<ns3__PaisTipo *> PaisTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__ArrayOfPaisTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__ArrayOfPaisTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__ArrayOfPaisTipo, default initialized and not managed by a soap context
        virtual ns3__ArrayOfPaisTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__ArrayOfPaisTipo); }
      public:
        /// Constructor with default initializations
        ns3__ArrayOfPaisTipo() : PaisTipo(), soap() { }
        virtual ~ns3__ArrayOfPaisTipo() { }
        /// Friend allocator used by soap_new_ns3__ArrayOfPaisTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__ArrayOfPaisTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfPaisTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:324 */
#ifndef SOAP_TYPE_afip_ns3__PaisTipo
#define SOAP_TYPE_afip_ns3__PaisTipo (-2046771287)
/* complex XML schema type 'ns3:PaisTipo': */
class SOAP_CMAC ns3__PaisTipo {
      public:
        /// Required element 'ns3:Id' of XML schema type 'xsd:short'
        short Id;
        /// Optional element 'ns3:Desc' of XML schema type 'xsd:string'
        std::string *Desc;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__PaisTipo
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__PaisTipo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__PaisTipo, default initialized and not managed by a soap context
        virtual ns3__PaisTipo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__PaisTipo); }
      public:
        /// Constructor with default initializations
        ns3__PaisTipo() : Id(), Desc(), soap() { }
        virtual ~ns3__PaisTipo() { }
        /// Friend allocator used by soap_new_ns3__PaisTipo(struct soap*, int)
        friend SOAP_FMAC1 ns3__PaisTipo * SOAP_FMAC2 soap_instantiate_ns3__PaisTipo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:326 */
#ifndef SOAP_TYPE_afip__ns3__FECAESolicitar
#define SOAP_TYPE_afip__ns3__FECAESolicitar (-2046771288)
/* complex XML schema type 'ns3:FECAESolicitar': */
class SOAP_CMAC _ns3__FECAESolicitar {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Optional element 'ns3:FeCAEReq' of XML schema type 'ns3:FECAERequest'
        ns3__FECAERequest *FeCAEReq;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAESolicitar
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAESolicitar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAESolicitar, default initialized and not managed by a soap context
        virtual _ns3__FECAESolicitar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAESolicitar); }
      public:
        /// Constructor with default initializations
        _ns3__FECAESolicitar() : Auth(), FeCAEReq(), soap() { }
        virtual ~_ns3__FECAESolicitar() { }
        /// Friend allocator used by soap_new__ns3__FECAESolicitar(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAESolicitar * SOAP_FMAC2 soap_instantiate__ns3__FECAESolicitar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:328 */
#ifndef SOAP_TYPE_afip__ns3__FECAESolicitarResponse
#define SOAP_TYPE_afip__ns3__FECAESolicitarResponse (-2046771289)
/* complex XML schema type 'ns3:FECAESolicitarResponse': */
class SOAP_CMAC _ns3__FECAESolicitarResponse {
      public:
        /// Optional element 'ns3:FECAESolicitarResult' of XML schema type 'ns3:FECAEResponse'
        ns3__FECAEResponse *FECAESolicitarResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAESolicitarResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAESolicitarResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAESolicitarResponse, default initialized and not managed by a soap context
        virtual _ns3__FECAESolicitarResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAESolicitarResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECAESolicitarResponse() : FECAESolicitarResult(), soap() { }
        virtual ~_ns3__FECAESolicitarResponse() { }
        /// Friend allocator used by soap_new__ns3__FECAESolicitarResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAESolicitarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAESolicitarResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:330 */
#ifndef SOAP_TYPE_afip__ns3__FECompTotXRequest
#define SOAP_TYPE_afip__ns3__FECompTotXRequest (-2046771290)
/* complex XML schema type 'ns3:FECompTotXRequest': */
class SOAP_CMAC _ns3__FECompTotXRequest {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECompTotXRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECompTotXRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECompTotXRequest, default initialized and not managed by a soap context
        virtual _ns3__FECompTotXRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECompTotXRequest); }
      public:
        /// Constructor with default initializations
        _ns3__FECompTotXRequest() : Auth(), soap() { }
        virtual ~_ns3__FECompTotXRequest() { }
        /// Friend allocator used by soap_new__ns3__FECompTotXRequest(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECompTotXRequest * SOAP_FMAC2 soap_instantiate__ns3__FECompTotXRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:332 */
#ifndef SOAP_TYPE_afip__ns3__FECompTotXRequestResponse
#define SOAP_TYPE_afip__ns3__FECompTotXRequestResponse (-2046771291)
/* complex XML schema type 'ns3:FECompTotXRequestResponse': */
class SOAP_CMAC _ns3__FECompTotXRequestResponse {
      public:
        /// Optional element 'ns3:FECompTotXRequestResult' of XML schema type 'ns3:FERegXReqResponse'
        ns3__FERegXReqResponse *FECompTotXRequestResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECompTotXRequestResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECompTotXRequestResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECompTotXRequestResponse, default initialized and not managed by a soap context
        virtual _ns3__FECompTotXRequestResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECompTotXRequestResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECompTotXRequestResponse() : FECompTotXRequestResult(), soap() { }
        virtual ~_ns3__FECompTotXRequestResponse() { }
        /// Friend allocator used by soap_new__ns3__FECompTotXRequestResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECompTotXRequestResponse * SOAP_FMAC2 soap_instantiate__ns3__FECompTotXRequestResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:334 */
#ifndef SOAP_TYPE_afip__ns3__FEDummy
#define SOAP_TYPE_afip__ns3__FEDummy (-2046771292)
/* complex XML schema type 'ns3:FEDummy': */
class SOAP_CMAC _ns3__FEDummy {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEDummy
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEDummy; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEDummy, default initialized and not managed by a soap context
        virtual _ns3__FEDummy *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEDummy); }
      public:
        /// Constructor with default initializations
        _ns3__FEDummy() : soap() { }
        virtual ~_ns3__FEDummy() { }
        /// Friend allocator used by soap_new__ns3__FEDummy(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEDummy * SOAP_FMAC2 soap_instantiate__ns3__FEDummy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:336 */
#ifndef SOAP_TYPE_afip__ns3__FEDummyResponse
#define SOAP_TYPE_afip__ns3__FEDummyResponse (-2046771293)
/* complex XML schema type 'ns3:FEDummyResponse': */
class SOAP_CMAC _ns3__FEDummyResponse {
      public:
        /// Optional element 'ns3:FEDummyResult' of XML schema type 'ns3:DummyResponse'
        ns3__DummyResponse *FEDummyResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEDummyResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEDummyResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEDummyResponse, default initialized and not managed by a soap context
        virtual _ns3__FEDummyResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEDummyResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEDummyResponse() : FEDummyResult(), soap() { }
        virtual ~_ns3__FEDummyResponse() { }
        /// Friend allocator used by soap_new__ns3__FEDummyResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEDummyResponse * SOAP_FMAC2 soap_instantiate__ns3__FEDummyResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:338 */
#ifndef SOAP_TYPE_afip__ns3__FECompUltimoAutorizado
#define SOAP_TYPE_afip__ns3__FECompUltimoAutorizado (-2046771294)
/* complex XML schema type 'ns3:FECompUltimoAutorizado': */
class SOAP_CMAC _ns3__FECompUltimoAutorizado {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Required element 'ns3:CbteTipo' of XML schema type 'xsd:int'
        int CbteTipo;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECompUltimoAutorizado
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECompUltimoAutorizado; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECompUltimoAutorizado, default initialized and not managed by a soap context
        virtual _ns3__FECompUltimoAutorizado *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECompUltimoAutorizado); }
      public:
        /// Constructor with default initializations
        _ns3__FECompUltimoAutorizado() : Auth(), PtoVta(), CbteTipo(), soap() { }
        virtual ~_ns3__FECompUltimoAutorizado() { }
        /// Friend allocator used by soap_new__ns3__FECompUltimoAutorizado(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECompUltimoAutorizado * SOAP_FMAC2 soap_instantiate__ns3__FECompUltimoAutorizado(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:340 */
#ifndef SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse
#define SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse (-2046771295)
/* complex XML schema type 'ns3:FECompUltimoAutorizadoResponse': */
class SOAP_CMAC _ns3__FECompUltimoAutorizadoResponse {
      public:
        /// Optional element 'ns3:FECompUltimoAutorizadoResult' of XML schema type 'ns3:FERecuperaLastCbteResponse'
        ns3__FERecuperaLastCbteResponse *FECompUltimoAutorizadoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECompUltimoAutorizadoResponse, default initialized and not managed by a soap context
        virtual _ns3__FECompUltimoAutorizadoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECompUltimoAutorizadoResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECompUltimoAutorizadoResponse() : FECompUltimoAutorizadoResult(), soap() { }
        virtual ~_ns3__FECompUltimoAutorizadoResponse() { }
        /// Friend allocator used by soap_new__ns3__FECompUltimoAutorizadoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECompUltimoAutorizadoResponse * SOAP_FMAC2 soap_instantiate__ns3__FECompUltimoAutorizadoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:342 */
#ifndef SOAP_TYPE_afip__ns3__FECompConsultar
#define SOAP_TYPE_afip__ns3__FECompConsultar (-2046771296)
/* complex XML schema type 'ns3:FECompConsultar': */
class SOAP_CMAC _ns3__FECompConsultar {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Optional element 'ns3:FeCompConsReq' of XML schema type 'ns3:FECompConsultaReq'
        ns3__FECompConsultaReq *FeCompConsReq;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECompConsultar
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECompConsultar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECompConsultar, default initialized and not managed by a soap context
        virtual _ns3__FECompConsultar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECompConsultar); }
      public:
        /// Constructor with default initializations
        _ns3__FECompConsultar() : Auth(), FeCompConsReq(), soap() { }
        virtual ~_ns3__FECompConsultar() { }
        /// Friend allocator used by soap_new__ns3__FECompConsultar(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECompConsultar * SOAP_FMAC2 soap_instantiate__ns3__FECompConsultar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:344 */
#ifndef SOAP_TYPE_afip__ns3__FECompConsultarResponse
#define SOAP_TYPE_afip__ns3__FECompConsultarResponse (-2046771297)
/* complex XML schema type 'ns3:FECompConsultarResponse': */
class SOAP_CMAC _ns3__FECompConsultarResponse {
      public:
        /// Optional element 'ns3:FECompConsultarResult' of XML schema type 'ns3:FECompConsultaResponse'
        ns3__FECompConsultaResponse *FECompConsultarResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECompConsultarResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECompConsultarResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECompConsultarResponse, default initialized and not managed by a soap context
        virtual _ns3__FECompConsultarResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECompConsultarResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECompConsultarResponse() : FECompConsultarResult(), soap() { }
        virtual ~_ns3__FECompConsultarResponse() { }
        /// Friend allocator used by soap_new__ns3__FECompConsultarResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECompConsultarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECompConsultarResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:346 */
#ifndef SOAP_TYPE_afip__ns3__FECAEARegInformativo
#define SOAP_TYPE_afip__ns3__FECAEARegInformativo (-2046771298)
/* complex XML schema type 'ns3:FECAEARegInformativo': */
class SOAP_CMAC _ns3__FECAEARegInformativo {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Optional element 'ns3:FeCAEARegInfReq' of XML schema type 'ns3:FECAEARequest'
        ns3__FECAEARequest *FeCAEARegInfReq;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEARegInformativo
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEARegInformativo; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEARegInformativo, default initialized and not managed by a soap context
        virtual _ns3__FECAEARegInformativo *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEARegInformativo); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEARegInformativo() : Auth(), FeCAEARegInfReq(), soap() { }
        virtual ~_ns3__FECAEARegInformativo() { }
        /// Friend allocator used by soap_new__ns3__FECAEARegInformativo(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEARegInformativo * SOAP_FMAC2 soap_instantiate__ns3__FECAEARegInformativo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:348 */
#ifndef SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse
#define SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse (-2046771299)
/* complex XML schema type 'ns3:FECAEARegInformativoResponse': */
class SOAP_CMAC _ns3__FECAEARegInformativoResponse {
      public:
        /// Optional element 'ns3:FECAEARegInformativoResult' of XML schema type 'ns3:FECAEAResponse'
        ns3__FECAEAResponse *FECAEARegInformativoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEARegInformativoResponse, default initialized and not managed by a soap context
        virtual _ns3__FECAEARegInformativoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEARegInformativoResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEARegInformativoResponse() : FECAEARegInformativoResult(), soap() { }
        virtual ~_ns3__FECAEARegInformativoResponse() { }
        /// Friend allocator used by soap_new__ns3__FECAEARegInformativoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEARegInformativoResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEARegInformativoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:350 */
#ifndef SOAP_TYPE_afip__ns3__FECAEASolicitar
#define SOAP_TYPE_afip__ns3__FECAEASolicitar (-2046771300)
/* complex XML schema type 'ns3:FECAEASolicitar': */
class SOAP_CMAC _ns3__FECAEASolicitar {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Required element 'ns3:Periodo' of XML schema type 'xsd:int'
        int Periodo;
        /// Required element 'ns3:Orden' of XML schema type 'xsd:short'
        short Orden;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEASolicitar
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEASolicitar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEASolicitar, default initialized and not managed by a soap context
        virtual _ns3__FECAEASolicitar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEASolicitar); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEASolicitar() : Auth(), Periodo(), Orden(), soap() { }
        virtual ~_ns3__FECAEASolicitar() { }
        /// Friend allocator used by soap_new__ns3__FECAEASolicitar(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEASolicitar * SOAP_FMAC2 soap_instantiate__ns3__FECAEASolicitar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:352 */
#ifndef SOAP_TYPE_afip__ns3__FECAEASolicitarResponse
#define SOAP_TYPE_afip__ns3__FECAEASolicitarResponse (-2046771301)
/* complex XML schema type 'ns3:FECAEASolicitarResponse': */
class SOAP_CMAC _ns3__FECAEASolicitarResponse {
      public:
        /// Optional element 'ns3:FECAEASolicitarResult' of XML schema type 'ns3:FECAEAGetResponse'
        ns3__FECAEAGetResponse *FECAEASolicitarResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEASolicitarResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEASolicitarResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEASolicitarResponse, default initialized and not managed by a soap context
        virtual _ns3__FECAEASolicitarResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEASolicitarResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEASolicitarResponse() : FECAEASolicitarResult(), soap() { }
        virtual ~_ns3__FECAEASolicitarResponse() { }
        /// Friend allocator used by soap_new__ns3__FECAEASolicitarResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEASolicitarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEASolicitarResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:354 */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar (-2046771302)
/* complex XML schema type 'ns3:FECAEASinMovimientoConsultar': */
class SOAP_CMAC _ns3__FECAEASinMovimientoConsultar {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Optional element 'ns3:CAEA' of XML schema type 'xsd:string'
        std::string *CAEA;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEASinMovimientoConsultar, default initialized and not managed by a soap context
        virtual _ns3__FECAEASinMovimientoConsultar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEASinMovimientoConsultar); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEASinMovimientoConsultar() : Auth(), CAEA(), PtoVta(), soap() { }
        virtual ~_ns3__FECAEASinMovimientoConsultar() { }
        /// Friend allocator used by soap_new__ns3__FECAEASinMovimientoConsultar(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEASinMovimientoConsultar * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoConsultar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:356 */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse (-2046771303)
/* complex XML schema type 'ns3:FECAEASinMovimientoConsultarResponse': */
class SOAP_CMAC _ns3__FECAEASinMovimientoConsultarResponse {
      public:
        /// Optional element 'ns3:FECAEASinMovimientoConsultarResult' of XML schema type 'ns3:FECAEASinMovConsResponse'
        ns3__FECAEASinMovConsResponse *FECAEASinMovimientoConsultarResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEASinMovimientoConsultarResponse, default initialized and not managed by a soap context
        virtual _ns3__FECAEASinMovimientoConsultarResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEASinMovimientoConsultarResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEASinMovimientoConsultarResponse() : FECAEASinMovimientoConsultarResult(), soap() { }
        virtual ~_ns3__FECAEASinMovimientoConsultarResponse() { }
        /// Friend allocator used by soap_new__ns3__FECAEASinMovimientoConsultarResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEASinMovimientoConsultarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoConsultarResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:358 */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar (-2046771304)
/* complex XML schema type 'ns3:FECAEASinMovimientoInformar': */
class SOAP_CMAC _ns3__FECAEASinMovimientoInformar {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Optional element 'ns3:CAEA' of XML schema type 'xsd:string'
        std::string *CAEA;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEASinMovimientoInformar, default initialized and not managed by a soap context
        virtual _ns3__FECAEASinMovimientoInformar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEASinMovimientoInformar); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEASinMovimientoInformar() : Auth(), PtoVta(), CAEA(), soap() { }
        virtual ~_ns3__FECAEASinMovimientoInformar() { }
        /// Friend allocator used by soap_new__ns3__FECAEASinMovimientoInformar(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEASinMovimientoInformar * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoInformar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:360 */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse (-2046771305)
/* complex XML schema type 'ns3:FECAEASinMovimientoInformarResponse': */
class SOAP_CMAC _ns3__FECAEASinMovimientoInformarResponse {
      public:
        /// Optional element 'ns3:FECAEASinMovimientoInformarResult' of XML schema type 'ns3:FECAEASinMovResponse'
        ns3__FECAEASinMovResponse *FECAEASinMovimientoInformarResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEASinMovimientoInformarResponse, default initialized and not managed by a soap context
        virtual _ns3__FECAEASinMovimientoInformarResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEASinMovimientoInformarResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEASinMovimientoInformarResponse() : FECAEASinMovimientoInformarResult(), soap() { }
        virtual ~_ns3__FECAEASinMovimientoInformarResponse() { }
        /// Friend allocator used by soap_new__ns3__FECAEASinMovimientoInformarResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEASinMovimientoInformarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoInformarResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:362 */
#ifndef SOAP_TYPE_afip__ns3__FECAEAConsultar
#define SOAP_TYPE_afip__ns3__FECAEAConsultar (-2046771306)
/* complex XML schema type 'ns3:FECAEAConsultar': */
class SOAP_CMAC _ns3__FECAEAConsultar {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Required element 'ns3:Periodo' of XML schema type 'xsd:int'
        int Periodo;
        /// Required element 'ns3:Orden' of XML schema type 'xsd:short'
        short Orden;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEAConsultar
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEAConsultar; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEAConsultar, default initialized and not managed by a soap context
        virtual _ns3__FECAEAConsultar *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEAConsultar); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEAConsultar() : Auth(), Periodo(), Orden(), soap() { }
        virtual ~_ns3__FECAEAConsultar() { }
        /// Friend allocator used by soap_new__ns3__FECAEAConsultar(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEAConsultar * SOAP_FMAC2 soap_instantiate__ns3__FECAEAConsultar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:364 */
#ifndef SOAP_TYPE_afip__ns3__FECAEAConsultarResponse
#define SOAP_TYPE_afip__ns3__FECAEAConsultarResponse (-2046771307)
/* complex XML schema type 'ns3:FECAEAConsultarResponse': */
class SOAP_CMAC _ns3__FECAEAConsultarResponse {
      public:
        /// Optional element 'ns3:FECAEAConsultarResult' of XML schema type 'ns3:FECAEAGetResponse'
        ns3__FECAEAGetResponse *FECAEAConsultarResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FECAEAConsultarResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FECAEAConsultarResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FECAEAConsultarResponse, default initialized and not managed by a soap context
        virtual _ns3__FECAEAConsultarResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FECAEAConsultarResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FECAEAConsultarResponse() : FECAEAConsultarResult(), soap() { }
        virtual ~_ns3__FECAEAConsultarResponse() { }
        /// Friend allocator used by soap_new__ns3__FECAEAConsultarResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FECAEAConsultarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEAConsultarResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:366 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetCotizacion
#define SOAP_TYPE_afip__ns3__FEParamGetCotizacion (-2046771308)
/* complex XML schema type 'ns3:FEParamGetCotizacion': */
class SOAP_CMAC _ns3__FEParamGetCotizacion {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Optional element 'ns3:MonId' of XML schema type 'xsd:string'
        std::string *MonId;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetCotizacion
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetCotizacion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetCotizacion, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetCotizacion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetCotizacion); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetCotizacion() : Auth(), MonId(), soap() { }
        virtual ~_ns3__FEParamGetCotizacion() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetCotizacion(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetCotizacion * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetCotizacion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:368 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse
#define SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse (-2046771309)
/* complex XML schema type 'ns3:FEParamGetCotizacionResponse': */
class SOAP_CMAC _ns3__FEParamGetCotizacionResponse {
      public:
        /// Optional element 'ns3:FEParamGetCotizacionResult' of XML schema type 'ns3:FECotizacionResponse'
        ns3__FECotizacionResponse *FEParamGetCotizacionResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetCotizacionResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetCotizacionResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetCotizacionResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetCotizacionResponse() : FEParamGetCotizacionResult(), soap() { }
        virtual ~_ns3__FEParamGetCotizacionResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetCotizacionResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetCotizacionResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetCotizacionResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:370 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposTributos
#define SOAP_TYPE_afip__ns3__FEParamGetTiposTributos (-2046771310)
/* complex XML schema type 'ns3:FEParamGetTiposTributos': */
class SOAP_CMAC _ns3__FEParamGetTiposTributos {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposTributos
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposTributos; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposTributos, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposTributos *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposTributos); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposTributos() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposTributos() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposTributos(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposTributos * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposTributos(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:372 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse (-2046771311)
/* complex XML schema type 'ns3:FEParamGetTiposTributosResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposTributosResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposTributosResult' of XML schema type 'ns3:FETributoResponse'
        ns3__FETributoResponse *FEParamGetTiposTributosResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposTributosResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposTributosResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposTributosResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposTributosResponse() : FEParamGetTiposTributosResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposTributosResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposTributosResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposTributosResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposTributosResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:374 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas
#define SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas (-2046771312)
/* complex XML schema type 'ns3:FEParamGetTiposMonedas': */
class SOAP_CMAC _ns3__FEParamGetTiposMonedas {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposMonedas, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposMonedas *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposMonedas); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposMonedas() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposMonedas() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposMonedas(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposMonedas * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposMonedas(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:376 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse (-2046771313)
/* complex XML schema type 'ns3:FEParamGetTiposMonedasResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposMonedasResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposMonedasResult' of XML schema type 'ns3:MonedaResponse'
        ns3__MonedaResponse *FEParamGetTiposMonedasResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposMonedasResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposMonedasResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposMonedasResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposMonedasResponse() : FEParamGetTiposMonedasResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposMonedasResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposMonedasResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposMonedasResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposMonedasResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:378 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposIva
#define SOAP_TYPE_afip__ns3__FEParamGetTiposIva (-2046771314)
/* complex XML schema type 'ns3:FEParamGetTiposIva': */
class SOAP_CMAC _ns3__FEParamGetTiposIva {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposIva
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposIva; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposIva, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposIva *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposIva); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposIva() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposIva() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposIva(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposIva * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposIva(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:380 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse (-2046771315)
/* complex XML schema type 'ns3:FEParamGetTiposIvaResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposIvaResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposIvaResult' of XML schema type 'ns3:IvaTipoResponse'
        ns3__IvaTipoResponse *FEParamGetTiposIvaResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposIvaResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposIvaResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposIvaResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposIvaResponse() : FEParamGetTiposIvaResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposIvaResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposIvaResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposIvaResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposIvaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:382 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional
#define SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional (-2046771316)
/* complex XML schema type 'ns3:FEParamGetTiposOpcional': */
class SOAP_CMAC _ns3__FEParamGetTiposOpcional {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposOpcional, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposOpcional *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposOpcional); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposOpcional() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposOpcional() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposOpcional(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposOpcional * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposOpcional(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:384 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse (-2046771317)
/* complex XML schema type 'ns3:FEParamGetTiposOpcionalResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposOpcionalResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposOpcionalResult' of XML schema type 'ns3:OpcionalTipoResponse'
        ns3__OpcionalTipoResponse *FEParamGetTiposOpcionalResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposOpcionalResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposOpcionalResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposOpcionalResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposOpcionalResponse() : FEParamGetTiposOpcionalResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposOpcionalResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposOpcionalResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposOpcionalResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposOpcionalResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:386 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto
#define SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto (-2046771318)
/* complex XML schema type 'ns3:FEParamGetTiposConcepto': */
class SOAP_CMAC _ns3__FEParamGetTiposConcepto {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposConcepto, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposConcepto *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposConcepto); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposConcepto() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposConcepto() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposConcepto(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposConcepto * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposConcepto(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:388 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse (-2046771319)
/* complex XML schema type 'ns3:FEParamGetTiposConceptoResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposConceptoResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposConceptoResult' of XML schema type 'ns3:ConceptoTipoResponse'
        ns3__ConceptoTipoResponse *FEParamGetTiposConceptoResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposConceptoResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposConceptoResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposConceptoResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposConceptoResponse() : FEParamGetTiposConceptoResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposConceptoResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposConceptoResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposConceptoResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposConceptoResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:390 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetPtosVenta
#define SOAP_TYPE_afip__ns3__FEParamGetPtosVenta (-2046771320)
/* complex XML schema type 'ns3:FEParamGetPtosVenta': */
class SOAP_CMAC _ns3__FEParamGetPtosVenta {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetPtosVenta
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetPtosVenta; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetPtosVenta, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetPtosVenta *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetPtosVenta); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetPtosVenta() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetPtosVenta() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetPtosVenta(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetPtosVenta * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetPtosVenta(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:392 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse
#define SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse (-2046771321)
/* complex XML schema type 'ns3:FEParamGetPtosVentaResponse': */
class SOAP_CMAC _ns3__FEParamGetPtosVentaResponse {
      public:
        /// Optional element 'ns3:FEParamGetPtosVentaResult' of XML schema type 'ns3:FEPtoVentaResponse'
        ns3__FEPtoVentaResponse *FEParamGetPtosVentaResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetPtosVentaResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetPtosVentaResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetPtosVentaResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetPtosVentaResponse() : FEParamGetPtosVentaResult(), soap() { }
        virtual ~_ns3__FEParamGetPtosVentaResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetPtosVentaResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetPtosVentaResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetPtosVentaResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:394 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposCbte
#define SOAP_TYPE_afip__ns3__FEParamGetTiposCbte (-2046771322)
/* complex XML schema type 'ns3:FEParamGetTiposCbte': */
class SOAP_CMAC _ns3__FEParamGetTiposCbte {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposCbte
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposCbte; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposCbte, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposCbte *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposCbte); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposCbte() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposCbte() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposCbte(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposCbte * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposCbte(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:396 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse (-2046771323)
/* complex XML schema type 'ns3:FEParamGetTiposCbteResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposCbteResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposCbteResult' of XML schema type 'ns3:CbteTipoResponse'
        ns3__CbteTipoResponse *FEParamGetTiposCbteResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposCbteResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposCbteResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposCbteResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposCbteResponse() : FEParamGetTiposCbteResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposCbteResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposCbteResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposCbteResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposCbteResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:398 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposDoc
#define SOAP_TYPE_afip__ns3__FEParamGetTiposDoc (-2046771324)
/* complex XML schema type 'ns3:FEParamGetTiposDoc': */
class SOAP_CMAC _ns3__FEParamGetTiposDoc {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposDoc
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposDoc; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposDoc, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposDoc *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposDoc); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposDoc() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposDoc() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposDoc(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposDoc * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposDoc(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:400 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse (-2046771325)
/* complex XML schema type 'ns3:FEParamGetTiposDocResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposDocResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposDocResult' of XML schema type 'ns3:DocTipoResponse'
        ns3__DocTipoResponse *FEParamGetTiposDocResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposDocResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposDocResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposDocResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposDocResponse() : FEParamGetTiposDocResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposDocResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposDocResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposDocResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposDocResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:402 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposPaises
#define SOAP_TYPE_afip__ns3__FEParamGetTiposPaises (-2046771326)
/* complex XML schema type 'ns3:FEParamGetTiposPaises': */
class SOAP_CMAC _ns3__FEParamGetTiposPaises {
      public:
        /// Optional element 'ns3:Auth' of XML schema type 'ns3:FEAuthRequest'
        ns3__FEAuthRequest *Auth;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposPaises
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposPaises; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposPaises, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposPaises *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposPaises); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposPaises() : Auth(), soap() { }
        virtual ~_ns3__FEParamGetTiposPaises() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposPaises(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposPaises * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposPaises(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:404 */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse (-2046771327)
/* complex XML schema type 'ns3:FEParamGetTiposPaisesResponse': */
class SOAP_CMAC _ns3__FEParamGetTiposPaisesResponse {
      public:
        /// Optional element 'ns3:FEParamGetTiposPaisesResult' of XML schema type 'ns3:FEPaisResponse'
        ns3__FEPaisResponse *FEParamGetTiposPaisesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _ns3__FEParamGetTiposPaisesResponse, default initialized and not managed by a soap context
        virtual _ns3__FEParamGetTiposPaisesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_ns3__FEParamGetTiposPaisesResponse); }
      public:
        /// Constructor with default initializations
        _ns3__FEParamGetTiposPaisesResponse() : FEParamGetTiposPaisesResult(), soap() { }
        virtual ~_ns3__FEParamGetTiposPaisesResponse() { }
        /// Friend allocator used by soap_new__ns3__FEParamGetTiposPaisesResponse(struct soap*, int)
        friend SOAP_FMAC1 _ns3__FEParamGetTiposPaisesResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposPaisesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:174 */
#ifndef SOAP_TYPE_afip_ns3__FECAECabRequest
#define SOAP_TYPE_afip_ns3__FECAECabRequest (-2046771212)
/* complex XML schema type 'ns3:FECAECabRequest': */
class SOAP_CMAC ns3__FECAECabRequest : public ns3__FECabRequest {
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAECabRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAECabRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAECabRequest, default initialized and not managed by a soap context
        virtual ns3__FECAECabRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAECabRequest); }
      public:
        /// Constructor with default initializations
        ns3__FECAECabRequest() { }
        virtual ~ns3__FECAECabRequest() { }
        /// Friend allocator used by soap_new_ns3__FECAECabRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAECabRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAECabRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:180 */
#ifndef SOAP_TYPE_afip_ns3__FECAEDetRequest
#define SOAP_TYPE_afip_ns3__FECAEDetRequest (-2046771215)
/* complex XML schema type 'ns3:FECAEDetRequest': */
class SOAP_CMAC ns3__FECAEDetRequest : public ns3__FEDetRequest {
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEDetRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEDetRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEDetRequest, default initialized and not managed by a soap context
        virtual ns3__FECAEDetRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEDetRequest); }
      public:
        /// Constructor with default initializations
        ns3__FECAEDetRequest() { }
        virtual ~ns3__FECAEDetRequest() { }
        /// Friend allocator used by soap_new_ns3__FECAEDetRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEDetRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:206 */
#ifndef SOAP_TYPE_afip_ns3__FECAECabResponse
#define SOAP_TYPE_afip_ns3__FECAECabResponse (-2046771228)
/* complex XML schema type 'ns3:FECAECabResponse': */
class SOAP_CMAC ns3__FECAECabResponse : public ns3__FECabResponse {
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAECabResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAECabResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAECabResponse, default initialized and not managed by a soap context
        virtual ns3__FECAECabResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAECabResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAECabResponse() { }
        virtual ~ns3__FECAECabResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAECabResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAECabResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAECabResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:212 */
#ifndef SOAP_TYPE_afip_ns3__FECAEDetResponse
#define SOAP_TYPE_afip_ns3__FECAEDetResponse (-2046771231)
/* complex XML schema type 'ns3:FECAEDetResponse': */
class SOAP_CMAC ns3__FECAEDetResponse : public ns3__FEDetResponse {
      public:
        /// Optional element 'ns3:CAE' of XML schema type 'xsd:string'
        std::string *CAE;
        /// Optional element 'ns3:CAEFchVto' of XML schema type 'xsd:string'
        std::string *CAEFchVto;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEDetResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEDetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEDetResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEDetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEDetResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEDetResponse() : CAE(), CAEFchVto() { }
        virtual ~ns3__FECAEDetResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEDetResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEDetResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:242 */
#ifndef SOAP_TYPE_afip_ns3__FECAEACabRequest
#define SOAP_TYPE_afip_ns3__FECAEACabRequest (-2046771246)
/* complex XML schema type 'ns3:FECAEACabRequest': */
class SOAP_CMAC ns3__FECAEACabRequest : public ns3__FECabRequest {
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEACabRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEACabRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEACabRequest, default initialized and not managed by a soap context
        virtual ns3__FECAEACabRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEACabRequest); }
      public:
        /// Constructor with default initializations
        ns3__FECAEACabRequest() { }
        virtual ~ns3__FECAEACabRequest() { }
        /// Friend allocator used by soap_new_ns3__FECAEACabRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEACabRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEACabRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:246 */
#ifndef SOAP_TYPE_afip_ns3__FECAEADetRequest
#define SOAP_TYPE_afip_ns3__FECAEADetRequest (-2046771248)
/* complex XML schema type 'ns3:FECAEADetRequest': */
class SOAP_CMAC ns3__FECAEADetRequest : public ns3__FEDetRequest {
      public:
        /// Optional element 'ns3:CAEA' of XML schema type 'xsd:string'
        std::string *CAEA;
        /// Optional element 'ns3:CbteFchHsGen' of XML schema type 'xsd:string'
        std::string *CbteFchHsGen;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEADetRequest
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEADetRequest; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEADetRequest, default initialized and not managed by a soap context
        virtual ns3__FECAEADetRequest *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEADetRequest); }
      public:
        /// Constructor with default initializations
        ns3__FECAEADetRequest() : CAEA(), CbteFchHsGen() { }
        virtual ~ns3__FECAEADetRequest() { }
        /// Friend allocator used by soap_new_ns3__FECAEADetRequest(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEADetRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:250 */
#ifndef SOAP_TYPE_afip_ns3__FECAEACabResponse
#define SOAP_TYPE_afip_ns3__FECAEACabResponse (-2046771250)
/* complex XML schema type 'ns3:FECAEACabResponse': */
class SOAP_CMAC ns3__FECAEACabResponse : public ns3__FECabResponse {
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEACabResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEACabResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEACabResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEACabResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEACabResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEACabResponse() { }
        virtual ~ns3__FECAEACabResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEACabResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEACabResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEACabResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:254 */
#ifndef SOAP_TYPE_afip_ns3__FECAEADetResponse
#define SOAP_TYPE_afip_ns3__FECAEADetResponse (-2046771252)
/* complex XML schema type 'ns3:FECAEADetResponse': */
class SOAP_CMAC ns3__FECAEADetResponse : public ns3__FEDetResponse {
      public:
        /// Optional element 'ns3:CAEA' of XML schema type 'xsd:string'
        std::string *CAEA;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEADetResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEADetResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEADetResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEADetResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEADetResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEADetResponse() : CAEA() { }
        virtual ~ns3__FECAEADetResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEADetResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEADetResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:266 */
#ifndef SOAP_TYPE_afip_ns3__FECAEASinMovResponse
#define SOAP_TYPE_afip_ns3__FECAEASinMovResponse (-2046771258)
/* complex XML schema type 'ns3:FECAEASinMovResponse': */
class SOAP_CMAC ns3__FECAEASinMovResponse : public ns3__FECAEASinMov {
      public:
        /// Optional element 'ns3:Resultado' of XML schema type 'xsd:string'
        std::string *Resultado;
        /// Optional element 'ns3:Errors' of XML schema type 'ns3:ArrayOfErr'
        ns3__ArrayOfErr *Errors;
        /// Optional element 'ns3:Events' of XML schema type 'ns3:ArrayOfEvt'
        ns3__ArrayOfEvt *Events;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECAEASinMovResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECAEASinMovResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECAEASinMovResponse, default initialized and not managed by a soap context
        virtual ns3__FECAEASinMovResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECAEASinMovResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECAEASinMovResponse() : Resultado(), Errors(), Events() { }
        virtual ~ns3__FECAEASinMovResponse() { }
        /// Friend allocator used by soap_new_ns3__FECAEASinMovResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECAEASinMovResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEASinMovResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:238 */
#ifndef SOAP_TYPE_afip_ns3__FECompConsResponse
#define SOAP_TYPE_afip_ns3__FECompConsResponse (-2046771244)
/* complex XML schema type 'ns3:FECompConsResponse': */
class SOAP_CMAC ns3__FECompConsResponse : public ns3__FECAEDetRequest {
      public:
        /// Optional element 'ns3:Resultado' of XML schema type 'xsd:string'
        std::string *Resultado;
        /// Optional element 'ns3:CodAutorizacion' of XML schema type 'xsd:string'
        std::string *CodAutorizacion;
        /// Optional element 'ns3:EmisionTipo' of XML schema type 'xsd:string'
        std::string *EmisionTipo;
        /// Optional element 'ns3:FchVto' of XML schema type 'xsd:string'
        std::string *FchVto;
        /// Optional element 'ns3:FchProceso' of XML schema type 'xsd:string'
        std::string *FchProceso;
        /// Optional element 'ns3:Observaciones' of XML schema type 'ns3:ArrayOfObs'
        ns3__ArrayOfObs *Observaciones;
        /// Required element 'ns3:PtoVta' of XML schema type 'xsd:int'
        int PtoVta;
        /// Required element 'ns3:CbteTipo' of XML schema type 'xsd:int'
        int CbteTipo;
      public:
        /// Return unique type id SOAP_TYPE_afip_ns3__FECompConsResponse
        virtual long soap_type(void) const { return SOAP_TYPE_afip_ns3__FECompConsResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type ns3__FECompConsResponse, default initialized and not managed by a soap context
        virtual ns3__FECompConsResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(ns3__FECompConsResponse); }
      public:
        /// Constructor with default initializations
        ns3__FECompConsResponse() : Resultado(), CodAutorizacion(), EmisionTipo(), FchVto(), FchProceso(), Observaciones(), PtoVta(), CbteTipo() { }
        virtual ~ns3__FECompConsResponse() { }
        /// Friend allocator used by soap_new_ns3__FECompConsResponse(struct soap*, int)
        friend SOAP_FMAC1 ns3__FECompConsResponse * SOAP_FMAC2 soap_instantiate_ns3__FECompConsResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:3792 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_afip_SOAP_ENV__Detail
#define SOAP_TYPE_afip_SOAP_ENV__Detail (-2046771430)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        /** Optional element 'ns2:fault' of XML schema type 'ns2:LoginFault' */
        ns2__LoginFault *ns2__fault;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
        char *__any;
      public:
        /** Return unique type id SOAP_TYPE_afip_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_afip_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : ns2__fault(), __type(), fault(), __any() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* soap/afip_soap.h:3878 */
#ifndef SOAP_TYPE_afip___ns2__loginCms
#define SOAP_TYPE_afip___ns2__loginCms (-2046771437)
/* Wrapper: */
struct SOAP_CMAC __ns2__loginCms {
      public:
        /** Optional element 'ns1:loginCms' of XML schema type 'ns1:loginCms' */
        _ns1__loginCms *ns1__loginCms;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns2__loginCms */
        long soap_type() const { return SOAP_TYPE_afip___ns2__loginCms; }
        /** Constructor with member initializations */
        __ns2__loginCms() : ns1__loginCms() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns2__loginCms * SOAP_FMAC2 soap_instantiate___ns2__loginCms(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:3965 */
#ifndef SOAP_TYPE_afip___ns3__FECAESolicitar
#define SOAP_TYPE_afip___ns3__FECAESolicitar (-2046771441)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAESolicitar {
      public:
        /** Optional element 'ns3:FECAESolicitar' of XML schema type 'ns3:FECAESolicitar' */
        _ns3__FECAESolicitar *ns3__FECAESolicitar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAESolicitar */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAESolicitar; }
        /** Constructor with member initializations */
        __ns3__FECAESolicitar() : ns3__FECAESolicitar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAESolicitar * SOAP_FMAC2 soap_instantiate___ns3__FECAESolicitar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4037 */
#ifndef SOAP_TYPE_afip___ns3__FECompTotXRequest
#define SOAP_TYPE_afip___ns3__FECompTotXRequest (-2046771445)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECompTotXRequest {
      public:
        /** Optional element 'ns3:FECompTotXRequest' of XML schema type 'ns3:FECompTotXRequest' */
        _ns3__FECompTotXRequest *ns3__FECompTotXRequest;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECompTotXRequest */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECompTotXRequest; }
        /** Constructor with member initializations */
        __ns3__FECompTotXRequest() : ns3__FECompTotXRequest() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECompTotXRequest * SOAP_FMAC2 soap_instantiate___ns3__FECompTotXRequest(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4108 */
#ifndef SOAP_TYPE_afip___ns3__FEDummy
#define SOAP_TYPE_afip___ns3__FEDummy (-2046771449)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEDummy {
      public:
        /** Optional element 'ns3:FEDummy' of XML schema type 'ns3:FEDummy' */
        _ns3__FEDummy *ns3__FEDummy;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEDummy */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEDummy; }
        /** Constructor with member initializations */
        __ns3__FEDummy() : ns3__FEDummy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEDummy * SOAP_FMAC2 soap_instantiate___ns3__FEDummy(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4180 */
#ifndef SOAP_TYPE_afip___ns3__FECompUltimoAutorizado
#define SOAP_TYPE_afip___ns3__FECompUltimoAutorizado (-2046771453)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECompUltimoAutorizado {
      public:
        /** Optional element 'ns3:FECompUltimoAutorizado' of XML schema type 'ns3:FECompUltimoAutorizado' */
        _ns3__FECompUltimoAutorizado *ns3__FECompUltimoAutorizado;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECompUltimoAutorizado */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECompUltimoAutorizado; }
        /** Constructor with member initializations */
        __ns3__FECompUltimoAutorizado() : ns3__FECompUltimoAutorizado() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECompUltimoAutorizado * SOAP_FMAC2 soap_instantiate___ns3__FECompUltimoAutorizado(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4251 */
#ifndef SOAP_TYPE_afip___ns3__FECompConsultar
#define SOAP_TYPE_afip___ns3__FECompConsultar (-2046771457)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECompConsultar {
      public:
        /** Optional element 'ns3:FECompConsultar' of XML schema type 'ns3:FECompConsultar' */
        _ns3__FECompConsultar *ns3__FECompConsultar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECompConsultar */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECompConsultar; }
        /** Constructor with member initializations */
        __ns3__FECompConsultar() : ns3__FECompConsultar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECompConsultar * SOAP_FMAC2 soap_instantiate___ns3__FECompConsultar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4322 */
#ifndef SOAP_TYPE_afip___ns3__FECAEARegInformativo
#define SOAP_TYPE_afip___ns3__FECAEARegInformativo (-2046771461)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEARegInformativo {
      public:
        /** Optional element 'ns3:FECAEARegInformativo' of XML schema type 'ns3:FECAEARegInformativo' */
        _ns3__FECAEARegInformativo *ns3__FECAEARegInformativo;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEARegInformativo */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEARegInformativo; }
        /** Constructor with member initializations */
        __ns3__FECAEARegInformativo() : ns3__FECAEARegInformativo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEARegInformativo * SOAP_FMAC2 soap_instantiate___ns3__FECAEARegInformativo(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4393 */
#ifndef SOAP_TYPE_afip___ns3__FECAEASolicitar
#define SOAP_TYPE_afip___ns3__FECAEASolicitar (-2046771465)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEASolicitar {
      public:
        /** Optional element 'ns3:FECAEASolicitar' of XML schema type 'ns3:FECAEASolicitar' */
        _ns3__FECAEASolicitar *ns3__FECAEASolicitar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEASolicitar */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEASolicitar; }
        /** Constructor with member initializations */
        __ns3__FECAEASolicitar() : ns3__FECAEASolicitar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEASolicitar * SOAP_FMAC2 soap_instantiate___ns3__FECAEASolicitar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4464 */
#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar (-2046771469)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEASinMovimientoConsultar {
      public:
        /** Optional element 'ns3:FECAEASinMovimientoConsultar' of XML schema type 'ns3:FECAEASinMovimientoConsultar' */
        _ns3__FECAEASinMovimientoConsultar *ns3__FECAEASinMovimientoConsultar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar; }
        /** Constructor with member initializations */
        __ns3__FECAEASinMovimientoConsultar() : ns3__FECAEASinMovimientoConsultar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEASinMovimientoConsultar * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoConsultar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4535 */
#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar (-2046771473)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEASinMovimientoInformar {
      public:
        /** Optional element 'ns3:FECAEASinMovimientoInformar' of XML schema type 'ns3:FECAEASinMovimientoInformar' */
        _ns3__FECAEASinMovimientoInformar *ns3__FECAEASinMovimientoInformar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar; }
        /** Constructor with member initializations */
        __ns3__FECAEASinMovimientoInformar() : ns3__FECAEASinMovimientoInformar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEASinMovimientoInformar * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoInformar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4606 */
#ifndef SOAP_TYPE_afip___ns3__FECAEAConsultar
#define SOAP_TYPE_afip___ns3__FECAEAConsultar (-2046771477)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEAConsultar {
      public:
        /** Optional element 'ns3:FECAEAConsultar' of XML schema type 'ns3:FECAEAConsultar' */
        _ns3__FECAEAConsultar *ns3__FECAEAConsultar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEAConsultar */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEAConsultar; }
        /** Constructor with member initializations */
        __ns3__FECAEAConsultar() : ns3__FECAEAConsultar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEAConsultar * SOAP_FMAC2 soap_instantiate___ns3__FECAEAConsultar(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4677 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetCotizacion
#define SOAP_TYPE_afip___ns3__FEParamGetCotizacion (-2046771481)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetCotizacion {
      public:
        /** Optional element 'ns3:FEParamGetCotizacion' of XML schema type 'ns3:FEParamGetCotizacion' */
        _ns3__FEParamGetCotizacion *ns3__FEParamGetCotizacion;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetCotizacion */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetCotizacion; }
        /** Constructor with member initializations */
        __ns3__FEParamGetCotizacion() : ns3__FEParamGetCotizacion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetCotizacion * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetCotizacion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4749 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposTributos
#define SOAP_TYPE_afip___ns3__FEParamGetTiposTributos (-2046771485)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposTributos {
      public:
        /** Optional element 'ns3:FEParamGetTiposTributos' of XML schema type 'ns3:FEParamGetTiposTributos' */
        _ns3__FEParamGetTiposTributos *ns3__FEParamGetTiposTributos;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposTributos */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposTributos; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposTributos() : ns3__FEParamGetTiposTributos() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposTributos * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposTributos(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4820 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas
#define SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas (-2046771489)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposMonedas {
      public:
        /** Optional element 'ns3:FEParamGetTiposMonedas' of XML schema type 'ns3:FEParamGetTiposMonedas' */
        _ns3__FEParamGetTiposMonedas *ns3__FEParamGetTiposMonedas;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposMonedas() : ns3__FEParamGetTiposMonedas() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposMonedas * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposMonedas(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4891 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposIva
#define SOAP_TYPE_afip___ns3__FEParamGetTiposIva (-2046771493)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposIva {
      public:
        /** Optional element 'ns3:FEParamGetTiposIva' of XML schema type 'ns3:FEParamGetTiposIva' */
        _ns3__FEParamGetTiposIva *ns3__FEParamGetTiposIva;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposIva */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposIva; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposIva() : ns3__FEParamGetTiposIva() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposIva * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposIva(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:4962 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional
#define SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional (-2046771497)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposOpcional {
      public:
        /** Optional element 'ns3:FEParamGetTiposOpcional' of XML schema type 'ns3:FEParamGetTiposOpcional' */
        _ns3__FEParamGetTiposOpcional *ns3__FEParamGetTiposOpcional;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposOpcional() : ns3__FEParamGetTiposOpcional() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposOpcional * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposOpcional(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5033 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto
#define SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto (-2046771501)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposConcepto {
      public:
        /** Optional element 'ns3:FEParamGetTiposConcepto' of XML schema type 'ns3:FEParamGetTiposConcepto' */
        _ns3__FEParamGetTiposConcepto *ns3__FEParamGetTiposConcepto;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposConcepto() : ns3__FEParamGetTiposConcepto() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposConcepto * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposConcepto(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5104 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetPtosVenta
#define SOAP_TYPE_afip___ns3__FEParamGetPtosVenta (-2046771505)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetPtosVenta {
      public:
        /** Optional element 'ns3:FEParamGetPtosVenta' of XML schema type 'ns3:FEParamGetPtosVenta' */
        _ns3__FEParamGetPtosVenta *ns3__FEParamGetPtosVenta;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetPtosVenta */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetPtosVenta; }
        /** Constructor with member initializations */
        __ns3__FEParamGetPtosVenta() : ns3__FEParamGetPtosVenta() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetPtosVenta * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetPtosVenta(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5175 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposCbte
#define SOAP_TYPE_afip___ns3__FEParamGetTiposCbte (-2046771509)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposCbte {
      public:
        /** Optional element 'ns3:FEParamGetTiposCbte' of XML schema type 'ns3:FEParamGetTiposCbte' */
        _ns3__FEParamGetTiposCbte *ns3__FEParamGetTiposCbte;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposCbte */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposCbte; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposCbte() : ns3__FEParamGetTiposCbte() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposCbte * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposCbte(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5246 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposDoc
#define SOAP_TYPE_afip___ns3__FEParamGetTiposDoc (-2046771513)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposDoc {
      public:
        /** Optional element 'ns3:FEParamGetTiposDoc' of XML schema type 'ns3:FEParamGetTiposDoc' */
        _ns3__FEParamGetTiposDoc *ns3__FEParamGetTiposDoc;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposDoc */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposDoc; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposDoc() : ns3__FEParamGetTiposDoc() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposDoc * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposDoc(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5318 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposPaises
#define SOAP_TYPE_afip___ns3__FEParamGetTiposPaises (-2046771517)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposPaises {
      public:
        /** Optional element 'ns3:FEParamGetTiposPaises' of XML schema type 'ns3:FEParamGetTiposPaises' */
        _ns3__FEParamGetTiposPaises *ns3__FEParamGetTiposPaises;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposPaises */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposPaises; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposPaises() : ns3__FEParamGetTiposPaises() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposPaises * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposPaises(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5389 */
#ifndef SOAP_TYPE_afip___ns3__FECAESolicitar_
#define SOAP_TYPE_afip___ns3__FECAESolicitar_ (-2046771519)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAESolicitar_ {
      public:
        /** Optional element 'ns3:FECAESolicitar' of XML schema type 'ns3:FECAESolicitar' */
        _ns3__FECAESolicitar *ns3__FECAESolicitar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAESolicitar_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAESolicitar_; }
        /** Constructor with member initializations */
        __ns3__FECAESolicitar_() : ns3__FECAESolicitar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAESolicitar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAESolicitar_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5461 */
#ifndef SOAP_TYPE_afip___ns3__FECompTotXRequest_
#define SOAP_TYPE_afip___ns3__FECompTotXRequest_ (-2046771521)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECompTotXRequest_ {
      public:
        /** Optional element 'ns3:FECompTotXRequest' of XML schema type 'ns3:FECompTotXRequest' */
        _ns3__FECompTotXRequest *ns3__FECompTotXRequest;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECompTotXRequest_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECompTotXRequest_; }
        /** Constructor with member initializations */
        __ns3__FECompTotXRequest_() : ns3__FECompTotXRequest() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECompTotXRequest_ * SOAP_FMAC2 soap_instantiate___ns3__FECompTotXRequest_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5532 */
#ifndef SOAP_TYPE_afip___ns3__FEDummy_
#define SOAP_TYPE_afip___ns3__FEDummy_ (-2046771523)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEDummy_ {
      public:
        /** Optional element 'ns3:FEDummy' of XML schema type 'ns3:FEDummy' */
        _ns3__FEDummy *ns3__FEDummy;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEDummy_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEDummy_; }
        /** Constructor with member initializations */
        __ns3__FEDummy_() : ns3__FEDummy() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEDummy_ * SOAP_FMAC2 soap_instantiate___ns3__FEDummy_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5604 */
#ifndef SOAP_TYPE_afip___ns3__FECompUltimoAutorizado_
#define SOAP_TYPE_afip___ns3__FECompUltimoAutorizado_ (-2046771525)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECompUltimoAutorizado_ {
      public:
        /** Optional element 'ns3:FECompUltimoAutorizado' of XML schema type 'ns3:FECompUltimoAutorizado' */
        _ns3__FECompUltimoAutorizado *ns3__FECompUltimoAutorizado;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECompUltimoAutorizado_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECompUltimoAutorizado_; }
        /** Constructor with member initializations */
        __ns3__FECompUltimoAutorizado_() : ns3__FECompUltimoAutorizado() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECompUltimoAutorizado_ * SOAP_FMAC2 soap_instantiate___ns3__FECompUltimoAutorizado_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5675 */
#ifndef SOAP_TYPE_afip___ns3__FECompConsultar_
#define SOAP_TYPE_afip___ns3__FECompConsultar_ (-2046771527)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECompConsultar_ {
      public:
        /** Optional element 'ns3:FECompConsultar' of XML schema type 'ns3:FECompConsultar' */
        _ns3__FECompConsultar *ns3__FECompConsultar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECompConsultar_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECompConsultar_; }
        /** Constructor with member initializations */
        __ns3__FECompConsultar_() : ns3__FECompConsultar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECompConsultar_ * SOAP_FMAC2 soap_instantiate___ns3__FECompConsultar_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5746 */
#ifndef SOAP_TYPE_afip___ns3__FECAEARegInformativo_
#define SOAP_TYPE_afip___ns3__FECAEARegInformativo_ (-2046771529)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEARegInformativo_ {
      public:
        /** Optional element 'ns3:FECAEARegInformativo' of XML schema type 'ns3:FECAEARegInformativo' */
        _ns3__FECAEARegInformativo *ns3__FECAEARegInformativo;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEARegInformativo_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEARegInformativo_; }
        /** Constructor with member initializations */
        __ns3__FECAEARegInformativo_() : ns3__FECAEARegInformativo() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEARegInformativo_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEARegInformativo_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5817 */
#ifndef SOAP_TYPE_afip___ns3__FECAEASolicitar_
#define SOAP_TYPE_afip___ns3__FECAEASolicitar_ (-2046771531)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEASolicitar_ {
      public:
        /** Optional element 'ns3:FECAEASolicitar' of XML schema type 'ns3:FECAEASolicitar' */
        _ns3__FECAEASolicitar *ns3__FECAEASolicitar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEASolicitar_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEASolicitar_; }
        /** Constructor with member initializations */
        __ns3__FECAEASolicitar_() : ns3__FECAEASolicitar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEASolicitar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEASolicitar_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5888 */
#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar_
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar_ (-2046771533)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEASinMovimientoConsultar_ {
      public:
        /** Optional element 'ns3:FECAEASinMovimientoConsultar' of XML schema type 'ns3:FECAEASinMovimientoConsultar' */
        _ns3__FECAEASinMovimientoConsultar *ns3__FECAEASinMovimientoConsultar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar_; }
        /** Constructor with member initializations */
        __ns3__FECAEASinMovimientoConsultar_() : ns3__FECAEASinMovimientoConsultar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEASinMovimientoConsultar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoConsultar_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:5959 */
#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar_
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar_ (-2046771535)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEASinMovimientoInformar_ {
      public:
        /** Optional element 'ns3:FECAEASinMovimientoInformar' of XML schema type 'ns3:FECAEASinMovimientoInformar' */
        _ns3__FECAEASinMovimientoInformar *ns3__FECAEASinMovimientoInformar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar_; }
        /** Constructor with member initializations */
        __ns3__FECAEASinMovimientoInformar_() : ns3__FECAEASinMovimientoInformar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEASinMovimientoInformar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoInformar_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6030 */
#ifndef SOAP_TYPE_afip___ns3__FECAEAConsultar_
#define SOAP_TYPE_afip___ns3__FECAEAConsultar_ (-2046771537)
/* Wrapper: */
struct SOAP_CMAC __ns3__FECAEAConsultar_ {
      public:
        /** Optional element 'ns3:FECAEAConsultar' of XML schema type 'ns3:FECAEAConsultar' */
        _ns3__FECAEAConsultar *ns3__FECAEAConsultar;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FECAEAConsultar_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FECAEAConsultar_; }
        /** Constructor with member initializations */
        __ns3__FECAEAConsultar_() : ns3__FECAEAConsultar() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FECAEAConsultar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEAConsultar_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6101 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetCotizacion_
#define SOAP_TYPE_afip___ns3__FEParamGetCotizacion_ (-2046771539)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetCotizacion_ {
      public:
        /** Optional element 'ns3:FEParamGetCotizacion' of XML schema type 'ns3:FEParamGetCotizacion' */
        _ns3__FEParamGetCotizacion *ns3__FEParamGetCotizacion;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetCotizacion_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetCotizacion_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetCotizacion_() : ns3__FEParamGetCotizacion() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetCotizacion_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetCotizacion_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6173 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposTributos_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposTributos_ (-2046771541)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposTributos_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposTributos' of XML schema type 'ns3:FEParamGetTiposTributos' */
        _ns3__FEParamGetTiposTributos *ns3__FEParamGetTiposTributos;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposTributos_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposTributos_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposTributos_() : ns3__FEParamGetTiposTributos() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposTributos_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposTributos_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6244 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas_ (-2046771543)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposMonedas_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposMonedas' of XML schema type 'ns3:FEParamGetTiposMonedas' */
        _ns3__FEParamGetTiposMonedas *ns3__FEParamGetTiposMonedas;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposMonedas_() : ns3__FEParamGetTiposMonedas() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposMonedas_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposMonedas_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6315 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposIva_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposIva_ (-2046771545)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposIva_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposIva' of XML schema type 'ns3:FEParamGetTiposIva' */
        _ns3__FEParamGetTiposIva *ns3__FEParamGetTiposIva;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposIva_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposIva_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposIva_() : ns3__FEParamGetTiposIva() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposIva_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposIva_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6386 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional_ (-2046771547)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposOpcional_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposOpcional' of XML schema type 'ns3:FEParamGetTiposOpcional' */
        _ns3__FEParamGetTiposOpcional *ns3__FEParamGetTiposOpcional;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposOpcional_() : ns3__FEParamGetTiposOpcional() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposOpcional_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposOpcional_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6457 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto_ (-2046771549)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposConcepto_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposConcepto' of XML schema type 'ns3:FEParamGetTiposConcepto' */
        _ns3__FEParamGetTiposConcepto *ns3__FEParamGetTiposConcepto;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposConcepto_() : ns3__FEParamGetTiposConcepto() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposConcepto_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposConcepto_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6528 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetPtosVenta_
#define SOAP_TYPE_afip___ns3__FEParamGetPtosVenta_ (-2046771551)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetPtosVenta_ {
      public:
        /** Optional element 'ns3:FEParamGetPtosVenta' of XML schema type 'ns3:FEParamGetPtosVenta' */
        _ns3__FEParamGetPtosVenta *ns3__FEParamGetPtosVenta;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetPtosVenta_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetPtosVenta_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetPtosVenta_() : ns3__FEParamGetPtosVenta() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetPtosVenta_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetPtosVenta_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6599 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposCbte_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposCbte_ (-2046771553)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposCbte_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposCbte' of XML schema type 'ns3:FEParamGetTiposCbte' */
        _ns3__FEParamGetTiposCbte *ns3__FEParamGetTiposCbte;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposCbte_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposCbte_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposCbte_() : ns3__FEParamGetTiposCbte() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposCbte_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposCbte_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6670 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposDoc_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposDoc_ (-2046771555)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposDoc_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposDoc' of XML schema type 'ns3:FEParamGetTiposDoc' */
        _ns3__FEParamGetTiposDoc *ns3__FEParamGetTiposDoc;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposDoc_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposDoc_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposDoc_() : ns3__FEParamGetTiposDoc() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposDoc_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposDoc_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:6742 */
#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposPaises_
#define SOAP_TYPE_afip___ns3__FEParamGetTiposPaises_ (-2046771557)
/* Wrapper: */
struct SOAP_CMAC __ns3__FEParamGetTiposPaises_ {
      public:
        /** Optional element 'ns3:FEParamGetTiposPaises' of XML schema type 'ns3:FEParamGetTiposPaises' */
        _ns3__FEParamGetTiposPaises *ns3__FEParamGetTiposPaises;
      public:
        /** Return unique type id SOAP_TYPE_afip___ns3__FEParamGetTiposPaises_ */
        long soap_type() const { return SOAP_TYPE_afip___ns3__FEParamGetTiposPaises_; }
        /** Constructor with member initializations */
        __ns3__FEParamGetTiposPaises_() : ns3__FEParamGetTiposPaises() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __ns3__FEParamGetTiposPaises_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposPaises_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* soap/afip_soap.h:7447 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_afip_SOAP_ENV__Header
#define SOAP_TYPE_afip_SOAP_ENV__Header (-2046771558)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_afip_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_afip_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* soap/afip_soap.h:7447 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_afip_SOAP_ENV__Code
#define SOAP_TYPE_afip_SOAP_ENV__Code (-2046771559)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_afip_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_afip_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* soap/afip_soap.h:7447 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_afip_SOAP_ENV__Reason
#define SOAP_TYPE_afip_SOAP_ENV__Reason (-2046771561)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_afip_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_afip_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* soap/afip_soap.h:7447 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_afip_SOAP_ENV__Fault
#define SOAP_TYPE_afip_SOAP_ENV__Fault (-2046771562)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_afip_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_afip_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_afip__XML
#define SOAP_TYPE_afip__XML (-2046771204)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_afip__QName
#define SOAP_TYPE_afip__QName (-2046771205)

typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_afip_byte
#define SOAP_TYPE_afip_byte (-2046771202)

#endif

/* short has binding name 'short' for type 'xsd:short' */
#ifndef SOAP_TYPE_afip_short
#define SOAP_TYPE_afip_short (-2046771346)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_afip_int
#define SOAP_TYPE_afip_int (-2046771200)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_afip_LONG64
#define SOAP_TYPE_afip_LONG64 (-2046771331)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_afip_double
#define SOAP_TYPE_afip_double (-2046771336)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_afip_std__string
#define SOAP_TYPE_afip_std__string (-2046771328)

#endif

/* _ns3__FEParamGetTiposPaisesResponse has binding name '_ns3__FEParamGetTiposPaisesResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse (-2046771327)

#endif

/* _ns3__FEParamGetTiposPaises has binding name '_ns3__FEParamGetTiposPaises' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposPaises
#define SOAP_TYPE_afip__ns3__FEParamGetTiposPaises (-2046771326)

#endif

/* _ns3__FEParamGetTiposDocResponse has binding name '_ns3__FEParamGetTiposDocResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse (-2046771325)

#endif

/* _ns3__FEParamGetTiposDoc has binding name '_ns3__FEParamGetTiposDoc' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposDoc
#define SOAP_TYPE_afip__ns3__FEParamGetTiposDoc (-2046771324)

#endif

/* _ns3__FEParamGetTiposCbteResponse has binding name '_ns3__FEParamGetTiposCbteResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse (-2046771323)

#endif

/* _ns3__FEParamGetTiposCbte has binding name '_ns3__FEParamGetTiposCbte' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposCbte
#define SOAP_TYPE_afip__ns3__FEParamGetTiposCbte (-2046771322)

#endif

/* _ns3__FEParamGetPtosVentaResponse has binding name '_ns3__FEParamGetPtosVentaResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse
#define SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse (-2046771321)

#endif

/* _ns3__FEParamGetPtosVenta has binding name '_ns3__FEParamGetPtosVenta' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetPtosVenta
#define SOAP_TYPE_afip__ns3__FEParamGetPtosVenta (-2046771320)

#endif

/* _ns3__FEParamGetTiposConceptoResponse has binding name '_ns3__FEParamGetTiposConceptoResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse (-2046771319)

#endif

/* _ns3__FEParamGetTiposConcepto has binding name '_ns3__FEParamGetTiposConcepto' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto
#define SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto (-2046771318)

#endif

/* _ns3__FEParamGetTiposOpcionalResponse has binding name '_ns3__FEParamGetTiposOpcionalResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse (-2046771317)

#endif

/* _ns3__FEParamGetTiposOpcional has binding name '_ns3__FEParamGetTiposOpcional' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional
#define SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional (-2046771316)

#endif

/* _ns3__FEParamGetTiposIvaResponse has binding name '_ns3__FEParamGetTiposIvaResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse (-2046771315)

#endif

/* _ns3__FEParamGetTiposIva has binding name '_ns3__FEParamGetTiposIva' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposIva
#define SOAP_TYPE_afip__ns3__FEParamGetTiposIva (-2046771314)

#endif

/* _ns3__FEParamGetTiposMonedasResponse has binding name '_ns3__FEParamGetTiposMonedasResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse (-2046771313)

#endif

/* _ns3__FEParamGetTiposMonedas has binding name '_ns3__FEParamGetTiposMonedas' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas
#define SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas (-2046771312)

#endif

/* _ns3__FEParamGetTiposTributosResponse has binding name '_ns3__FEParamGetTiposTributosResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse
#define SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse (-2046771311)

#endif

/* _ns3__FEParamGetTiposTributos has binding name '_ns3__FEParamGetTiposTributos' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposTributos
#define SOAP_TYPE_afip__ns3__FEParamGetTiposTributos (-2046771310)

#endif

/* _ns3__FEParamGetCotizacionResponse has binding name '_ns3__FEParamGetCotizacionResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse
#define SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse (-2046771309)

#endif

/* _ns3__FEParamGetCotizacion has binding name '_ns3__FEParamGetCotizacion' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEParamGetCotizacion
#define SOAP_TYPE_afip__ns3__FEParamGetCotizacion (-2046771308)

#endif

/* _ns3__FECAEAConsultarResponse has binding name '_ns3__FECAEAConsultarResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEAConsultarResponse
#define SOAP_TYPE_afip__ns3__FECAEAConsultarResponse (-2046771307)

#endif

/* _ns3__FECAEAConsultar has binding name '_ns3__FECAEAConsultar' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEAConsultar
#define SOAP_TYPE_afip__ns3__FECAEAConsultar (-2046771306)

#endif

/* _ns3__FECAEASinMovimientoInformarResponse has binding name '_ns3__FECAEASinMovimientoInformarResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse (-2046771305)

#endif

/* _ns3__FECAEASinMovimientoInformar has binding name '_ns3__FECAEASinMovimientoInformar' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar (-2046771304)

#endif

/* _ns3__FECAEASinMovimientoConsultarResponse has binding name '_ns3__FECAEASinMovimientoConsultarResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse (-2046771303)

#endif

/* _ns3__FECAEASinMovimientoConsultar has binding name '_ns3__FECAEASinMovimientoConsultar' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar (-2046771302)

#endif

/* _ns3__FECAEASolicitarResponse has binding name '_ns3__FECAEASolicitarResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEASolicitarResponse
#define SOAP_TYPE_afip__ns3__FECAEASolicitarResponse (-2046771301)

#endif

/* _ns3__FECAEASolicitar has binding name '_ns3__FECAEASolicitar' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEASolicitar
#define SOAP_TYPE_afip__ns3__FECAEASolicitar (-2046771300)

#endif

/* _ns3__FECAEARegInformativoResponse has binding name '_ns3__FECAEARegInformativoResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse
#define SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse (-2046771299)

#endif

/* _ns3__FECAEARegInformativo has binding name '_ns3__FECAEARegInformativo' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAEARegInformativo
#define SOAP_TYPE_afip__ns3__FECAEARegInformativo (-2046771298)

#endif

/* _ns3__FECompConsultarResponse has binding name '_ns3__FECompConsultarResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECompConsultarResponse
#define SOAP_TYPE_afip__ns3__FECompConsultarResponse (-2046771297)

#endif

/* _ns3__FECompConsultar has binding name '_ns3__FECompConsultar' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECompConsultar
#define SOAP_TYPE_afip__ns3__FECompConsultar (-2046771296)

#endif

/* _ns3__FECompUltimoAutorizadoResponse has binding name '_ns3__FECompUltimoAutorizadoResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse
#define SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse (-2046771295)

#endif

/* _ns3__FECompUltimoAutorizado has binding name '_ns3__FECompUltimoAutorizado' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECompUltimoAutorizado
#define SOAP_TYPE_afip__ns3__FECompUltimoAutorizado (-2046771294)

#endif

/* _ns3__FEDummyResponse has binding name '_ns3__FEDummyResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEDummyResponse
#define SOAP_TYPE_afip__ns3__FEDummyResponse (-2046771293)

#endif

/* _ns3__FEDummy has binding name '_ns3__FEDummy' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FEDummy
#define SOAP_TYPE_afip__ns3__FEDummy (-2046771292)

#endif

/* _ns3__FECompTotXRequestResponse has binding name '_ns3__FECompTotXRequestResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECompTotXRequestResponse
#define SOAP_TYPE_afip__ns3__FECompTotXRequestResponse (-2046771291)

#endif

/* _ns3__FECompTotXRequest has binding name '_ns3__FECompTotXRequest' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECompTotXRequest
#define SOAP_TYPE_afip__ns3__FECompTotXRequest (-2046771290)

#endif

/* _ns3__FECAESolicitarResponse has binding name '_ns3__FECAESolicitarResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAESolicitarResponse
#define SOAP_TYPE_afip__ns3__FECAESolicitarResponse (-2046771289)

#endif

/* _ns3__FECAESolicitar has binding name '_ns3__FECAESolicitar' for type '' */
#ifndef SOAP_TYPE_afip__ns3__FECAESolicitar
#define SOAP_TYPE_afip__ns3__FECAESolicitar (-2046771288)

#endif

/* ns3__PaisTipo has binding name 'ns3__PaisTipo' for type 'ns3:PaisTipo' */
#ifndef SOAP_TYPE_afip_ns3__PaisTipo
#define SOAP_TYPE_afip_ns3__PaisTipo (-2046771287)

#endif

/* ns3__ArrayOfPaisTipo has binding name 'ns3__ArrayOfPaisTipo' for type 'ns3:ArrayOfPaisTipo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfPaisTipo
#define SOAP_TYPE_afip_ns3__ArrayOfPaisTipo (-2046771286)

#endif

/* ns3__FEPaisResponse has binding name 'ns3__FEPaisResponse' for type 'ns3:FEPaisResponse' */
#ifndef SOAP_TYPE_afip_ns3__FEPaisResponse
#define SOAP_TYPE_afip_ns3__FEPaisResponse (-2046771285)

#endif

/* ns3__DocTipo has binding name 'ns3__DocTipo' for type 'ns3:DocTipo' */
#ifndef SOAP_TYPE_afip_ns3__DocTipo
#define SOAP_TYPE_afip_ns3__DocTipo (-2046771284)

#endif

/* ns3__ArrayOfDocTipo has binding name 'ns3__ArrayOfDocTipo' for type 'ns3:ArrayOfDocTipo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfDocTipo
#define SOAP_TYPE_afip_ns3__ArrayOfDocTipo (-2046771283)

#endif

/* ns3__DocTipoResponse has binding name 'ns3__DocTipoResponse' for type 'ns3:DocTipoResponse' */
#ifndef SOAP_TYPE_afip_ns3__DocTipoResponse
#define SOAP_TYPE_afip_ns3__DocTipoResponse (-2046771282)

#endif

/* ns3__CbteTipo has binding name 'ns3__CbteTipo' for type 'ns3:CbteTipo' */
#ifndef SOAP_TYPE_afip_ns3__CbteTipo
#define SOAP_TYPE_afip_ns3__CbteTipo (-2046771281)

#endif

/* ns3__ArrayOfCbteTipo has binding name 'ns3__ArrayOfCbteTipo' for type 'ns3:ArrayOfCbteTipo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfCbteTipo
#define SOAP_TYPE_afip_ns3__ArrayOfCbteTipo (-2046771280)

#endif

/* ns3__CbteTipoResponse has binding name 'ns3__CbteTipoResponse' for type 'ns3:CbteTipoResponse' */
#ifndef SOAP_TYPE_afip_ns3__CbteTipoResponse
#define SOAP_TYPE_afip_ns3__CbteTipoResponse (-2046771279)

#endif

/* ns3__PtoVenta has binding name 'ns3__PtoVenta' for type 'ns3:PtoVenta' */
#ifndef SOAP_TYPE_afip_ns3__PtoVenta
#define SOAP_TYPE_afip_ns3__PtoVenta (-2046771278)

#endif

/* ns3__ArrayOfPtoVenta has binding name 'ns3__ArrayOfPtoVenta' for type 'ns3:ArrayOfPtoVenta' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfPtoVenta
#define SOAP_TYPE_afip_ns3__ArrayOfPtoVenta (-2046771277)

#endif

/* ns3__FEPtoVentaResponse has binding name 'ns3__FEPtoVentaResponse' for type 'ns3:FEPtoVentaResponse' */
#ifndef SOAP_TYPE_afip_ns3__FEPtoVentaResponse
#define SOAP_TYPE_afip_ns3__FEPtoVentaResponse (-2046771276)

#endif

/* ns3__ConceptoTipo has binding name 'ns3__ConceptoTipo' for type 'ns3:ConceptoTipo' */
#ifndef SOAP_TYPE_afip_ns3__ConceptoTipo
#define SOAP_TYPE_afip_ns3__ConceptoTipo (-2046771275)

#endif

/* ns3__ArrayOfConceptoTipo has binding name 'ns3__ArrayOfConceptoTipo' for type 'ns3:ArrayOfConceptoTipo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo
#define SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo (-2046771274)

#endif

/* ns3__ConceptoTipoResponse has binding name 'ns3__ConceptoTipoResponse' for type 'ns3:ConceptoTipoResponse' */
#ifndef SOAP_TYPE_afip_ns3__ConceptoTipoResponse
#define SOAP_TYPE_afip_ns3__ConceptoTipoResponse (-2046771273)

#endif

/* ns3__OpcionalTipo has binding name 'ns3__OpcionalTipo' for type 'ns3:OpcionalTipo' */
#ifndef SOAP_TYPE_afip_ns3__OpcionalTipo
#define SOAP_TYPE_afip_ns3__OpcionalTipo (-2046771272)

#endif

/* ns3__ArrayOfOpcionalTipo has binding name 'ns3__ArrayOfOpcionalTipo' for type 'ns3:ArrayOfOpcionalTipo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo
#define SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo (-2046771271)

#endif

/* ns3__OpcionalTipoResponse has binding name 'ns3__OpcionalTipoResponse' for type 'ns3:OpcionalTipoResponse' */
#ifndef SOAP_TYPE_afip_ns3__OpcionalTipoResponse
#define SOAP_TYPE_afip_ns3__OpcionalTipoResponse (-2046771270)

#endif

/* ns3__IvaTipo has binding name 'ns3__IvaTipo' for type 'ns3:IvaTipo' */
#ifndef SOAP_TYPE_afip_ns3__IvaTipo
#define SOAP_TYPE_afip_ns3__IvaTipo (-2046771269)

#endif

/* ns3__ArrayOfIvaTipo has binding name 'ns3__ArrayOfIvaTipo' for type 'ns3:ArrayOfIvaTipo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfIvaTipo
#define SOAP_TYPE_afip_ns3__ArrayOfIvaTipo (-2046771268)

#endif

/* ns3__IvaTipoResponse has binding name 'ns3__IvaTipoResponse' for type 'ns3:IvaTipoResponse' */
#ifndef SOAP_TYPE_afip_ns3__IvaTipoResponse
#define SOAP_TYPE_afip_ns3__IvaTipoResponse (-2046771267)

#endif

/* ns3__Moneda has binding name 'ns3__Moneda' for type 'ns3:Moneda' */
#ifndef SOAP_TYPE_afip_ns3__Moneda
#define SOAP_TYPE_afip_ns3__Moneda (-2046771266)

#endif

/* ns3__ArrayOfMoneda has binding name 'ns3__ArrayOfMoneda' for type 'ns3:ArrayOfMoneda' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfMoneda
#define SOAP_TYPE_afip_ns3__ArrayOfMoneda (-2046771265)

#endif

/* ns3__MonedaResponse has binding name 'ns3__MonedaResponse' for type 'ns3:MonedaResponse' */
#ifndef SOAP_TYPE_afip_ns3__MonedaResponse
#define SOAP_TYPE_afip_ns3__MonedaResponse (-2046771264)

#endif

/* ns3__TributoTipo has binding name 'ns3__TributoTipo' for type 'ns3:TributoTipo' */
#ifndef SOAP_TYPE_afip_ns3__TributoTipo
#define SOAP_TYPE_afip_ns3__TributoTipo (-2046771263)

#endif

/* ns3__ArrayOfTributoTipo has binding name 'ns3__ArrayOfTributoTipo' for type 'ns3:ArrayOfTributoTipo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfTributoTipo
#define SOAP_TYPE_afip_ns3__ArrayOfTributoTipo (-2046771262)

#endif

/* ns3__FETributoResponse has binding name 'ns3__FETributoResponse' for type 'ns3:FETributoResponse' */
#ifndef SOAP_TYPE_afip_ns3__FETributoResponse
#define SOAP_TYPE_afip_ns3__FETributoResponse (-2046771261)

#endif

/* ns3__Cotizacion has binding name 'ns3__Cotizacion' for type 'ns3:Cotizacion' */
#ifndef SOAP_TYPE_afip_ns3__Cotizacion
#define SOAP_TYPE_afip_ns3__Cotizacion (-2046771260)

#endif

/* ns3__FECotizacionResponse has binding name 'ns3__FECotizacionResponse' for type 'ns3:FECotizacionResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECotizacionResponse
#define SOAP_TYPE_afip_ns3__FECotizacionResponse (-2046771259)

#endif

/* ns3__FECAEASinMovResponse has binding name 'ns3__FECAEASinMovResponse' for type 'ns3:FECAEASinMovResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEASinMovResponse
#define SOAP_TYPE_afip_ns3__FECAEASinMovResponse (-2046771258)

#endif

/* ns3__FECAEASinMov has binding name 'ns3__FECAEASinMov' for type 'ns3:FECAEASinMov' */
#ifndef SOAP_TYPE_afip_ns3__FECAEASinMov
#define SOAP_TYPE_afip_ns3__FECAEASinMov (-2046771257)

#endif

/* ns3__ArrayOfFECAEASinMov has binding name 'ns3__ArrayOfFECAEASinMov' for type 'ns3:ArrayOfFECAEASinMov' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov (-2046771256)

#endif

/* ns3__FECAEASinMovConsResponse has binding name 'ns3__FECAEASinMovConsResponse' for type 'ns3:FECAEASinMovConsResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse
#define SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse (-2046771255)

#endif

/* ns3__FECAEAGet has binding name 'ns3__FECAEAGet' for type 'ns3:FECAEAGet' */
#ifndef SOAP_TYPE_afip_ns3__FECAEAGet
#define SOAP_TYPE_afip_ns3__FECAEAGet (-2046771254)

#endif

/* ns3__FECAEAGetResponse has binding name 'ns3__FECAEAGetResponse' for type 'ns3:FECAEAGetResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEAGetResponse
#define SOAP_TYPE_afip_ns3__FECAEAGetResponse (-2046771253)

#endif

/* ns3__FECAEADetResponse has binding name 'ns3__FECAEADetResponse' for type 'ns3:FECAEADetResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEADetResponse
#define SOAP_TYPE_afip_ns3__FECAEADetResponse (-2046771252)

#endif

/* ns3__ArrayOfFECAEADetResponse has binding name 'ns3__ArrayOfFECAEADetResponse' for type 'ns3:ArrayOfFECAEADetResponse' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse (-2046771251)

#endif

/* ns3__FECAEACabResponse has binding name 'ns3__FECAEACabResponse' for type 'ns3:FECAEACabResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEACabResponse
#define SOAP_TYPE_afip_ns3__FECAEACabResponse (-2046771250)

#endif

/* ns3__FECAEAResponse has binding name 'ns3__FECAEAResponse' for type 'ns3:FECAEAResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEAResponse
#define SOAP_TYPE_afip_ns3__FECAEAResponse (-2046771249)

#endif

/* ns3__FECAEADetRequest has binding name 'ns3__FECAEADetRequest' for type 'ns3:FECAEADetRequest' */
#ifndef SOAP_TYPE_afip_ns3__FECAEADetRequest
#define SOAP_TYPE_afip_ns3__FECAEADetRequest (-2046771248)

#endif

/* ns3__ArrayOfFECAEADetRequest has binding name 'ns3__ArrayOfFECAEADetRequest' for type 'ns3:ArrayOfFECAEADetRequest' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest (-2046771247)

#endif

/* ns3__FECAEACabRequest has binding name 'ns3__FECAEACabRequest' for type 'ns3:FECAEACabRequest' */
#ifndef SOAP_TYPE_afip_ns3__FECAEACabRequest
#define SOAP_TYPE_afip_ns3__FECAEACabRequest (-2046771246)

#endif

/* ns3__FECAEARequest has binding name 'ns3__FECAEARequest' for type 'ns3:FECAEARequest' */
#ifndef SOAP_TYPE_afip_ns3__FECAEARequest
#define SOAP_TYPE_afip_ns3__FECAEARequest (-2046771245)

#endif

/* ns3__FECompConsResponse has binding name 'ns3__FECompConsResponse' for type 'ns3:FECompConsResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECompConsResponse
#define SOAP_TYPE_afip_ns3__FECompConsResponse (-2046771244)

#endif

/* ns3__FECompConsultaResponse has binding name 'ns3__FECompConsultaResponse' for type 'ns3:FECompConsultaResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECompConsultaResponse
#define SOAP_TYPE_afip_ns3__FECompConsultaResponse (-2046771243)

#endif

/* ns3__FECompConsultaReq has binding name 'ns3__FECompConsultaReq' for type 'ns3:FECompConsultaReq' */
#ifndef SOAP_TYPE_afip_ns3__FECompConsultaReq
#define SOAP_TYPE_afip_ns3__FECompConsultaReq (-2046771242)

#endif

/* ns3__FERecuperaLastCbteResponse has binding name 'ns3__FERecuperaLastCbteResponse' for type 'ns3:FERecuperaLastCbteResponse' */
#ifndef SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse
#define SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse (-2046771241)

#endif

/* ns3__DummyResponse has binding name 'ns3__DummyResponse' for type 'ns3:DummyResponse' */
#ifndef SOAP_TYPE_afip_ns3__DummyResponse
#define SOAP_TYPE_afip_ns3__DummyResponse (-2046771240)

#endif

/* ns3__FERegXReqResponse has binding name 'ns3__FERegXReqResponse' for type 'ns3:FERegXReqResponse' */
#ifndef SOAP_TYPE_afip_ns3__FERegXReqResponse
#define SOAP_TYPE_afip_ns3__FERegXReqResponse (-2046771239)

#endif

/* ns3__Err has binding name 'ns3__Err' for type 'ns3:Err' */
#ifndef SOAP_TYPE_afip_ns3__Err
#define SOAP_TYPE_afip_ns3__Err (-2046771238)

#endif

/* ns3__ArrayOfErr has binding name 'ns3__ArrayOfErr' for type 'ns3:ArrayOfErr' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfErr
#define SOAP_TYPE_afip_ns3__ArrayOfErr (-2046771237)

#endif

/* ns3__Evt has binding name 'ns3__Evt' for type 'ns3:Evt' */
#ifndef SOAP_TYPE_afip_ns3__Evt
#define SOAP_TYPE_afip_ns3__Evt (-2046771236)

#endif

/* ns3__ArrayOfEvt has binding name 'ns3__ArrayOfEvt' for type 'ns3:ArrayOfEvt' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfEvt
#define SOAP_TYPE_afip_ns3__ArrayOfEvt (-2046771235)

#endif

/* ns3__Obs has binding name 'ns3__Obs' for type 'ns3:Obs' */
#ifndef SOAP_TYPE_afip_ns3__Obs
#define SOAP_TYPE_afip_ns3__Obs (-2046771234)

#endif

/* ns3__ArrayOfObs has binding name 'ns3__ArrayOfObs' for type 'ns3:ArrayOfObs' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfObs
#define SOAP_TYPE_afip_ns3__ArrayOfObs (-2046771233)

#endif

/* ns3__FEDetResponse has binding name 'ns3__FEDetResponse' for type 'ns3:FEDetResponse' */
#ifndef SOAP_TYPE_afip_ns3__FEDetResponse
#define SOAP_TYPE_afip_ns3__FEDetResponse (-2046771232)

#endif

/* ns3__FECAEDetResponse has binding name 'ns3__FECAEDetResponse' for type 'ns3:FECAEDetResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEDetResponse
#define SOAP_TYPE_afip_ns3__FECAEDetResponse (-2046771231)

#endif

/* ns3__ArrayOfFECAEDetResponse has binding name 'ns3__ArrayOfFECAEDetResponse' for type 'ns3:ArrayOfFECAEDetResponse' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse (-2046771230)

#endif

/* ns3__FECabResponse has binding name 'ns3__FECabResponse' for type 'ns3:FECabResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECabResponse
#define SOAP_TYPE_afip_ns3__FECabResponse (-2046771229)

#endif

/* ns3__FECAECabResponse has binding name 'ns3__FECAECabResponse' for type 'ns3:FECAECabResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAECabResponse
#define SOAP_TYPE_afip_ns3__FECAECabResponse (-2046771228)

#endif

/* ns3__FECAEResponse has binding name 'ns3__FECAEResponse' for type 'ns3:FECAEResponse' */
#ifndef SOAP_TYPE_afip_ns3__FECAEResponse
#define SOAP_TYPE_afip_ns3__FECAEResponse (-2046771227)

#endif

/* ns3__Comprador has binding name 'ns3__Comprador' for type 'ns3:Comprador' */
#ifndef SOAP_TYPE_afip_ns3__Comprador
#define SOAP_TYPE_afip_ns3__Comprador (-2046771226)

#endif

/* ns3__ArrayOfComprador has binding name 'ns3__ArrayOfComprador' for type 'ns3:ArrayOfComprador' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfComprador
#define SOAP_TYPE_afip_ns3__ArrayOfComprador (-2046771225)

#endif

/* ns3__Opcional has binding name 'ns3__Opcional' for type 'ns3:Opcional' */
#ifndef SOAP_TYPE_afip_ns3__Opcional
#define SOAP_TYPE_afip_ns3__Opcional (-2046771224)

#endif

/* ns3__ArrayOfOpcional has binding name 'ns3__ArrayOfOpcional' for type 'ns3:ArrayOfOpcional' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfOpcional
#define SOAP_TYPE_afip_ns3__ArrayOfOpcional (-2046771223)

#endif

/* ns3__AlicIva has binding name 'ns3__AlicIva' for type 'ns3:AlicIva' */
#ifndef SOAP_TYPE_afip_ns3__AlicIva
#define SOAP_TYPE_afip_ns3__AlicIva (-2046771222)

#endif

/* ns3__ArrayOfAlicIva has binding name 'ns3__ArrayOfAlicIva' for type 'ns3:ArrayOfAlicIva' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfAlicIva
#define SOAP_TYPE_afip_ns3__ArrayOfAlicIva (-2046771221)

#endif

/* ns3__Tributo has binding name 'ns3__Tributo' for type 'ns3:Tributo' */
#ifndef SOAP_TYPE_afip_ns3__Tributo
#define SOAP_TYPE_afip_ns3__Tributo (-2046771220)

#endif

/* ns3__ArrayOfTributo has binding name 'ns3__ArrayOfTributo' for type 'ns3:ArrayOfTributo' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfTributo
#define SOAP_TYPE_afip_ns3__ArrayOfTributo (-2046771219)

#endif

/* ns3__CbteAsoc has binding name 'ns3__CbteAsoc' for type 'ns3:CbteAsoc' */
#ifndef SOAP_TYPE_afip_ns3__CbteAsoc
#define SOAP_TYPE_afip_ns3__CbteAsoc (-2046771218)

#endif

/* ns3__ArrayOfCbteAsoc has binding name 'ns3__ArrayOfCbteAsoc' for type 'ns3:ArrayOfCbteAsoc' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc
#define SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc (-2046771217)

#endif

/* ns3__FEDetRequest has binding name 'ns3__FEDetRequest' for type 'ns3:FEDetRequest' */
#ifndef SOAP_TYPE_afip_ns3__FEDetRequest
#define SOAP_TYPE_afip_ns3__FEDetRequest (-2046771216)

#endif

/* ns3__FECAEDetRequest has binding name 'ns3__FECAEDetRequest' for type 'ns3:FECAEDetRequest' */
#ifndef SOAP_TYPE_afip_ns3__FECAEDetRequest
#define SOAP_TYPE_afip_ns3__FECAEDetRequest (-2046771215)

#endif

/* ns3__ArrayOfFECAEDetRequest has binding name 'ns3__ArrayOfFECAEDetRequest' for type 'ns3:ArrayOfFECAEDetRequest' */
#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest (-2046771214)

#endif

/* ns3__FECabRequest has binding name 'ns3__FECabRequest' for type 'ns3:FECabRequest' */
#ifndef SOAP_TYPE_afip_ns3__FECabRequest
#define SOAP_TYPE_afip_ns3__FECabRequest (-2046771213)

#endif

/* ns3__FECAECabRequest has binding name 'ns3__FECAECabRequest' for type 'ns3:FECAECabRequest' */
#ifndef SOAP_TYPE_afip_ns3__FECAECabRequest
#define SOAP_TYPE_afip_ns3__FECAECabRequest (-2046771212)

#endif

/* ns3__FECAERequest has binding name 'ns3__FECAERequest' for type 'ns3:FECAERequest' */
#ifndef SOAP_TYPE_afip_ns3__FECAERequest
#define SOAP_TYPE_afip_ns3__FECAERequest (-2046771211)

#endif

/* ns3__FEAuthRequest has binding name 'ns3__FEAuthRequest' for type 'ns3:FEAuthRequest' */
#ifndef SOAP_TYPE_afip_ns3__FEAuthRequest
#define SOAP_TYPE_afip_ns3__FEAuthRequest (-2046771210)

#endif

/* ns2__LoginFault has binding name 'ns2__LoginFault' for type 'ns2:LoginFault' */
#ifndef SOAP_TYPE_afip_ns2__LoginFault
#define SOAP_TYPE_afip_ns2__LoginFault (-2046771209)

#endif

/* _ns1__loginCmsResponse has binding name '_ns1__loginCmsResponse' for type '' */
#ifndef SOAP_TYPE_afip__ns1__loginCmsResponse
#define SOAP_TYPE_afip__ns1__loginCmsResponse (-2046771208)

#endif

/* _ns1__loginCms has binding name '_ns1__loginCms' for type '' */
#ifndef SOAP_TYPE_afip__ns1__loginCms
#define SOAP_TYPE_afip__ns1__loginCms (-2046771207)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_afip_SOAP_ENV__Fault
#define SOAP_TYPE_afip_SOAP_ENV__Fault (-2046771562)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_afip_SOAP_ENV__Reason
#define SOAP_TYPE_afip_SOAP_ENV__Reason (-2046771561)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_afip_SOAP_ENV__Code
#define SOAP_TYPE_afip_SOAP_ENV__Code (-2046771559)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_afip_SOAP_ENV__Header
#define SOAP_TYPE_afip_SOAP_ENV__Header (-2046771558)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_afip_SOAP_ENV__Detail
#define SOAP_TYPE_afip_SOAP_ENV__Detail (-2046771430)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_afip_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_afip_PointerToSOAP_ENV__Reason (-2046771564)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_afip_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_afip_PointerToSOAP_ENV__Detail (-2046771563)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_afip_PointerToSOAP_ENV__Code
#define SOAP_TYPE_afip_PointerToSOAP_ENV__Code (-2046771560)

#endif

/* _ns3__FEParamGetTiposPaises * has binding name 'PointerTo_ns3__FEParamGetTiposPaises' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposPaises
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposPaises (-2046771514)

#endif

/* _ns3__FEParamGetTiposDoc * has binding name 'PointerTo_ns3__FEParamGetTiposDoc' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposDoc
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposDoc (-2046771510)

#endif

/* _ns3__FEParamGetTiposCbte * has binding name 'PointerTo_ns3__FEParamGetTiposCbte' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposCbte
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposCbte (-2046771506)

#endif

/* _ns3__FEParamGetPtosVenta * has binding name 'PointerTo_ns3__FEParamGetPtosVenta' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetPtosVenta
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetPtosVenta (-2046771502)

#endif

/* _ns3__FEParamGetTiposConcepto * has binding name 'PointerTo_ns3__FEParamGetTiposConcepto' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposConcepto
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposConcepto (-2046771498)

#endif

/* _ns3__FEParamGetTiposOpcional * has binding name 'PointerTo_ns3__FEParamGetTiposOpcional' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposOpcional
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposOpcional (-2046771494)

#endif

/* _ns3__FEParamGetTiposIva * has binding name 'PointerTo_ns3__FEParamGetTiposIva' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposIva
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposIva (-2046771490)

#endif

/* _ns3__FEParamGetTiposMonedas * has binding name 'PointerTo_ns3__FEParamGetTiposMonedas' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposMonedas
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposMonedas (-2046771486)

#endif

/* _ns3__FEParamGetTiposTributos * has binding name 'PointerTo_ns3__FEParamGetTiposTributos' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposTributos
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposTributos (-2046771482)

#endif

/* _ns3__FEParamGetCotizacion * has binding name 'PointerTo_ns3__FEParamGetCotizacion' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetCotizacion
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetCotizacion (-2046771478)

#endif

/* _ns3__FECAEAConsultar * has binding name 'PointerTo_ns3__FECAEAConsultar' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEAConsultar
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEAConsultar (-2046771474)

#endif

/* _ns3__FECAEASinMovimientoInformar * has binding name 'PointerTo_ns3__FECAEASinMovimientoInformar' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoInformar
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoInformar (-2046771470)

#endif

/* _ns3__FECAEASinMovimientoConsultar * has binding name 'PointerTo_ns3__FECAEASinMovimientoConsultar' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoConsultar
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoConsultar (-2046771466)

#endif

/* _ns3__FECAEASolicitar * has binding name 'PointerTo_ns3__FECAEASolicitar' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEASolicitar
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEASolicitar (-2046771462)

#endif

/* _ns3__FECAEARegInformativo * has binding name 'PointerTo_ns3__FECAEARegInformativo' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEARegInformativo
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEARegInformativo (-2046771458)

#endif

/* _ns3__FECompConsultar * has binding name 'PointerTo_ns3__FECompConsultar' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECompConsultar
#define SOAP_TYPE_afip_PointerTo_ns3__FECompConsultar (-2046771454)

#endif

/* _ns3__FECompUltimoAutorizado * has binding name 'PointerTo_ns3__FECompUltimoAutorizado' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECompUltimoAutorizado
#define SOAP_TYPE_afip_PointerTo_ns3__FECompUltimoAutorizado (-2046771450)

#endif

/* _ns3__FEDummy * has binding name 'PointerTo_ns3__FEDummy' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEDummy
#define SOAP_TYPE_afip_PointerTo_ns3__FEDummy (-2046771446)

#endif

/* _ns3__FECompTotXRequest * has binding name 'PointerTo_ns3__FECompTotXRequest' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECompTotXRequest
#define SOAP_TYPE_afip_PointerTo_ns3__FECompTotXRequest (-2046771442)

#endif

/* _ns3__FECAESolicitar * has binding name 'PointerTo_ns3__FECAESolicitar' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAESolicitar
#define SOAP_TYPE_afip_PointerTo_ns3__FECAESolicitar (-2046771438)

#endif

/* _ns1__loginCms * has binding name 'PointerTo_ns1__loginCms' for type '' */
#ifndef SOAP_TYPE_afip_PointerTo_ns1__loginCms
#define SOAP_TYPE_afip_PointerTo_ns1__loginCms (-2046771434)

#endif

/* ns2__LoginFault * has binding name 'PointerTons2__LoginFault' for type 'ns2:LoginFault' */
#ifndef SOAP_TYPE_afip_PointerTons2__LoginFault
#define SOAP_TYPE_afip_PointerTons2__LoginFault (-2046771431)

#endif

/* ns3__FEPaisResponse * has binding name 'PointerTons3__FEPaisResponse' for type 'ns3:FEPaisResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FEPaisResponse
#define SOAP_TYPE_afip_PointerTons3__FEPaisResponse (-2046771429)

#endif

/* ns3__DocTipoResponse * has binding name 'PointerTons3__DocTipoResponse' for type 'ns3:DocTipoResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__DocTipoResponse
#define SOAP_TYPE_afip_PointerTons3__DocTipoResponse (-2046771428)

#endif

/* ns3__CbteTipoResponse * has binding name 'PointerTons3__CbteTipoResponse' for type 'ns3:CbteTipoResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__CbteTipoResponse
#define SOAP_TYPE_afip_PointerTons3__CbteTipoResponse (-2046771427)

#endif

/* ns3__FEPtoVentaResponse * has binding name 'PointerTons3__FEPtoVentaResponse' for type 'ns3:FEPtoVentaResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FEPtoVentaResponse
#define SOAP_TYPE_afip_PointerTons3__FEPtoVentaResponse (-2046771426)

#endif

/* ns3__ConceptoTipoResponse * has binding name 'PointerTons3__ConceptoTipoResponse' for type 'ns3:ConceptoTipoResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__ConceptoTipoResponse
#define SOAP_TYPE_afip_PointerTons3__ConceptoTipoResponse (-2046771425)

#endif

/* ns3__OpcionalTipoResponse * has binding name 'PointerTons3__OpcionalTipoResponse' for type 'ns3:OpcionalTipoResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__OpcionalTipoResponse
#define SOAP_TYPE_afip_PointerTons3__OpcionalTipoResponse (-2046771424)

#endif

/* ns3__IvaTipoResponse * has binding name 'PointerTons3__IvaTipoResponse' for type 'ns3:IvaTipoResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__IvaTipoResponse
#define SOAP_TYPE_afip_PointerTons3__IvaTipoResponse (-2046771423)

#endif

/* ns3__MonedaResponse * has binding name 'PointerTons3__MonedaResponse' for type 'ns3:MonedaResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__MonedaResponse
#define SOAP_TYPE_afip_PointerTons3__MonedaResponse (-2046771422)

#endif

/* ns3__FETributoResponse * has binding name 'PointerTons3__FETributoResponse' for type 'ns3:FETributoResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FETributoResponse
#define SOAP_TYPE_afip_PointerTons3__FETributoResponse (-2046771421)

#endif

/* ns3__FECotizacionResponse * has binding name 'PointerTons3__FECotizacionResponse' for type 'ns3:FECotizacionResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECotizacionResponse
#define SOAP_TYPE_afip_PointerTons3__FECotizacionResponse (-2046771420)

#endif

/* ns3__FECAEASinMovResponse * has binding name 'PointerTons3__FECAEASinMovResponse' for type 'ns3:FECAEASinMovResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEASinMovResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEASinMovResponse (-2046771419)

#endif

/* ns3__FECAEASinMovConsResponse * has binding name 'PointerTons3__FECAEASinMovConsResponse' for type 'ns3:FECAEASinMovConsResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEASinMovConsResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEASinMovConsResponse (-2046771418)

#endif

/* ns3__FECAEAGetResponse * has binding name 'PointerTons3__FECAEAGetResponse' for type 'ns3:FECAEAGetResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEAGetResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEAGetResponse (-2046771417)

#endif

/* ns3__FECAEAResponse * has binding name 'PointerTons3__FECAEAResponse' for type 'ns3:FECAEAResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEAResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEAResponse (-2046771416)

#endif

/* ns3__FECAEARequest * has binding name 'PointerTons3__FECAEARequest' for type 'ns3:FECAEARequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEARequest
#define SOAP_TYPE_afip_PointerTons3__FECAEARequest (-2046771415)

#endif

/* ns3__FECompConsultaResponse * has binding name 'PointerTons3__FECompConsultaResponse' for type 'ns3:FECompConsultaResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECompConsultaResponse
#define SOAP_TYPE_afip_PointerTons3__FECompConsultaResponse (-2046771414)

#endif

/* ns3__FECompConsultaReq * has binding name 'PointerTons3__FECompConsultaReq' for type 'ns3:FECompConsultaReq' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECompConsultaReq
#define SOAP_TYPE_afip_PointerTons3__FECompConsultaReq (-2046771413)

#endif

/* ns3__FERecuperaLastCbteResponse * has binding name 'PointerTons3__FERecuperaLastCbteResponse' for type 'ns3:FERecuperaLastCbteResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FERecuperaLastCbteResponse
#define SOAP_TYPE_afip_PointerTons3__FERecuperaLastCbteResponse (-2046771412)

#endif

/* ns3__DummyResponse * has binding name 'PointerTons3__DummyResponse' for type 'ns3:DummyResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__DummyResponse
#define SOAP_TYPE_afip_PointerTons3__DummyResponse (-2046771411)

#endif

/* ns3__FERegXReqResponse * has binding name 'PointerTons3__FERegXReqResponse' for type 'ns3:FERegXReqResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FERegXReqResponse
#define SOAP_TYPE_afip_PointerTons3__FERegXReqResponse (-2046771410)

#endif

/* ns3__FECAEResponse * has binding name 'PointerTons3__FECAEResponse' for type 'ns3:FECAEResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEResponse (-2046771409)

#endif

/* ns3__FECAERequest * has binding name 'PointerTons3__FECAERequest' for type 'ns3:FECAERequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAERequest
#define SOAP_TYPE_afip_PointerTons3__FECAERequest (-2046771408)

#endif

/* ns3__FEAuthRequest * has binding name 'PointerTons3__FEAuthRequest' for type 'ns3:FEAuthRequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__FEAuthRequest
#define SOAP_TYPE_afip_PointerTons3__FEAuthRequest (-2046771407)

#endif

/* ns3__PaisTipo * has binding name 'PointerTons3__PaisTipo' for type 'ns3:PaisTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__PaisTipo
#define SOAP_TYPE_afip_PointerTons3__PaisTipo (-2046771405)

#endif

/* ns3__ArrayOfPaisTipo * has binding name 'PointerTons3__ArrayOfPaisTipo' for type 'ns3:ArrayOfPaisTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfPaisTipo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfPaisTipo (-2046771404)

#endif

/* ns3__DocTipo * has binding name 'PointerTons3__DocTipo' for type 'ns3:DocTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__DocTipo
#define SOAP_TYPE_afip_PointerTons3__DocTipo (-2046771402)

#endif

/* ns3__ArrayOfDocTipo * has binding name 'PointerTons3__ArrayOfDocTipo' for type 'ns3:ArrayOfDocTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfDocTipo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfDocTipo (-2046771401)

#endif

/* ns3__CbteTipo * has binding name 'PointerTons3__CbteTipo' for type 'ns3:CbteTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__CbteTipo
#define SOAP_TYPE_afip_PointerTons3__CbteTipo (-2046771399)

#endif

/* ns3__ArrayOfCbteTipo * has binding name 'PointerTons3__ArrayOfCbteTipo' for type 'ns3:ArrayOfCbteTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfCbteTipo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfCbteTipo (-2046771398)

#endif

/* ns3__PtoVenta * has binding name 'PointerTons3__PtoVenta' for type 'ns3:PtoVenta' */
#ifndef SOAP_TYPE_afip_PointerTons3__PtoVenta
#define SOAP_TYPE_afip_PointerTons3__PtoVenta (-2046771396)

#endif

/* ns3__ArrayOfPtoVenta * has binding name 'PointerTons3__ArrayOfPtoVenta' for type 'ns3:ArrayOfPtoVenta' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfPtoVenta
#define SOAP_TYPE_afip_PointerTons3__ArrayOfPtoVenta (-2046771395)

#endif

/* ns3__ConceptoTipo * has binding name 'PointerTons3__ConceptoTipo' for type 'ns3:ConceptoTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ConceptoTipo
#define SOAP_TYPE_afip_PointerTons3__ConceptoTipo (-2046771393)

#endif

/* ns3__ArrayOfConceptoTipo * has binding name 'PointerTons3__ArrayOfConceptoTipo' for type 'ns3:ArrayOfConceptoTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfConceptoTipo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfConceptoTipo (-2046771392)

#endif

/* ns3__OpcionalTipo * has binding name 'PointerTons3__OpcionalTipo' for type 'ns3:OpcionalTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__OpcionalTipo
#define SOAP_TYPE_afip_PointerTons3__OpcionalTipo (-2046771390)

#endif

/* ns3__ArrayOfOpcionalTipo * has binding name 'PointerTons3__ArrayOfOpcionalTipo' for type 'ns3:ArrayOfOpcionalTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfOpcionalTipo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfOpcionalTipo (-2046771389)

#endif

/* ns3__IvaTipo * has binding name 'PointerTons3__IvaTipo' for type 'ns3:IvaTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__IvaTipo
#define SOAP_TYPE_afip_PointerTons3__IvaTipo (-2046771387)

#endif

/* ns3__ArrayOfIvaTipo * has binding name 'PointerTons3__ArrayOfIvaTipo' for type 'ns3:ArrayOfIvaTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfIvaTipo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfIvaTipo (-2046771386)

#endif

/* ns3__Moneda * has binding name 'PointerTons3__Moneda' for type 'ns3:Moneda' */
#ifndef SOAP_TYPE_afip_PointerTons3__Moneda
#define SOAP_TYPE_afip_PointerTons3__Moneda (-2046771384)

#endif

/* ns3__ArrayOfMoneda * has binding name 'PointerTons3__ArrayOfMoneda' for type 'ns3:ArrayOfMoneda' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfMoneda
#define SOAP_TYPE_afip_PointerTons3__ArrayOfMoneda (-2046771383)

#endif

/* ns3__TributoTipo * has binding name 'PointerTons3__TributoTipo' for type 'ns3:TributoTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__TributoTipo
#define SOAP_TYPE_afip_PointerTons3__TributoTipo (-2046771381)

#endif

/* ns3__ArrayOfTributoTipo * has binding name 'PointerTons3__ArrayOfTributoTipo' for type 'ns3:ArrayOfTributoTipo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfTributoTipo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfTributoTipo (-2046771380)

#endif

/* ns3__Cotizacion * has binding name 'PointerTons3__Cotizacion' for type 'ns3:Cotizacion' */
#ifndef SOAP_TYPE_afip_PointerTons3__Cotizacion
#define SOAP_TYPE_afip_PointerTons3__Cotizacion (-2046771379)

#endif

/* ns3__FECAEASinMov * has binding name 'PointerTons3__FECAEASinMov' for type 'ns3:FECAEASinMov' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEASinMov
#define SOAP_TYPE_afip_PointerTons3__FECAEASinMov (-2046771377)

#endif

/* ns3__ArrayOfFECAEASinMov * has binding name 'PointerTons3__ArrayOfFECAEASinMov' for type 'ns3:ArrayOfFECAEASinMov' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEASinMov
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEASinMov (-2046771376)

#endif

/* ns3__FECAEAGet * has binding name 'PointerTons3__FECAEAGet' for type 'ns3:FECAEAGet' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEAGet
#define SOAP_TYPE_afip_PointerTons3__FECAEAGet (-2046771375)

#endif

/* ns3__FECAEADetResponse * has binding name 'PointerTons3__FECAEADetResponse' for type 'ns3:FECAEADetResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEADetResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEADetResponse (-2046771373)

#endif

/* ns3__ArrayOfFECAEADetResponse * has binding name 'PointerTons3__ArrayOfFECAEADetResponse' for type 'ns3:ArrayOfFECAEADetResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetResponse
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetResponse (-2046771372)

#endif

/* ns3__FECAEACabResponse * has binding name 'PointerTons3__FECAEACabResponse' for type 'ns3:FECAEACabResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEACabResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEACabResponse (-2046771371)

#endif

/* ns3__FECAEADetRequest * has binding name 'PointerTons3__FECAEADetRequest' for type 'ns3:FECAEADetRequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEADetRequest
#define SOAP_TYPE_afip_PointerTons3__FECAEADetRequest (-2046771369)

#endif

/* ns3__ArrayOfFECAEADetRequest * has binding name 'PointerTons3__ArrayOfFECAEADetRequest' for type 'ns3:ArrayOfFECAEADetRequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetRequest
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetRequest (-2046771368)

#endif

/* ns3__FECAEACabRequest * has binding name 'PointerTons3__FECAEACabRequest' for type 'ns3:FECAEACabRequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEACabRequest
#define SOAP_TYPE_afip_PointerTons3__FECAEACabRequest (-2046771367)

#endif

/* ns3__FECompConsResponse * has binding name 'PointerTons3__FECompConsResponse' for type 'ns3:FECompConsResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECompConsResponse
#define SOAP_TYPE_afip_PointerTons3__FECompConsResponse (-2046771366)

#endif

/* ns3__Err * has binding name 'PointerTons3__Err' for type 'ns3:Err' */
#ifndef SOAP_TYPE_afip_PointerTons3__Err
#define SOAP_TYPE_afip_PointerTons3__Err (-2046771364)

#endif

/* ns3__Evt * has binding name 'PointerTons3__Evt' for type 'ns3:Evt' */
#ifndef SOAP_TYPE_afip_PointerTons3__Evt
#define SOAP_TYPE_afip_PointerTons3__Evt (-2046771362)

#endif

/* ns3__Obs * has binding name 'PointerTons3__Obs' for type 'ns3:Obs' */
#ifndef SOAP_TYPE_afip_PointerTons3__Obs
#define SOAP_TYPE_afip_PointerTons3__Obs (-2046771360)

#endif

/* ns3__ArrayOfObs * has binding name 'PointerTons3__ArrayOfObs' for type 'ns3:ArrayOfObs' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfObs
#define SOAP_TYPE_afip_PointerTons3__ArrayOfObs (-2046771359)

#endif

/* ns3__FECAEDetResponse * has binding name 'PointerTons3__FECAEDetResponse' for type 'ns3:FECAEDetResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEDetResponse
#define SOAP_TYPE_afip_PointerTons3__FECAEDetResponse (-2046771357)

#endif

/* ns3__ArrayOfErr * has binding name 'PointerTons3__ArrayOfErr' for type 'ns3:ArrayOfErr' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfErr
#define SOAP_TYPE_afip_PointerTons3__ArrayOfErr (-2046771356)

#endif

/* ns3__ArrayOfEvt * has binding name 'PointerTons3__ArrayOfEvt' for type 'ns3:ArrayOfEvt' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfEvt
#define SOAP_TYPE_afip_PointerTons3__ArrayOfEvt (-2046771355)

#endif

/* ns3__ArrayOfFECAEDetResponse * has binding name 'PointerTons3__ArrayOfFECAEDetResponse' for type 'ns3:ArrayOfFECAEDetResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetResponse
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetResponse (-2046771354)

#endif

/* ns3__FECAECabResponse * has binding name 'PointerTons3__FECAECabResponse' for type 'ns3:FECAECabResponse' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAECabResponse
#define SOAP_TYPE_afip_PointerTons3__FECAECabResponse (-2046771353)

#endif

/* ns3__Comprador * has binding name 'PointerTons3__Comprador' for type 'ns3:Comprador' */
#ifndef SOAP_TYPE_afip_PointerTons3__Comprador
#define SOAP_TYPE_afip_PointerTons3__Comprador (-2046771351)

#endif

/* ns3__Opcional * has binding name 'PointerTons3__Opcional' for type 'ns3:Opcional' */
#ifndef SOAP_TYPE_afip_PointerTons3__Opcional
#define SOAP_TYPE_afip_PointerTons3__Opcional (-2046771349)

#endif

/* ns3__AlicIva * has binding name 'PointerTons3__AlicIva' for type 'ns3:AlicIva' */
#ifndef SOAP_TYPE_afip_PointerTons3__AlicIva
#define SOAP_TYPE_afip_PointerTons3__AlicIva (-2046771347)

#endif

/* ns3__Tributo * has binding name 'PointerTons3__Tributo' for type 'ns3:Tributo' */
#ifndef SOAP_TYPE_afip_PointerTons3__Tributo
#define SOAP_TYPE_afip_PointerTons3__Tributo (-2046771344)

#endif

/* ns3__CbteAsoc * has binding name 'PointerTons3__CbteAsoc' for type 'ns3:CbteAsoc' */
#ifndef SOAP_TYPE_afip_PointerTons3__CbteAsoc
#define SOAP_TYPE_afip_PointerTons3__CbteAsoc (-2046771342)

#endif

/* ns3__ArrayOfComprador * has binding name 'PointerTons3__ArrayOfComprador' for type 'ns3:ArrayOfComprador' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfComprador
#define SOAP_TYPE_afip_PointerTons3__ArrayOfComprador (-2046771341)

#endif

/* ns3__ArrayOfOpcional * has binding name 'PointerTons3__ArrayOfOpcional' for type 'ns3:ArrayOfOpcional' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfOpcional
#define SOAP_TYPE_afip_PointerTons3__ArrayOfOpcional (-2046771340)

#endif

/* ns3__ArrayOfAlicIva * has binding name 'PointerTons3__ArrayOfAlicIva' for type 'ns3:ArrayOfAlicIva' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfAlicIva
#define SOAP_TYPE_afip_PointerTons3__ArrayOfAlicIva (-2046771339)

#endif

/* ns3__ArrayOfTributo * has binding name 'PointerTons3__ArrayOfTributo' for type 'ns3:ArrayOfTributo' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfTributo
#define SOAP_TYPE_afip_PointerTons3__ArrayOfTributo (-2046771338)

#endif

/* ns3__ArrayOfCbteAsoc * has binding name 'PointerTons3__ArrayOfCbteAsoc' for type 'ns3:ArrayOfCbteAsoc' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfCbteAsoc
#define SOAP_TYPE_afip_PointerTons3__ArrayOfCbteAsoc (-2046771337)

#endif

/* ns3__FECAEDetRequest * has binding name 'PointerTons3__FECAEDetRequest' for type 'ns3:FECAEDetRequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAEDetRequest
#define SOAP_TYPE_afip_PointerTons3__FECAEDetRequest (-2046771334)

#endif

/* ns3__ArrayOfFECAEDetRequest * has binding name 'PointerTons3__ArrayOfFECAEDetRequest' for type 'ns3:ArrayOfFECAEDetRequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetRequest
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetRequest (-2046771333)

#endif

/* ns3__FECAECabRequest * has binding name 'PointerTons3__FECAECabRequest' for type 'ns3:FECAECabRequest' */
#ifndef SOAP_TYPE_afip_PointerTons3__FECAECabRequest
#define SOAP_TYPE_afip_PointerTons3__FECAECabRequest (-2046771332)

#endif

/* std::string * has binding name 'PointerTostd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_afip_PointerTostd__string
#define SOAP_TYPE_afip_PointerTostd__string (-2046771330)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_afip__QName
#define SOAP_TYPE_afip__QName (-2046771205)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_afip__XML
#define SOAP_TYPE_afip__XML (-2046771204)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_afip_string
#define SOAP_TYPE_afip_string (-2046771203)

#endif

/* std::vector<ns3__PaisTipo *>  has binding name 'std__vectorTemplateOfPointerTons3__PaisTipo' for type 'ns3:PaisTipo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PaisTipo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PaisTipo (-2046771406)

#endif

/* std::vector<ns3__DocTipo *>  has binding name 'std__vectorTemplateOfPointerTons3__DocTipo' for type 'ns3:DocTipo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__DocTipo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__DocTipo (-2046771403)

#endif

/* std::vector<ns3__CbteTipo *>  has binding name 'std__vectorTemplateOfPointerTons3__CbteTipo' for type 'ns3:CbteTipo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteTipo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteTipo (-2046771400)

#endif

/* std::vector<ns3__PtoVenta *>  has binding name 'std__vectorTemplateOfPointerTons3__PtoVenta' for type 'ns3:PtoVenta' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PtoVenta
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PtoVenta (-2046771397)

#endif

/* std::vector<ns3__ConceptoTipo *>  has binding name 'std__vectorTemplateOfPointerTons3__ConceptoTipo' for type 'ns3:ConceptoTipo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__ConceptoTipo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__ConceptoTipo (-2046771394)

#endif

/* std::vector<ns3__OpcionalTipo *>  has binding name 'std__vectorTemplateOfPointerTons3__OpcionalTipo' for type 'ns3:OpcionalTipo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__OpcionalTipo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__OpcionalTipo (-2046771391)

#endif

/* std::vector<ns3__IvaTipo *>  has binding name 'std__vectorTemplateOfPointerTons3__IvaTipo' for type 'ns3:IvaTipo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__IvaTipo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__IvaTipo (-2046771388)

#endif

/* std::vector<ns3__Moneda *>  has binding name 'std__vectorTemplateOfPointerTons3__Moneda' for type 'ns3:Moneda' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Moneda
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Moneda (-2046771385)

#endif

/* std::vector<ns3__TributoTipo *>  has binding name 'std__vectorTemplateOfPointerTons3__TributoTipo' for type 'ns3:TributoTipo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__TributoTipo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__TributoTipo (-2046771382)

#endif

/* std::vector<ns3__FECAEASinMov *>  has binding name 'std__vectorTemplateOfPointerTons3__FECAEASinMov' for type 'ns3:FECAEASinMov' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEASinMov
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEASinMov (-2046771378)

#endif

/* std::vector<ns3__FECAEADetResponse *>  has binding name 'std__vectorTemplateOfPointerTons3__FECAEADetResponse' for type 'ns3:FECAEADetResponse' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetResponse
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetResponse (-2046771374)

#endif

/* std::vector<ns3__FECAEADetRequest *>  has binding name 'std__vectorTemplateOfPointerTons3__FECAEADetRequest' for type 'ns3:FECAEADetRequest' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetRequest
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetRequest (-2046771370)

#endif

/* std::vector<ns3__Err *>  has binding name 'std__vectorTemplateOfPointerTons3__Err' for type 'ns3:Err' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Err
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Err (-2046771365)

#endif

/* std::vector<ns3__Evt *>  has binding name 'std__vectorTemplateOfPointerTons3__Evt' for type 'ns3:Evt' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Evt
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Evt (-2046771363)

#endif

/* std::vector<ns3__Obs *>  has binding name 'std__vectorTemplateOfPointerTons3__Obs' for type 'ns3:Obs' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Obs
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Obs (-2046771361)

#endif

/* std::vector<ns3__FECAEDetResponse *>  has binding name 'std__vectorTemplateOfPointerTons3__FECAEDetResponse' for type 'ns3:FECAEDetResponse' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetResponse
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetResponse (-2046771358)

#endif

/* std::vector<ns3__Comprador *>  has binding name 'std__vectorTemplateOfPointerTons3__Comprador' for type 'ns3:Comprador' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Comprador
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Comprador (-2046771352)

#endif

/* std::vector<ns3__Opcional *>  has binding name 'std__vectorTemplateOfPointerTons3__Opcional' for type 'ns3:Opcional' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Opcional
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Opcional (-2046771350)

#endif

/* std::vector<ns3__AlicIva *>  has binding name 'std__vectorTemplateOfPointerTons3__AlicIva' for type 'ns3:AlicIva' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__AlicIva
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__AlicIva (-2046771348)

#endif

/* std::vector<ns3__Tributo *>  has binding name 'std__vectorTemplateOfPointerTons3__Tributo' for type 'ns3:Tributo' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Tributo
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Tributo (-2046771345)

#endif

/* std::vector<ns3__CbteAsoc *>  has binding name 'std__vectorTemplateOfPointerTons3__CbteAsoc' for type 'ns3:CbteAsoc' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteAsoc
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteAsoc (-2046771343)

#endif

/* std::vector<ns3__FECAEDetRequest *>  has binding name 'std__vectorTemplateOfPointerTons3__FECAEDetRequest' for type 'ns3:FECAEDetRequest' */
#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetRequest
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetRequest (-2046771335)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace afip


#endif

/* End of afipStub.h */
