/* afipH.h
   Generated by gSOAP 2.8.89 for soap/afip_soap.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef afipH_H
#define afipH_H
#include "afipStub.h"

namespace afip {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 afip_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 afip_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 afip_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 afip_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_afip_byte_DEFINED
#define SOAP_TYPE_afip_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (afip::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_short_DEFINED
#define SOAP_TYPE_afip_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_short(soap, p, "short", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_short(struct soap *soap, short *p)
{
	if (afip::soap_read_short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_int_DEFINED
#define SOAP_TYPE_afip_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (afip::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_LONG64_DEFINED
#define SOAP_TYPE_afip_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (afip::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_double_DEFINED
#define SOAP_TYPE_afip_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (afip::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_std__string_DEFINED
#define SOAP_TYPE_afip_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = afip::soap_new_std__string(soap);
	if (_p)
	{	afip::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = afip::soap_new_std__string(soap);
	if (_p)
	{	afip::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (afip::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposPaisesResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposPaisesResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposPaisesResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposPaisesResponse(struct soap*, const char*, _ns3__FEParamGetTiposPaisesResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposPaisesResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposPaisesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposPaisesResponse * soap_new__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposPaisesResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposPaisesResponse * soap_new_req__ns3__FEParamGetTiposPaisesResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposPaisesResponse *_p = afip::soap_new__ns3__FEParamGetTiposPaisesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposPaisesResponse * soap_new_set__ns3__FEParamGetTiposPaisesResponse(
	struct soap *soap,
	ns3__FEPaisResponse *FEParamGetTiposPaisesResult)
{
	_ns3__FEParamGetTiposPaisesResponse *_p = afip::soap_new__ns3__FEParamGetTiposPaisesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposPaisesResponse::FEParamGetTiposPaisesResult = FEParamGetTiposPaisesResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, _ns3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposPaisesResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposPaisesResponse(struct soap*, _ns3__FEParamGetTiposPaisesResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, _ns3__FEParamGetTiposPaisesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposPaisesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaisesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposPaisesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposPaisesResponse(struct soap *soap, _ns3__FEParamGetTiposPaisesResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposPaisesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposPaises_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposPaises_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposPaises(struct soap*, const char*, int, const _ns3__FEParamGetTiposPaises *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposPaises * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposPaises(struct soap*, const char*, _ns3__FEParamGetTiposPaises *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposPaises * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposPaises(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposPaises * soap_new__ns3__FEParamGetTiposPaises(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposPaises(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposPaises * soap_new_req__ns3__FEParamGetTiposPaises(
	struct soap *soap)
{
	_ns3__FEParamGetTiposPaises *_p = afip::soap_new__ns3__FEParamGetTiposPaises(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposPaises * soap_new_set__ns3__FEParamGetTiposPaises(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposPaises *_p = afip::soap_new__ns3__FEParamGetTiposPaises(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposPaises::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposPaises(struct soap *soap, _ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposPaises * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposPaises(struct soap*, _ns3__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposPaises(struct soap *soap, _ns3__FEParamGetTiposPaises *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposPaises(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _ns3__FEParamGetTiposPaises *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposPaises(struct soap *soap, _ns3__FEParamGetTiposPaises *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposDocResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposDocResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposDocResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposDocResponse(struct soap*, const char*, _ns3__FEParamGetTiposDocResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposDocResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposDocResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposDocResponse * soap_new__ns3__FEParamGetTiposDocResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposDocResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposDocResponse * soap_new_req__ns3__FEParamGetTiposDocResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposDocResponse *_p = afip::soap_new__ns3__FEParamGetTiposDocResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposDocResponse * soap_new_set__ns3__FEParamGetTiposDocResponse(
	struct soap *soap,
	ns3__DocTipoResponse *FEParamGetTiposDocResult)
{
	_ns3__FEParamGetTiposDocResponse *_p = afip::soap_new__ns3__FEParamGetTiposDocResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposDocResponse::FEParamGetTiposDocResult = FEParamGetTiposDocResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposDocResponse(struct soap *soap, _ns3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposDocResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposDocResponse(struct soap*, _ns3__FEParamGetTiposDocResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposDocResponse(struct soap *soap, _ns3__FEParamGetTiposDocResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposDocResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDocResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposDocResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposDocResponse(struct soap *soap, _ns3__FEParamGetTiposDocResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposDocResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposDoc_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposDoc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposDoc(struct soap*, const char*, int, const _ns3__FEParamGetTiposDoc *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposDoc * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposDoc(struct soap*, const char*, _ns3__FEParamGetTiposDoc *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposDoc * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposDoc(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposDoc * soap_new__ns3__FEParamGetTiposDoc(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposDoc(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposDoc * soap_new_req__ns3__FEParamGetTiposDoc(
	struct soap *soap)
{
	_ns3__FEParamGetTiposDoc *_p = afip::soap_new__ns3__FEParamGetTiposDoc(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposDoc * soap_new_set__ns3__FEParamGetTiposDoc(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposDoc *_p = afip::soap_new__ns3__FEParamGetTiposDoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposDoc::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposDoc(struct soap *soap, _ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposDoc * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposDoc(struct soap*, _ns3__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposDoc(struct soap *soap, _ns3__FEParamGetTiposDoc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposDoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _ns3__FEParamGetTiposDoc *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposDoc(struct soap *soap, _ns3__FEParamGetTiposDoc *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposCbteResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposCbteResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposCbteResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposCbteResponse(struct soap*, const char*, _ns3__FEParamGetTiposCbteResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposCbteResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposCbteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposCbteResponse * soap_new__ns3__FEParamGetTiposCbteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposCbteResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposCbteResponse * soap_new_req__ns3__FEParamGetTiposCbteResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposCbteResponse *_p = afip::soap_new__ns3__FEParamGetTiposCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposCbteResponse * soap_new_set__ns3__FEParamGetTiposCbteResponse(
	struct soap *soap,
	ns3__CbteTipoResponse *FEParamGetTiposCbteResult)
{
	_ns3__FEParamGetTiposCbteResponse *_p = afip::soap_new__ns3__FEParamGetTiposCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposCbteResponse::FEParamGetTiposCbteResult = FEParamGetTiposCbteResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposCbteResponse(struct soap *soap, _ns3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposCbteResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposCbteResponse(struct soap*, _ns3__FEParamGetTiposCbteResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposCbteResponse(struct soap *soap, _ns3__FEParamGetTiposCbteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposCbteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposCbteResponse(struct soap *soap, _ns3__FEParamGetTiposCbteResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposCbte_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposCbte_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposCbte(struct soap*, const char*, int, const _ns3__FEParamGetTiposCbte *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposCbte * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposCbte(struct soap*, const char*, _ns3__FEParamGetTiposCbte *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposCbte * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposCbte(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposCbte * soap_new__ns3__FEParamGetTiposCbte(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposCbte(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposCbte * soap_new_req__ns3__FEParamGetTiposCbte(
	struct soap *soap)
{
	_ns3__FEParamGetTiposCbte *_p = afip::soap_new__ns3__FEParamGetTiposCbte(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposCbte * soap_new_set__ns3__FEParamGetTiposCbte(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposCbte *_p = afip::soap_new__ns3__FEParamGetTiposCbte(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposCbte::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposCbte(struct soap *soap, _ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposCbte * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposCbte(struct soap*, _ns3__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposCbte(struct soap *soap, _ns3__FEParamGetTiposCbte *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposCbte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _ns3__FEParamGetTiposCbte *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposCbte(struct soap *soap, _ns3__FEParamGetTiposCbte *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetPtosVentaResponse(struct soap*, const char*, int, const _ns3__FEParamGetPtosVentaResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetPtosVentaResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetPtosVentaResponse(struct soap*, const char*, _ns3__FEParamGetPtosVentaResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetPtosVentaResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetPtosVentaResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetPtosVentaResponse * soap_new__ns3__FEParamGetPtosVentaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetPtosVentaResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetPtosVentaResponse * soap_new_req__ns3__FEParamGetPtosVentaResponse(
	struct soap *soap)
{
	_ns3__FEParamGetPtosVentaResponse *_p = afip::soap_new__ns3__FEParamGetPtosVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetPtosVentaResponse * soap_new_set__ns3__FEParamGetPtosVentaResponse(
	struct soap *soap,
	ns3__FEPtoVentaResponse *FEParamGetPtosVentaResult)
{
	_ns3__FEParamGetPtosVentaResponse *_p = afip::soap_new__ns3__FEParamGetPtosVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetPtosVentaResponse::FEParamGetPtosVentaResult = FEParamGetPtosVentaResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetPtosVentaResponse(struct soap *soap, _ns3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetPtosVentaResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetPtosVentaResponse(struct soap*, _ns3__FEParamGetPtosVentaResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetPtosVentaResponse(struct soap *soap, _ns3__FEParamGetPtosVentaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetPtosVentaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVentaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetPtosVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetPtosVentaResponse(struct soap *soap, _ns3__FEParamGetPtosVentaResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetPtosVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetPtosVenta_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetPtosVenta_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetPtosVenta(struct soap*, const char*, int, const _ns3__FEParamGetPtosVenta *, const char*);
SOAP_FMAC3 _ns3__FEParamGetPtosVenta * SOAP_FMAC4 soap_in__ns3__FEParamGetPtosVenta(struct soap*, const char*, _ns3__FEParamGetPtosVenta *, const char*);
SOAP_FMAC1 _ns3__FEParamGetPtosVenta * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetPtosVenta(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetPtosVenta * soap_new__ns3__FEParamGetPtosVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetPtosVenta(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetPtosVenta * soap_new_req__ns3__FEParamGetPtosVenta(
	struct soap *soap)
{
	_ns3__FEParamGetPtosVenta *_p = afip::soap_new__ns3__FEParamGetPtosVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetPtosVenta * soap_new_set__ns3__FEParamGetPtosVenta(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetPtosVenta *_p = afip::soap_new__ns3__FEParamGetPtosVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetPtosVenta::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetPtosVenta(struct soap *soap, _ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetPtosVenta * SOAP_FMAC4 soap_get__ns3__FEParamGetPtosVenta(struct soap*, _ns3__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_read__ns3__FEParamGetPtosVenta(struct soap *soap, _ns3__FEParamGetPtosVenta *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetPtosVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _ns3__FEParamGetPtosVenta *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetPtosVenta(struct soap *soap, _ns3__FEParamGetPtosVenta *p)
{
	if (afip::soap_read__ns3__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposConceptoResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposConceptoResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposConceptoResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposConceptoResponse(struct soap*, const char*, _ns3__FEParamGetTiposConceptoResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposConceptoResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposConceptoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposConceptoResponse * soap_new__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposConceptoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposConceptoResponse * soap_new_req__ns3__FEParamGetTiposConceptoResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposConceptoResponse *_p = afip::soap_new__ns3__FEParamGetTiposConceptoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposConceptoResponse * soap_new_set__ns3__FEParamGetTiposConceptoResponse(
	struct soap *soap,
	ns3__ConceptoTipoResponse *FEParamGetTiposConceptoResult)
{
	_ns3__FEParamGetTiposConceptoResponse *_p = afip::soap_new__ns3__FEParamGetTiposConceptoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposConceptoResponse::FEParamGetTiposConceptoResult = FEParamGetTiposConceptoResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, _ns3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposConceptoResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposConceptoResponse(struct soap*, _ns3__FEParamGetTiposConceptoResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, _ns3__FEParamGetTiposConceptoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposConceptoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConceptoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposConceptoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposConceptoResponse(struct soap *soap, _ns3__FEParamGetTiposConceptoResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposConceptoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposConcepto(struct soap*, const char*, int, const _ns3__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposConcepto * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposConcepto(struct soap*, const char*, _ns3__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposConcepto * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposConcepto(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposConcepto * soap_new__ns3__FEParamGetTiposConcepto(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposConcepto(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposConcepto * soap_new_req__ns3__FEParamGetTiposConcepto(
	struct soap *soap)
{
	_ns3__FEParamGetTiposConcepto *_p = afip::soap_new__ns3__FEParamGetTiposConcepto(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposConcepto * soap_new_set__ns3__FEParamGetTiposConcepto(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposConcepto *_p = afip::soap_new__ns3__FEParamGetTiposConcepto(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposConcepto::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposConcepto(struct soap *soap, _ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposConcepto * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposConcepto(struct soap*, _ns3__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposConcepto(struct soap *soap, _ns3__FEParamGetTiposConcepto *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposConcepto(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _ns3__FEParamGetTiposConcepto *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposConcepto(struct soap *soap, _ns3__FEParamGetTiposConcepto *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposOpcionalResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposOpcionalResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposOpcionalResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposOpcionalResponse(struct soap*, const char*, _ns3__FEParamGetTiposOpcionalResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposOpcionalResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposOpcionalResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposOpcionalResponse * soap_new__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposOpcionalResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposOpcionalResponse * soap_new_req__ns3__FEParamGetTiposOpcionalResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposOpcionalResponse *_p = afip::soap_new__ns3__FEParamGetTiposOpcionalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposOpcionalResponse * soap_new_set__ns3__FEParamGetTiposOpcionalResponse(
	struct soap *soap,
	ns3__OpcionalTipoResponse *FEParamGetTiposOpcionalResult)
{
	_ns3__FEParamGetTiposOpcionalResponse *_p = afip::soap_new__ns3__FEParamGetTiposOpcionalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposOpcionalResponse::FEParamGetTiposOpcionalResult = FEParamGetTiposOpcionalResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, _ns3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposOpcionalResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposOpcionalResponse(struct soap*, _ns3__FEParamGetTiposOpcionalResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, _ns3__FEParamGetTiposOpcionalResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposOpcionalResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcionalResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposOpcionalResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposOpcionalResponse(struct soap *soap, _ns3__FEParamGetTiposOpcionalResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposOpcionalResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposOpcional(struct soap*, const char*, int, const _ns3__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposOpcional * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposOpcional(struct soap*, const char*, _ns3__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposOpcional * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposOpcional(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposOpcional * soap_new__ns3__FEParamGetTiposOpcional(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposOpcional(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposOpcional * soap_new_req__ns3__FEParamGetTiposOpcional(
	struct soap *soap)
{
	_ns3__FEParamGetTiposOpcional *_p = afip::soap_new__ns3__FEParamGetTiposOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposOpcional * soap_new_set__ns3__FEParamGetTiposOpcional(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposOpcional *_p = afip::soap_new__ns3__FEParamGetTiposOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposOpcional::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposOpcional(struct soap *soap, _ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposOpcional * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposOpcional(struct soap*, _ns3__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposOpcional(struct soap *soap, _ns3__FEParamGetTiposOpcional *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposOpcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _ns3__FEParamGetTiposOpcional *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposOpcional(struct soap *soap, _ns3__FEParamGetTiposOpcional *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposIvaResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposIvaResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposIvaResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposIvaResponse(struct soap*, const char*, _ns3__FEParamGetTiposIvaResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposIvaResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposIvaResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposIvaResponse * soap_new__ns3__FEParamGetTiposIvaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposIvaResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposIvaResponse * soap_new_req__ns3__FEParamGetTiposIvaResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposIvaResponse *_p = afip::soap_new__ns3__FEParamGetTiposIvaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposIvaResponse * soap_new_set__ns3__FEParamGetTiposIvaResponse(
	struct soap *soap,
	ns3__IvaTipoResponse *FEParamGetTiposIvaResult)
{
	_ns3__FEParamGetTiposIvaResponse *_p = afip::soap_new__ns3__FEParamGetTiposIvaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposIvaResponse::FEParamGetTiposIvaResult = FEParamGetTiposIvaResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposIvaResponse(struct soap *soap, _ns3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposIvaResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposIvaResponse(struct soap*, _ns3__FEParamGetTiposIvaResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposIvaResponse(struct soap *soap, _ns3__FEParamGetTiposIvaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposIvaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIvaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposIvaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposIvaResponse(struct soap *soap, _ns3__FEParamGetTiposIvaResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposIvaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposIva_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposIva_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposIva(struct soap*, const char*, int, const _ns3__FEParamGetTiposIva *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposIva * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposIva(struct soap*, const char*, _ns3__FEParamGetTiposIva *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposIva * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposIva(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposIva * soap_new__ns3__FEParamGetTiposIva(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposIva(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposIva * soap_new_req__ns3__FEParamGetTiposIva(
	struct soap *soap)
{
	_ns3__FEParamGetTiposIva *_p = afip::soap_new__ns3__FEParamGetTiposIva(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposIva * soap_new_set__ns3__FEParamGetTiposIva(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposIva *_p = afip::soap_new__ns3__FEParamGetTiposIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposIva::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposIva(struct soap *soap, _ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposIva * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposIva(struct soap*, _ns3__FEParamGetTiposIva *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposIva(struct soap *soap, _ns3__FEParamGetTiposIva *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, _ns3__FEParamGetTiposIva *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposIva(struct soap *soap, _ns3__FEParamGetTiposIva *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposMonedasResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposMonedasResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposMonedasResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposMonedasResponse(struct soap*, const char*, _ns3__FEParamGetTiposMonedasResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposMonedasResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposMonedasResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposMonedasResponse * soap_new__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposMonedasResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposMonedasResponse * soap_new_req__ns3__FEParamGetTiposMonedasResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposMonedasResponse *_p = afip::soap_new__ns3__FEParamGetTiposMonedasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposMonedasResponse * soap_new_set__ns3__FEParamGetTiposMonedasResponse(
	struct soap *soap,
	ns3__MonedaResponse *FEParamGetTiposMonedasResult)
{
	_ns3__FEParamGetTiposMonedasResponse *_p = afip::soap_new__ns3__FEParamGetTiposMonedasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposMonedasResponse::FEParamGetTiposMonedasResult = FEParamGetTiposMonedasResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, _ns3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposMonedasResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposMonedasResponse(struct soap*, _ns3__FEParamGetTiposMonedasResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, _ns3__FEParamGetTiposMonedasResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposMonedasResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedasResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposMonedasResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposMonedasResponse(struct soap *soap, _ns3__FEParamGetTiposMonedasResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposMonedasResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposMonedas(struct soap*, const char*, int, const _ns3__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposMonedas * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposMonedas(struct soap*, const char*, _ns3__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposMonedas * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposMonedas(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposMonedas * soap_new__ns3__FEParamGetTiposMonedas(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposMonedas(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposMonedas * soap_new_req__ns3__FEParamGetTiposMonedas(
	struct soap *soap)
{
	_ns3__FEParamGetTiposMonedas *_p = afip::soap_new__ns3__FEParamGetTiposMonedas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposMonedas * soap_new_set__ns3__FEParamGetTiposMonedas(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposMonedas *_p = afip::soap_new__ns3__FEParamGetTiposMonedas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposMonedas::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposMonedas(struct soap *soap, _ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposMonedas * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposMonedas(struct soap*, _ns3__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposMonedas(struct soap *soap, _ns3__FEParamGetTiposMonedas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposMonedas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _ns3__FEParamGetTiposMonedas *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposMonedas(struct soap *soap, _ns3__FEParamGetTiposMonedas *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposTributosResponse(struct soap*, const char*, int, const _ns3__FEParamGetTiposTributosResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposTributosResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposTributosResponse(struct soap*, const char*, _ns3__FEParamGetTiposTributosResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposTributosResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposTributosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposTributosResponse * soap_new__ns3__FEParamGetTiposTributosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposTributosResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposTributosResponse * soap_new_req__ns3__FEParamGetTiposTributosResponse(
	struct soap *soap)
{
	_ns3__FEParamGetTiposTributosResponse *_p = afip::soap_new__ns3__FEParamGetTiposTributosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposTributosResponse * soap_new_set__ns3__FEParamGetTiposTributosResponse(
	struct soap *soap,
	ns3__FETributoResponse *FEParamGetTiposTributosResult)
{
	_ns3__FEParamGetTiposTributosResponse *_p = afip::soap_new__ns3__FEParamGetTiposTributosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposTributosResponse::FEParamGetTiposTributosResult = FEParamGetTiposTributosResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposTributosResponse(struct soap *soap, _ns3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposTributosResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposTributosResponse(struct soap*, _ns3__FEParamGetTiposTributosResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposTributosResponse(struct soap *soap, _ns3__FEParamGetTiposTributosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposTributosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposTributosResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposTributosResponse(struct soap *soap, _ns3__FEParamGetTiposTributosResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposTributosResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetTiposTributos_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetTiposTributos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetTiposTributos(struct soap*, const char*, int, const _ns3__FEParamGetTiposTributos *, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposTributos * SOAP_FMAC4 soap_in__ns3__FEParamGetTiposTributos(struct soap*, const char*, _ns3__FEParamGetTiposTributos *, const char*);
SOAP_FMAC1 _ns3__FEParamGetTiposTributos * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetTiposTributos(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetTiposTributos * soap_new__ns3__FEParamGetTiposTributos(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetTiposTributos(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetTiposTributos * soap_new_req__ns3__FEParamGetTiposTributos(
	struct soap *soap)
{
	_ns3__FEParamGetTiposTributos *_p = afip::soap_new__ns3__FEParamGetTiposTributos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetTiposTributos * soap_new_set__ns3__FEParamGetTiposTributos(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FEParamGetTiposTributos *_p = afip::soap_new__ns3__FEParamGetTiposTributos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetTiposTributos::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetTiposTributos(struct soap *soap, _ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetTiposTributos * SOAP_FMAC4 soap_get__ns3__FEParamGetTiposTributos(struct soap*, _ns3__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_read__ns3__FEParamGetTiposTributos(struct soap *soap, _ns3__FEParamGetTiposTributos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetTiposTributos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _ns3__FEParamGetTiposTributos *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetTiposTributos(struct soap *soap, _ns3__FEParamGetTiposTributos *p)
{
	if (afip::soap_read__ns3__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetCotizacionResponse(struct soap*, const char*, int, const _ns3__FEParamGetCotizacionResponse *, const char*);
SOAP_FMAC3 _ns3__FEParamGetCotizacionResponse * SOAP_FMAC4 soap_in__ns3__FEParamGetCotizacionResponse(struct soap*, const char*, _ns3__FEParamGetCotizacionResponse *, const char*);
SOAP_FMAC1 _ns3__FEParamGetCotizacionResponse * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetCotizacionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetCotizacionResponse * soap_new__ns3__FEParamGetCotizacionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetCotizacionResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetCotizacionResponse * soap_new_req__ns3__FEParamGetCotizacionResponse(
	struct soap *soap)
{
	_ns3__FEParamGetCotizacionResponse *_p = afip::soap_new__ns3__FEParamGetCotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetCotizacionResponse * soap_new_set__ns3__FEParamGetCotizacionResponse(
	struct soap *soap,
	ns3__FECotizacionResponse *FEParamGetCotizacionResult)
{
	_ns3__FEParamGetCotizacionResponse *_p = afip::soap_new__ns3__FEParamGetCotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetCotizacionResponse::FEParamGetCotizacionResult = FEParamGetCotizacionResult;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetCotizacionResponse(struct soap *soap, _ns3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetCotizacionResponse * SOAP_FMAC4 soap_get__ns3__FEParamGetCotizacionResponse(struct soap*, _ns3__FEParamGetCotizacionResponse *, const char*, const char*);

inline int soap_read__ns3__FEParamGetCotizacionResponse(struct soap *soap, _ns3__FEParamGetCotizacionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetCotizacionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetCotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetCotizacionResponse(struct soap *soap, _ns3__FEParamGetCotizacionResponse *p)
{
	if (afip::soap_read__ns3__FEParamGetCotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEParamGetCotizacion_DEFINED
#define SOAP_TYPE_afip__ns3__FEParamGetCotizacion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEParamGetCotizacion(struct soap*, const char*, int, const _ns3__FEParamGetCotizacion *, const char*);
SOAP_FMAC3 _ns3__FEParamGetCotizacion * SOAP_FMAC4 soap_in__ns3__FEParamGetCotizacion(struct soap*, const char*, _ns3__FEParamGetCotizacion *, const char*);
SOAP_FMAC1 _ns3__FEParamGetCotizacion * SOAP_FMAC2 soap_instantiate__ns3__FEParamGetCotizacion(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEParamGetCotizacion * soap_new__ns3__FEParamGetCotizacion(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEParamGetCotizacion(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEParamGetCotizacion * soap_new_req__ns3__FEParamGetCotizacion(
	struct soap *soap)
{
	_ns3__FEParamGetCotizacion *_p = afip::soap_new__ns3__FEParamGetCotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEParamGetCotizacion * soap_new_set__ns3__FEParamGetCotizacion(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	std::string *MonId)
{
	_ns3__FEParamGetCotizacion *_p = afip::soap_new__ns3__FEParamGetCotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEParamGetCotizacion::Auth = Auth;
		_p->_ns3__FEParamGetCotizacion::MonId = MonId;
	}
	return _p;
}

inline int soap_write__ns3__FEParamGetCotizacion(struct soap *soap, _ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE_afip__ns3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEParamGetCotizacion * SOAP_FMAC4 soap_get__ns3__FEParamGetCotizacion(struct soap*, _ns3__FEParamGetCotizacion *, const char*, const char*);

inline int soap_read__ns3__FEParamGetCotizacion(struct soap *soap, _ns3__FEParamGetCotizacion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEParamGetCotizacion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, _ns3__FEParamGetCotizacion *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEParamGetCotizacion(struct soap *soap, _ns3__FEParamGetCotizacion *p)
{
	if (afip::soap_read__ns3__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEAConsultarResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEAConsultarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEAConsultarResponse(struct soap*, const char*, int, const _ns3__FECAEAConsultarResponse *, const char*);
SOAP_FMAC3 _ns3__FECAEAConsultarResponse * SOAP_FMAC4 soap_in__ns3__FECAEAConsultarResponse(struct soap*, const char*, _ns3__FECAEAConsultarResponse *, const char*);
SOAP_FMAC1 _ns3__FECAEAConsultarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEAConsultarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEAConsultarResponse * soap_new__ns3__FECAEAConsultarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEAConsultarResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEAConsultarResponse * soap_new_req__ns3__FECAEAConsultarResponse(
	struct soap *soap)
{
	_ns3__FECAEAConsultarResponse *_p = afip::soap_new__ns3__FECAEAConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAEAConsultarResponse * soap_new_set__ns3__FECAEAConsultarResponse(
	struct soap *soap,
	ns3__FECAEAGetResponse *FECAEAConsultarResult)
{
	_ns3__FECAEAConsultarResponse *_p = afip::soap_new__ns3__FECAEAConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEAConsultarResponse::FECAEAConsultarResult = FECAEAConsultarResult;
	}
	return _p;
}

inline int soap_write__ns3__FECAEAConsultarResponse(struct soap *soap, _ns3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEAConsultarResponse * SOAP_FMAC4 soap_get__ns3__FECAEAConsultarResponse(struct soap*, _ns3__FECAEAConsultarResponse *, const char*, const char*);

inline int soap_read__ns3__FECAEAConsultarResponse(struct soap *soap, _ns3__FECAEAConsultarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEAConsultarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEAConsultarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEAConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEAConsultarResponse(struct soap *soap, _ns3__FECAEAConsultarResponse *p)
{
	if (afip::soap_read__ns3__FECAEAConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEAConsultar_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEAConsultar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEAConsultar(struct soap*, const char*, int, const _ns3__FECAEAConsultar *, const char*);
SOAP_FMAC3 _ns3__FECAEAConsultar * SOAP_FMAC4 soap_in__ns3__FECAEAConsultar(struct soap*, const char*, _ns3__FECAEAConsultar *, const char*);
SOAP_FMAC1 _ns3__FECAEAConsultar * SOAP_FMAC2 soap_instantiate__ns3__FECAEAConsultar(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEAConsultar * soap_new__ns3__FECAEAConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEAConsultar(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEAConsultar * soap_new_req__ns3__FECAEAConsultar(
	struct soap *soap,
	int Periodo,
	short Orden)
{
	_ns3__FECAEAConsultar *_p = afip::soap_new__ns3__FECAEAConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEAConsultar::Periodo = Periodo;
		_p->_ns3__FECAEAConsultar::Orden = Orden;
	}
	return _p;
}

inline _ns3__FECAEAConsultar * soap_new_set__ns3__FECAEAConsultar(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	int Periodo,
	short Orden)
{
	_ns3__FECAEAConsultar *_p = afip::soap_new__ns3__FECAEAConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEAConsultar::Auth = Auth;
		_p->_ns3__FECAEAConsultar::Periodo = Periodo;
		_p->_ns3__FECAEAConsultar::Orden = Orden;
	}
	return _p;
}

inline int soap_write__ns3__FECAEAConsultar(struct soap *soap, _ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEAConsultar(struct soap *soap, const char *URL, _ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEAConsultar(struct soap *soap, const char *URL, _ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEAConsultar(struct soap *soap, const char *URL, _ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEAConsultar * SOAP_FMAC4 soap_get__ns3__FECAEAConsultar(struct soap*, _ns3__FECAEAConsultar *, const char*, const char*);

inline int soap_read__ns3__FECAEAConsultar(struct soap *soap, _ns3__FECAEAConsultar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEAConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEAConsultar(struct soap *soap, const char *URL, _ns3__FECAEAConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEAConsultar(struct soap *soap, _ns3__FECAEAConsultar *p)
{
	if (afip::soap_read__ns3__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEASinMovimientoInformarResponse(struct soap*, const char*, int, const _ns3__FECAEASinMovimientoInformarResponse *, const char*);
SOAP_FMAC3 _ns3__FECAEASinMovimientoInformarResponse * SOAP_FMAC4 soap_in__ns3__FECAEASinMovimientoInformarResponse(struct soap*, const char*, _ns3__FECAEASinMovimientoInformarResponse *, const char*);
SOAP_FMAC1 _ns3__FECAEASinMovimientoInformarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoInformarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEASinMovimientoInformarResponse * soap_new__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEASinMovimientoInformarResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEASinMovimientoInformarResponse * soap_new_req__ns3__FECAEASinMovimientoInformarResponse(
	struct soap *soap)
{
	_ns3__FECAEASinMovimientoInformarResponse *_p = afip::soap_new__ns3__FECAEASinMovimientoInformarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAEASinMovimientoInformarResponse * soap_new_set__ns3__FECAEASinMovimientoInformarResponse(
	struct soap *soap,
	ns3__FECAEASinMovResponse *FECAEASinMovimientoInformarResult)
{
	_ns3__FECAEASinMovimientoInformarResponse *_p = afip::soap_new__ns3__FECAEASinMovimientoInformarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASinMovimientoInformarResponse::FECAEASinMovimientoInformarResult = FECAEASinMovimientoInformarResult;
	}
	return _p;
}

inline int soap_write__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, _ns3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEASinMovimientoInformarResponse * SOAP_FMAC4 soap_get__ns3__FECAEASinMovimientoInformarResponse(struct soap*, _ns3__FECAEASinMovimientoInformarResponse *, const char*, const char*);

inline int soap_read__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, _ns3__FECAEASinMovimientoInformarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEASinMovimientoInformarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEASinMovimientoInformarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEASinMovimientoInformarResponse(struct soap *soap, _ns3__FECAEASinMovimientoInformarResponse *p)
{
	if (afip::soap_read__ns3__FECAEASinMovimientoInformarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEASinMovimientoInformar(struct soap*, const char*, int, const _ns3__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC3 _ns3__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_in__ns3__FECAEASinMovimientoInformar(struct soap*, const char*, _ns3__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC1 _ns3__FECAEASinMovimientoInformar * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoInformar(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEASinMovimientoInformar * soap_new__ns3__FECAEASinMovimientoInformar(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEASinMovimientoInformar(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEASinMovimientoInformar * soap_new_req__ns3__FECAEASinMovimientoInformar(
	struct soap *soap,
	int PtoVta)
{
	_ns3__FECAEASinMovimientoInformar *_p = afip::soap_new__ns3__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASinMovimientoInformar::PtoVta = PtoVta;
	}
	return _p;
}

inline _ns3__FECAEASinMovimientoInformar * soap_new_set__ns3__FECAEASinMovimientoInformar(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	int PtoVta,
	std::string *CAEA)
{
	_ns3__FECAEASinMovimientoInformar *_p = afip::soap_new__ns3__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASinMovimientoInformar::Auth = Auth;
		_p->_ns3__FECAEASinMovimientoInformar::PtoVta = PtoVta;
		_p->_ns3__FECAEASinMovimientoInformar::CAEA = CAEA;
	}
	return _p;
}

inline int soap_write__ns3__FECAEASinMovimientoInformar(struct soap *soap, _ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_get__ns3__FECAEASinMovimientoInformar(struct soap*, _ns3__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_read__ns3__FECAEASinMovimientoInformar(struct soap *soap, _ns3__FECAEASinMovimientoInformar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEASinMovimientoInformar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoInformar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEASinMovimientoInformar(struct soap *soap, _ns3__FECAEASinMovimientoInformar *p)
{
	if (afip::soap_read__ns3__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEASinMovimientoConsultarResponse(struct soap*, const char*, int, const _ns3__FECAEASinMovimientoConsultarResponse *, const char*);
SOAP_FMAC3 _ns3__FECAEASinMovimientoConsultarResponse * SOAP_FMAC4 soap_in__ns3__FECAEASinMovimientoConsultarResponse(struct soap*, const char*, _ns3__FECAEASinMovimientoConsultarResponse *, const char*);
SOAP_FMAC1 _ns3__FECAEASinMovimientoConsultarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoConsultarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEASinMovimientoConsultarResponse * soap_new__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEASinMovimientoConsultarResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEASinMovimientoConsultarResponse * soap_new_req__ns3__FECAEASinMovimientoConsultarResponse(
	struct soap *soap)
{
	_ns3__FECAEASinMovimientoConsultarResponse *_p = afip::soap_new__ns3__FECAEASinMovimientoConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAEASinMovimientoConsultarResponse * soap_new_set__ns3__FECAEASinMovimientoConsultarResponse(
	struct soap *soap,
	ns3__FECAEASinMovConsResponse *FECAEASinMovimientoConsultarResult)
{
	_ns3__FECAEASinMovimientoConsultarResponse *_p = afip::soap_new__ns3__FECAEASinMovimientoConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASinMovimientoConsultarResponse::FECAEASinMovimientoConsultarResult = FECAEASinMovimientoConsultarResult;
	}
	return _p;
}

inline int soap_write__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, _ns3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEASinMovimientoConsultarResponse * SOAP_FMAC4 soap_get__ns3__FECAEASinMovimientoConsultarResponse(struct soap*, _ns3__FECAEASinMovimientoConsultarResponse *, const char*, const char*);

inline int soap_read__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, _ns3__FECAEASinMovimientoConsultarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEASinMovimientoConsultarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEASinMovimientoConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEASinMovimientoConsultarResponse(struct soap *soap, _ns3__FECAEASinMovimientoConsultarResponse *p)
{
	if (afip::soap_read__ns3__FECAEASinMovimientoConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEASinMovimientoConsultar(struct soap*, const char*, int, const _ns3__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC3 _ns3__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_in__ns3__FECAEASinMovimientoConsultar(struct soap*, const char*, _ns3__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC1 _ns3__FECAEASinMovimientoConsultar * SOAP_FMAC2 soap_instantiate__ns3__FECAEASinMovimientoConsultar(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEASinMovimientoConsultar * soap_new__ns3__FECAEASinMovimientoConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEASinMovimientoConsultar(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEASinMovimientoConsultar * soap_new_req__ns3__FECAEASinMovimientoConsultar(
	struct soap *soap,
	int PtoVta)
{
	_ns3__FECAEASinMovimientoConsultar *_p = afip::soap_new__ns3__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASinMovimientoConsultar::PtoVta = PtoVta;
	}
	return _p;
}

inline _ns3__FECAEASinMovimientoConsultar * soap_new_set__ns3__FECAEASinMovimientoConsultar(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	std::string *CAEA,
	int PtoVta)
{
	_ns3__FECAEASinMovimientoConsultar *_p = afip::soap_new__ns3__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASinMovimientoConsultar::Auth = Auth;
		_p->_ns3__FECAEASinMovimientoConsultar::CAEA = CAEA;
		_p->_ns3__FECAEASinMovimientoConsultar::PtoVta = PtoVta;
	}
	return _p;
}

inline int soap_write__ns3__FECAEASinMovimientoConsultar(struct soap *soap, _ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_get__ns3__FECAEASinMovimientoConsultar(struct soap*, _ns3__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_read__ns3__FECAEASinMovimientoConsultar(struct soap *soap, _ns3__FECAEASinMovimientoConsultar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEASinMovimientoConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _ns3__FECAEASinMovimientoConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEASinMovimientoConsultar(struct soap *soap, _ns3__FECAEASinMovimientoConsultar *p)
{
	if (afip::soap_read__ns3__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEASolicitarResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEASolicitarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEASolicitarResponse(struct soap*, const char*, int, const _ns3__FECAEASolicitarResponse *, const char*);
SOAP_FMAC3 _ns3__FECAEASolicitarResponse * SOAP_FMAC4 soap_in__ns3__FECAEASolicitarResponse(struct soap*, const char*, _ns3__FECAEASolicitarResponse *, const char*);
SOAP_FMAC1 _ns3__FECAEASolicitarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEASolicitarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEASolicitarResponse * soap_new__ns3__FECAEASolicitarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEASolicitarResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEASolicitarResponse * soap_new_req__ns3__FECAEASolicitarResponse(
	struct soap *soap)
{
	_ns3__FECAEASolicitarResponse *_p = afip::soap_new__ns3__FECAEASolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAEASolicitarResponse * soap_new_set__ns3__FECAEASolicitarResponse(
	struct soap *soap,
	ns3__FECAEAGetResponse *FECAEASolicitarResult)
{
	_ns3__FECAEASolicitarResponse *_p = afip::soap_new__ns3__FECAEASolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASolicitarResponse::FECAEASolicitarResult = FECAEASolicitarResult;
	}
	return _p;
}

inline int soap_write__ns3__FECAEASolicitarResponse(struct soap *soap, _ns3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEASolicitarResponse * SOAP_FMAC4 soap_get__ns3__FECAEASolicitarResponse(struct soap*, _ns3__FECAEASolicitarResponse *, const char*, const char*);

inline int soap_read__ns3__FECAEASolicitarResponse(struct soap *soap, _ns3__FECAEASolicitarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEASolicitarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAEASolicitarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEASolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEASolicitarResponse(struct soap *soap, _ns3__FECAEASolicitarResponse *p)
{
	if (afip::soap_read__ns3__FECAEASolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEASolicitar_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEASolicitar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEASolicitar(struct soap*, const char*, int, const _ns3__FECAEASolicitar *, const char*);
SOAP_FMAC3 _ns3__FECAEASolicitar * SOAP_FMAC4 soap_in__ns3__FECAEASolicitar(struct soap*, const char*, _ns3__FECAEASolicitar *, const char*);
SOAP_FMAC1 _ns3__FECAEASolicitar * SOAP_FMAC2 soap_instantiate__ns3__FECAEASolicitar(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEASolicitar * soap_new__ns3__FECAEASolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEASolicitar(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEASolicitar * soap_new_req__ns3__FECAEASolicitar(
	struct soap *soap,
	int Periodo,
	short Orden)
{
	_ns3__FECAEASolicitar *_p = afip::soap_new__ns3__FECAEASolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASolicitar::Periodo = Periodo;
		_p->_ns3__FECAEASolicitar::Orden = Orden;
	}
	return _p;
}

inline _ns3__FECAEASolicitar * soap_new_set__ns3__FECAEASolicitar(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	int Periodo,
	short Orden)
{
	_ns3__FECAEASolicitar *_p = afip::soap_new__ns3__FECAEASolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEASolicitar::Auth = Auth;
		_p->_ns3__FECAEASolicitar::Periodo = Periodo;
		_p->_ns3__FECAEASolicitar::Orden = Orden;
	}
	return _p;
}

inline int soap_write__ns3__FECAEASolicitar(struct soap *soap, _ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEASolicitar(struct soap *soap, const char *URL, _ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEASolicitar(struct soap *soap, const char *URL, _ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEASolicitar(struct soap *soap, const char *URL, _ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEASolicitar * SOAP_FMAC4 soap_get__ns3__FECAEASolicitar(struct soap*, _ns3__FECAEASolicitar *, const char*, const char*);

inline int soap_read__ns3__FECAEASolicitar(struct soap *soap, _ns3__FECAEASolicitar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEASolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEASolicitar(struct soap *soap, const char *URL, _ns3__FECAEASolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEASolicitar(struct soap *soap, _ns3__FECAEASolicitar *p)
{
	if (afip::soap_read__ns3__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEARegInformativoResponse(struct soap*, const char*, int, const _ns3__FECAEARegInformativoResponse *, const char*);
SOAP_FMAC3 _ns3__FECAEARegInformativoResponse * SOAP_FMAC4 soap_in__ns3__FECAEARegInformativoResponse(struct soap*, const char*, _ns3__FECAEARegInformativoResponse *, const char*);
SOAP_FMAC1 _ns3__FECAEARegInformativoResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAEARegInformativoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEARegInformativoResponse * soap_new__ns3__FECAEARegInformativoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEARegInformativoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEARegInformativoResponse * soap_new_req__ns3__FECAEARegInformativoResponse(
	struct soap *soap)
{
	_ns3__FECAEARegInformativoResponse *_p = afip::soap_new__ns3__FECAEARegInformativoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAEARegInformativoResponse * soap_new_set__ns3__FECAEARegInformativoResponse(
	struct soap *soap,
	ns3__FECAEAResponse *FECAEARegInformativoResult)
{
	_ns3__FECAEARegInformativoResponse *_p = afip::soap_new__ns3__FECAEARegInformativoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEARegInformativoResponse::FECAEARegInformativoResult = FECAEARegInformativoResult;
	}
	return _p;
}

inline int soap_write__ns3__FECAEARegInformativoResponse(struct soap *soap, _ns3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _ns3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _ns3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _ns3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEARegInformativoResponse * SOAP_FMAC4 soap_get__ns3__FECAEARegInformativoResponse(struct soap*, _ns3__FECAEARegInformativoResponse *, const char*, const char*);

inline int soap_read__ns3__FECAEARegInformativoResponse(struct soap *soap, _ns3__FECAEARegInformativoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEARegInformativoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _ns3__FECAEARegInformativoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEARegInformativoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEARegInformativoResponse(struct soap *soap, _ns3__FECAEARegInformativoResponse *p)
{
	if (afip::soap_read__ns3__FECAEARegInformativoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAEARegInformativo_DEFINED
#define SOAP_TYPE_afip__ns3__FECAEARegInformativo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAEARegInformativo(struct soap*, const char*, int, const _ns3__FECAEARegInformativo *, const char*);
SOAP_FMAC3 _ns3__FECAEARegInformativo * SOAP_FMAC4 soap_in__ns3__FECAEARegInformativo(struct soap*, const char*, _ns3__FECAEARegInformativo *, const char*);
SOAP_FMAC1 _ns3__FECAEARegInformativo * SOAP_FMAC2 soap_instantiate__ns3__FECAEARegInformativo(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAEARegInformativo * soap_new__ns3__FECAEARegInformativo(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAEARegInformativo(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAEARegInformativo * soap_new_req__ns3__FECAEARegInformativo(
	struct soap *soap)
{
	_ns3__FECAEARegInformativo *_p = afip::soap_new__ns3__FECAEARegInformativo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAEARegInformativo * soap_new_set__ns3__FECAEARegInformativo(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	ns3__FECAEARequest *FeCAEARegInfReq)
{
	_ns3__FECAEARegInformativo *_p = afip::soap_new__ns3__FECAEARegInformativo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAEARegInformativo::Auth = Auth;
		_p->_ns3__FECAEARegInformativo::FeCAEARegInfReq = FeCAEARegInfReq;
	}
	return _p;
}

inline int soap_write__ns3__FECAEARegInformativo(struct soap *soap, _ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAEARegInformativo(struct soap *soap, const char *URL, _ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAEARegInformativo(struct soap *soap, const char *URL, _ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAEARegInformativo(struct soap *soap, const char *URL, _ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE_afip__ns3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAEARegInformativo * SOAP_FMAC4 soap_get__ns3__FECAEARegInformativo(struct soap*, _ns3__FECAEARegInformativo *, const char*, const char*);

inline int soap_read__ns3__FECAEARegInformativo(struct soap *soap, _ns3__FECAEARegInformativo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAEARegInformativo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAEARegInformativo(struct soap *soap, const char *URL, _ns3__FECAEARegInformativo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAEARegInformativo(struct soap *soap, _ns3__FECAEARegInformativo *p)
{
	if (afip::soap_read__ns3__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECompConsultarResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECompConsultarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECompConsultarResponse(struct soap*, const char*, int, const _ns3__FECompConsultarResponse *, const char*);
SOAP_FMAC3 _ns3__FECompConsultarResponse * SOAP_FMAC4 soap_in__ns3__FECompConsultarResponse(struct soap*, const char*, _ns3__FECompConsultarResponse *, const char*);
SOAP_FMAC1 _ns3__FECompConsultarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECompConsultarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECompConsultarResponse * soap_new__ns3__FECompConsultarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECompConsultarResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECompConsultarResponse * soap_new_req__ns3__FECompConsultarResponse(
	struct soap *soap)
{
	_ns3__FECompConsultarResponse *_p = afip::soap_new__ns3__FECompConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECompConsultarResponse * soap_new_set__ns3__FECompConsultarResponse(
	struct soap *soap,
	ns3__FECompConsultaResponse *FECompConsultarResult)
{
	_ns3__FECompConsultarResponse *_p = afip::soap_new__ns3__FECompConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECompConsultarResponse::FECompConsultarResult = FECompConsultarResult;
	}
	return _p;
}

inline int soap_write__ns3__FECompConsultarResponse(struct soap *soap, _ns3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECompConsultarResponse(struct soap *soap, const char *URL, _ns3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECompConsultarResponse(struct soap *soap, const char *URL, _ns3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECompConsultarResponse(struct soap *soap, const char *URL, _ns3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECompConsultarResponse * SOAP_FMAC4 soap_get__ns3__FECompConsultarResponse(struct soap*, _ns3__FECompConsultarResponse *, const char*, const char*);

inline int soap_read__ns3__FECompConsultarResponse(struct soap *soap, _ns3__FECompConsultarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECompConsultarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECompConsultarResponse(struct soap *soap, const char *URL, _ns3__FECompConsultarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECompConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECompConsultarResponse(struct soap *soap, _ns3__FECompConsultarResponse *p)
{
	if (afip::soap_read__ns3__FECompConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECompConsultar_DEFINED
#define SOAP_TYPE_afip__ns3__FECompConsultar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECompConsultar(struct soap*, const char*, int, const _ns3__FECompConsultar *, const char*);
SOAP_FMAC3 _ns3__FECompConsultar * SOAP_FMAC4 soap_in__ns3__FECompConsultar(struct soap*, const char*, _ns3__FECompConsultar *, const char*);
SOAP_FMAC1 _ns3__FECompConsultar * SOAP_FMAC2 soap_instantiate__ns3__FECompConsultar(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECompConsultar * soap_new__ns3__FECompConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECompConsultar(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECompConsultar * soap_new_req__ns3__FECompConsultar(
	struct soap *soap)
{
	_ns3__FECompConsultar *_p = afip::soap_new__ns3__FECompConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECompConsultar * soap_new_set__ns3__FECompConsultar(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	ns3__FECompConsultaReq *FeCompConsReq)
{
	_ns3__FECompConsultar *_p = afip::soap_new__ns3__FECompConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECompConsultar::Auth = Auth;
		_p->_ns3__FECompConsultar::FeCompConsReq = FeCompConsReq;
	}
	return _p;
}

inline int soap_write__ns3__FECompConsultar(struct soap *soap, _ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECompConsultar(struct soap *soap, const char *URL, _ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECompConsultar(struct soap *soap, const char *URL, _ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECompConsultar(struct soap *soap, const char *URL, _ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultar", p->soap_type() == SOAP_TYPE_afip__ns3__FECompConsultar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECompConsultar * SOAP_FMAC4 soap_get__ns3__FECompConsultar(struct soap*, _ns3__FECompConsultar *, const char*, const char*);

inline int soap_read__ns3__FECompConsultar(struct soap *soap, _ns3__FECompConsultar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECompConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECompConsultar(struct soap *soap, const char *URL, _ns3__FECompConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECompConsultar(struct soap *soap, _ns3__FECompConsultar *p)
{
	if (afip::soap_read__ns3__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECompUltimoAutorizadoResponse(struct soap*, const char*, int, const _ns3__FECompUltimoAutorizadoResponse *, const char*);
SOAP_FMAC3 _ns3__FECompUltimoAutorizadoResponse * SOAP_FMAC4 soap_in__ns3__FECompUltimoAutorizadoResponse(struct soap*, const char*, _ns3__FECompUltimoAutorizadoResponse *, const char*);
SOAP_FMAC1 _ns3__FECompUltimoAutorizadoResponse * SOAP_FMAC2 soap_instantiate__ns3__FECompUltimoAutorizadoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECompUltimoAutorizadoResponse * soap_new__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECompUltimoAutorizadoResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECompUltimoAutorizadoResponse * soap_new_req__ns3__FECompUltimoAutorizadoResponse(
	struct soap *soap)
{
	_ns3__FECompUltimoAutorizadoResponse *_p = afip::soap_new__ns3__FECompUltimoAutorizadoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECompUltimoAutorizadoResponse * soap_new_set__ns3__FECompUltimoAutorizadoResponse(
	struct soap *soap,
	ns3__FERecuperaLastCbteResponse *FECompUltimoAutorizadoResult)
{
	_ns3__FECompUltimoAutorizadoResponse *_p = afip::soap_new__ns3__FECompUltimoAutorizadoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECompUltimoAutorizadoResponse::FECompUltimoAutorizadoResult = FECompUltimoAutorizadoResult;
	}
	return _p;
}

inline int soap_write__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, _ns3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECompUltimoAutorizadoResponse * SOAP_FMAC4 soap_get__ns3__FECompUltimoAutorizadoResponse(struct soap*, _ns3__FECompUltimoAutorizadoResponse *, const char*, const char*);

inline int soap_read__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, _ns3__FECompUltimoAutorizadoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECompUltimoAutorizadoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizadoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECompUltimoAutorizadoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECompUltimoAutorizadoResponse(struct soap *soap, _ns3__FECompUltimoAutorizadoResponse *p)
{
	if (afip::soap_read__ns3__FECompUltimoAutorizadoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECompUltimoAutorizado_DEFINED
#define SOAP_TYPE_afip__ns3__FECompUltimoAutorizado_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECompUltimoAutorizado(struct soap*, const char*, int, const _ns3__FECompUltimoAutorizado *, const char*);
SOAP_FMAC3 _ns3__FECompUltimoAutorizado * SOAP_FMAC4 soap_in__ns3__FECompUltimoAutorizado(struct soap*, const char*, _ns3__FECompUltimoAutorizado *, const char*);
SOAP_FMAC1 _ns3__FECompUltimoAutorizado * SOAP_FMAC2 soap_instantiate__ns3__FECompUltimoAutorizado(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECompUltimoAutorizado * soap_new__ns3__FECompUltimoAutorizado(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECompUltimoAutorizado(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECompUltimoAutorizado * soap_new_req__ns3__FECompUltimoAutorizado(
	struct soap *soap,
	int PtoVta,
	int CbteTipo)
{
	_ns3__FECompUltimoAutorizado *_p = afip::soap_new__ns3__FECompUltimoAutorizado(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECompUltimoAutorizado::PtoVta = PtoVta;
		_p->_ns3__FECompUltimoAutorizado::CbteTipo = CbteTipo;
	}
	return _p;
}

inline _ns3__FECompUltimoAutorizado * soap_new_set__ns3__FECompUltimoAutorizado(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	int PtoVta,
	int CbteTipo)
{
	_ns3__FECompUltimoAutorizado *_p = afip::soap_new__ns3__FECompUltimoAutorizado(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECompUltimoAutorizado::Auth = Auth;
		_p->_ns3__FECompUltimoAutorizado::PtoVta = PtoVta;
		_p->_ns3__FECompUltimoAutorizado::CbteTipo = CbteTipo;
	}
	return _p;
}

inline int soap_write__ns3__FECompUltimoAutorizado(struct soap *soap, _ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE_afip__ns3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECompUltimoAutorizado * SOAP_FMAC4 soap_get__ns3__FECompUltimoAutorizado(struct soap*, _ns3__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_read__ns3__FECompUltimoAutorizado(struct soap *soap, _ns3__FECompUltimoAutorizado *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECompUltimoAutorizado(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _ns3__FECompUltimoAutorizado *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECompUltimoAutorizado(struct soap *soap, _ns3__FECompUltimoAutorizado *p)
{
	if (afip::soap_read__ns3__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEDummyResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FEDummyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEDummyResponse(struct soap*, const char*, int, const _ns3__FEDummyResponse *, const char*);
SOAP_FMAC3 _ns3__FEDummyResponse * SOAP_FMAC4 soap_in__ns3__FEDummyResponse(struct soap*, const char*, _ns3__FEDummyResponse *, const char*);
SOAP_FMAC1 _ns3__FEDummyResponse * SOAP_FMAC2 soap_instantiate__ns3__FEDummyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEDummyResponse * soap_new__ns3__FEDummyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEDummyResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEDummyResponse * soap_new_req__ns3__FEDummyResponse(
	struct soap *soap)
{
	_ns3__FEDummyResponse *_p = afip::soap_new__ns3__FEDummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEDummyResponse * soap_new_set__ns3__FEDummyResponse(
	struct soap *soap,
	ns3__DummyResponse *FEDummyResult)
{
	_ns3__FEDummyResponse *_p = afip::soap_new__ns3__FEDummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FEDummyResponse::FEDummyResult = FEDummyResult;
	}
	return _p;
}

inline int soap_write__ns3__FEDummyResponse(struct soap *soap, _ns3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummyResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEDummyResponse(struct soap *soap, const char *URL, _ns3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummyResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEDummyResponse(struct soap *soap, const char *URL, _ns3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummyResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEDummyResponse(struct soap *soap, const char *URL, _ns3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummyResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEDummyResponse * SOAP_FMAC4 soap_get__ns3__FEDummyResponse(struct soap*, _ns3__FEDummyResponse *, const char*, const char*);

inline int soap_read__ns3__FEDummyResponse(struct soap *soap, _ns3__FEDummyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEDummyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEDummyResponse(struct soap *soap, const char *URL, _ns3__FEDummyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEDummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEDummyResponse(struct soap *soap, _ns3__FEDummyResponse *p)
{
	if (afip::soap_read__ns3__FEDummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FEDummy_DEFINED
#define SOAP_TYPE_afip__ns3__FEDummy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FEDummy(struct soap*, const char*, int, const _ns3__FEDummy *, const char*);
SOAP_FMAC3 _ns3__FEDummy * SOAP_FMAC4 soap_in__ns3__FEDummy(struct soap*, const char*, _ns3__FEDummy *, const char*);
SOAP_FMAC1 _ns3__FEDummy * SOAP_FMAC2 soap_instantiate__ns3__FEDummy(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FEDummy * soap_new__ns3__FEDummy(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FEDummy(soap, n, NULL, NULL, NULL);
}

inline _ns3__FEDummy * soap_new_req__ns3__FEDummy(
	struct soap *soap)
{
	_ns3__FEDummy *_p = afip::soap_new__ns3__FEDummy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FEDummy * soap_new_set__ns3__FEDummy(
	struct soap *soap)
{
	_ns3__FEDummy *_p = afip::soap_new__ns3__FEDummy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__ns3__FEDummy(struct soap *soap, _ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummy", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FEDummy(struct soap *soap, const char *URL, _ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummy", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FEDummy(struct soap *soap, const char *URL, _ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummy", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FEDummy(struct soap *soap, const char *URL, _ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDummy", p->soap_type() == SOAP_TYPE_afip__ns3__FEDummy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FEDummy * SOAP_FMAC4 soap_get__ns3__FEDummy(struct soap*, _ns3__FEDummy *, const char*, const char*);

inline int soap_read__ns3__FEDummy(struct soap *soap, _ns3__FEDummy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FEDummy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FEDummy(struct soap *soap, const char *URL, _ns3__FEDummy *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FEDummy(struct soap *soap, _ns3__FEDummy *p)
{
	if (afip::soap_read__ns3__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECompTotXRequestResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECompTotXRequestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECompTotXRequestResponse(struct soap*, const char*, int, const _ns3__FECompTotXRequestResponse *, const char*);
SOAP_FMAC3 _ns3__FECompTotXRequestResponse * SOAP_FMAC4 soap_in__ns3__FECompTotXRequestResponse(struct soap*, const char*, _ns3__FECompTotXRequestResponse *, const char*);
SOAP_FMAC1 _ns3__FECompTotXRequestResponse * SOAP_FMAC2 soap_instantiate__ns3__FECompTotXRequestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECompTotXRequestResponse * soap_new__ns3__FECompTotXRequestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECompTotXRequestResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECompTotXRequestResponse * soap_new_req__ns3__FECompTotXRequestResponse(
	struct soap *soap)
{
	_ns3__FECompTotXRequestResponse *_p = afip::soap_new__ns3__FECompTotXRequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECompTotXRequestResponse * soap_new_set__ns3__FECompTotXRequestResponse(
	struct soap *soap,
	ns3__FERegXReqResponse *FECompTotXRequestResult)
{
	_ns3__FECompTotXRequestResponse *_p = afip::soap_new__ns3__FECompTotXRequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECompTotXRequestResponse::FECompTotXRequestResult = FECompTotXRequestResult;
	}
	return _p;
}

inline int soap_write__ns3__FECompTotXRequestResponse(struct soap *soap, _ns3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _ns3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _ns3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _ns3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECompTotXRequestResponse * SOAP_FMAC4 soap_get__ns3__FECompTotXRequestResponse(struct soap*, _ns3__FECompTotXRequestResponse *, const char*, const char*);

inline int soap_read__ns3__FECompTotXRequestResponse(struct soap *soap, _ns3__FECompTotXRequestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECompTotXRequestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _ns3__FECompTotXRequestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECompTotXRequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECompTotXRequestResponse(struct soap *soap, _ns3__FECompTotXRequestResponse *p)
{
	if (afip::soap_read__ns3__FECompTotXRequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECompTotXRequest_DEFINED
#define SOAP_TYPE_afip__ns3__FECompTotXRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECompTotXRequest(struct soap*, const char*, int, const _ns3__FECompTotXRequest *, const char*);
SOAP_FMAC3 _ns3__FECompTotXRequest * SOAP_FMAC4 soap_in__ns3__FECompTotXRequest(struct soap*, const char*, _ns3__FECompTotXRequest *, const char*);
SOAP_FMAC1 _ns3__FECompTotXRequest * SOAP_FMAC2 soap_instantiate__ns3__FECompTotXRequest(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECompTotXRequest * soap_new__ns3__FECompTotXRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECompTotXRequest(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECompTotXRequest * soap_new_req__ns3__FECompTotXRequest(
	struct soap *soap)
{
	_ns3__FECompTotXRequest *_p = afip::soap_new__ns3__FECompTotXRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECompTotXRequest * soap_new_set__ns3__FECompTotXRequest(
	struct soap *soap,
	ns3__FEAuthRequest *Auth)
{
	_ns3__FECompTotXRequest *_p = afip::soap_new__ns3__FECompTotXRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECompTotXRequest::Auth = Auth;
	}
	return _p;
}

inline int soap_write__ns3__FECompTotXRequest(struct soap *soap, _ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequest", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECompTotXRequest(struct soap *soap, const char *URL, _ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequest", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECompTotXRequest(struct soap *soap, const char *URL, _ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequest", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECompTotXRequest(struct soap *soap, const char *URL, _ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompTotXRequest", p->soap_type() == SOAP_TYPE_afip__ns3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECompTotXRequest * SOAP_FMAC4 soap_get__ns3__FECompTotXRequest(struct soap*, _ns3__FECompTotXRequest *, const char*, const char*);

inline int soap_read__ns3__FECompTotXRequest(struct soap *soap, _ns3__FECompTotXRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECompTotXRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECompTotXRequest(struct soap *soap, const char *URL, _ns3__FECompTotXRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECompTotXRequest(struct soap *soap, _ns3__FECompTotXRequest *p)
{
	if (afip::soap_read__ns3__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAESolicitarResponse_DEFINED
#define SOAP_TYPE_afip__ns3__FECAESolicitarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAESolicitarResponse(struct soap*, const char*, int, const _ns3__FECAESolicitarResponse *, const char*);
SOAP_FMAC3 _ns3__FECAESolicitarResponse * SOAP_FMAC4 soap_in__ns3__FECAESolicitarResponse(struct soap*, const char*, _ns3__FECAESolicitarResponse *, const char*);
SOAP_FMAC1 _ns3__FECAESolicitarResponse * SOAP_FMAC2 soap_instantiate__ns3__FECAESolicitarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAESolicitarResponse * soap_new__ns3__FECAESolicitarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAESolicitarResponse(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAESolicitarResponse * soap_new_req__ns3__FECAESolicitarResponse(
	struct soap *soap)
{
	_ns3__FECAESolicitarResponse *_p = afip::soap_new__ns3__FECAESolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAESolicitarResponse * soap_new_set__ns3__FECAESolicitarResponse(
	struct soap *soap,
	ns3__FECAEResponse *FECAESolicitarResult)
{
	_ns3__FECAESolicitarResponse *_p = afip::soap_new__ns3__FECAESolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAESolicitarResponse::FECAESolicitarResult = FECAESolicitarResult;
	}
	return _p;
}

inline int soap_write__ns3__FECAESolicitarResponse(struct soap *soap, _ns3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAESolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAESolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAESolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAESolicitarResponse * SOAP_FMAC4 soap_get__ns3__FECAESolicitarResponse(struct soap*, _ns3__FECAESolicitarResponse *, const char*, const char*);

inline int soap_read__ns3__FECAESolicitarResponse(struct soap *soap, _ns3__FECAESolicitarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAESolicitarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAESolicitarResponse(struct soap *soap, const char *URL, _ns3__FECAESolicitarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAESolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAESolicitarResponse(struct soap *soap, _ns3__FECAESolicitarResponse *p)
{
	if (afip::soap_read__ns3__FECAESolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns3__FECAESolicitar_DEFINED
#define SOAP_TYPE_afip__ns3__FECAESolicitar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__FECAESolicitar(struct soap*, const char*, int, const _ns3__FECAESolicitar *, const char*);
SOAP_FMAC3 _ns3__FECAESolicitar * SOAP_FMAC4 soap_in__ns3__FECAESolicitar(struct soap*, const char*, _ns3__FECAESolicitar *, const char*);
SOAP_FMAC1 _ns3__FECAESolicitar * SOAP_FMAC2 soap_instantiate__ns3__FECAESolicitar(struct soap*, int, const char*, const char*, size_t*);

inline _ns3__FECAESolicitar * soap_new__ns3__FECAESolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns3__FECAESolicitar(soap, n, NULL, NULL, NULL);
}

inline _ns3__FECAESolicitar * soap_new_req__ns3__FECAESolicitar(
	struct soap *soap)
{
	_ns3__FECAESolicitar *_p = afip::soap_new__ns3__FECAESolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns3__FECAESolicitar * soap_new_set__ns3__FECAESolicitar(
	struct soap *soap,
	ns3__FEAuthRequest *Auth,
	ns3__FECAERequest *FeCAEReq)
{
	_ns3__FECAESolicitar *_p = afip::soap_new__ns3__FECAESolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns3__FECAESolicitar::Auth = Auth;
		_p->_ns3__FECAESolicitar::FeCAEReq = FeCAEReq;
	}
	return _p;
}

inline int soap_write__ns3__FECAESolicitar(struct soap *soap, _ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns3__FECAESolicitar(struct soap *soap, const char *URL, _ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns3__FECAESolicitar(struct soap *soap, const char *URL, _ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns3__FECAESolicitar(struct soap *soap, const char *URL, _ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAESolicitar", p->soap_type() == SOAP_TYPE_afip__ns3__FECAESolicitar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns3__FECAESolicitar * SOAP_FMAC4 soap_get__ns3__FECAESolicitar(struct soap*, _ns3__FECAESolicitar *, const char*, const char*);

inline int soap_read__ns3__FECAESolicitar(struct soap *soap, _ns3__FECAESolicitar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns3__FECAESolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns3__FECAESolicitar(struct soap *soap, const char *URL, _ns3__FECAESolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns3__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns3__FECAESolicitar(struct soap *soap, _ns3__FECAESolicitar *p)
{
	if (afip::soap_read__ns3__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__PaisTipo_DEFINED
#define SOAP_TYPE_afip_ns3__PaisTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PaisTipo(struct soap*, const char*, int, const ns3__PaisTipo *, const char*);
SOAP_FMAC3 ns3__PaisTipo * SOAP_FMAC4 soap_in_ns3__PaisTipo(struct soap*, const char*, ns3__PaisTipo *, const char*);
SOAP_FMAC1 ns3__PaisTipo * SOAP_FMAC2 soap_instantiate_ns3__PaisTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PaisTipo * soap_new_ns3__PaisTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PaisTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__PaisTipo * soap_new_req_ns3__PaisTipo(
	struct soap *soap,
	short Id)
{
	ns3__PaisTipo *_p = afip::soap_new_ns3__PaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaisTipo::Id = Id;
	}
	return _p;
}

inline ns3__PaisTipo * soap_new_set_ns3__PaisTipo(
	struct soap *soap,
	short Id,
	std::string *Desc)
{
	ns3__PaisTipo *_p = afip::soap_new_ns3__PaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PaisTipo::Id = Id;
		_p->ns3__PaisTipo::Desc = Desc;
	}
	return _p;
}

inline int soap_write_ns3__PaisTipo(struct soap *soap, ns3__PaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__PaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PaisTipo(struct soap *soap, const char *URL, ns3__PaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__PaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__PaisTipo(struct soap *soap, const char *URL, ns3__PaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__PaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PaisTipo(struct soap *soap, const char *URL, ns3__PaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__PaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PaisTipo * SOAP_FMAC4 soap_get_ns3__PaisTipo(struct soap*, ns3__PaisTipo *, const char*, const char*);

inline int soap_read_ns3__PaisTipo(struct soap *soap, ns3__PaisTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__PaisTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PaisTipo(struct soap *soap, const char *URL, ns3__PaisTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__PaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__PaisTipo(struct soap *soap, ns3__PaisTipo *p)
{
	if (afip::soap_read_ns3__PaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfPaisTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfPaisTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfPaisTipo(struct soap*, const char*, int, const ns3__ArrayOfPaisTipo *, const char*);
SOAP_FMAC3 ns3__ArrayOfPaisTipo * SOAP_FMAC4 soap_in_ns3__ArrayOfPaisTipo(struct soap*, const char*, ns3__ArrayOfPaisTipo *, const char*);
SOAP_FMAC1 ns3__ArrayOfPaisTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfPaisTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfPaisTipo * soap_new_ns3__ArrayOfPaisTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfPaisTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfPaisTipo * soap_new_req_ns3__ArrayOfPaisTipo(
	struct soap *soap)
{
	ns3__ArrayOfPaisTipo *_p = afip::soap_new_ns3__ArrayOfPaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfPaisTipo * soap_new_set_ns3__ArrayOfPaisTipo(
	struct soap *soap,
	const std::vector<ns3__PaisTipo *> & PaisTipo)
{
	ns3__ArrayOfPaisTipo *_p = afip::soap_new_ns3__ArrayOfPaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfPaisTipo::PaisTipo = PaisTipo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfPaisTipo(struct soap *soap, ns3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfPaisTipo(struct soap *soap, const char *URL, ns3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfPaisTipo(struct soap *soap, const char *URL, ns3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfPaisTipo(struct soap *soap, const char *URL, ns3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfPaisTipo * SOAP_FMAC4 soap_get_ns3__ArrayOfPaisTipo(struct soap*, ns3__ArrayOfPaisTipo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfPaisTipo(struct soap *soap, ns3__ArrayOfPaisTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfPaisTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfPaisTipo(struct soap *soap, const char *URL, ns3__ArrayOfPaisTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfPaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfPaisTipo(struct soap *soap, ns3__ArrayOfPaisTipo *p)
{
	if (afip::soap_read_ns3__ArrayOfPaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FEPaisResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FEPaisResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FEPaisResponse(struct soap*, const char*, int, const ns3__FEPaisResponse *, const char*);
SOAP_FMAC3 ns3__FEPaisResponse * SOAP_FMAC4 soap_in_ns3__FEPaisResponse(struct soap*, const char*, ns3__FEPaisResponse *, const char*);
SOAP_FMAC1 ns3__FEPaisResponse * SOAP_FMAC2 soap_instantiate_ns3__FEPaisResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FEPaisResponse * soap_new_ns3__FEPaisResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FEPaisResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FEPaisResponse * soap_new_req_ns3__FEPaisResponse(
	struct soap *soap)
{
	ns3__FEPaisResponse *_p = afip::soap_new_ns3__FEPaisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FEPaisResponse * soap_new_set_ns3__FEPaisResponse(
	struct soap *soap,
	ns3__ArrayOfPaisTipo *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FEPaisResponse *_p = afip::soap_new_ns3__FEPaisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEPaisResponse::ResultGet = ResultGet;
		_p->ns3__FEPaisResponse::Errors = Errors;
		_p->ns3__FEPaisResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FEPaisResponse(struct soap *soap, ns3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPaisResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FEPaisResponse(struct soap *soap, const char *URL, ns3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPaisResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FEPaisResponse(struct soap *soap, const char *URL, ns3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPaisResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FEPaisResponse(struct soap *soap, const char *URL, ns3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPaisResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FEPaisResponse * SOAP_FMAC4 soap_get_ns3__FEPaisResponse(struct soap*, ns3__FEPaisResponse *, const char*, const char*);

inline int soap_read_ns3__FEPaisResponse(struct soap *soap, ns3__FEPaisResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FEPaisResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FEPaisResponse(struct soap *soap, const char *URL, ns3__FEPaisResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FEPaisResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FEPaisResponse(struct soap *soap, ns3__FEPaisResponse *p)
{
	if (afip::soap_read_ns3__FEPaisResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__DocTipo_DEFINED
#define SOAP_TYPE_afip_ns3__DocTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DocTipo(struct soap*, const char*, int, const ns3__DocTipo *, const char*);
SOAP_FMAC3 ns3__DocTipo * SOAP_FMAC4 soap_in_ns3__DocTipo(struct soap*, const char*, ns3__DocTipo *, const char*);
SOAP_FMAC1 ns3__DocTipo * SOAP_FMAC2 soap_instantiate_ns3__DocTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DocTipo * soap_new_ns3__DocTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DocTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__DocTipo * soap_new_req_ns3__DocTipo(
	struct soap *soap,
	int Id)
{
	ns3__DocTipo *_p = afip::soap_new_ns3__DocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DocTipo::Id = Id;
	}
	return _p;
}

inline ns3__DocTipo * soap_new_set_ns3__DocTipo(
	struct soap *soap,
	int Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	ns3__DocTipo *_p = afip::soap_new_ns3__DocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DocTipo::Id = Id;
		_p->ns3__DocTipo::Desc = Desc;
		_p->ns3__DocTipo::FchDesde = FchDesde;
		_p->ns3__DocTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_ns3__DocTipo(struct soap *soap, ns3__DocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DocTipo(struct soap *soap, const char *URL, ns3__DocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__DocTipo(struct soap *soap, const char *URL, ns3__DocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DocTipo(struct soap *soap, const char *URL, ns3__DocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DocTipo * SOAP_FMAC4 soap_get_ns3__DocTipo(struct soap*, ns3__DocTipo *, const char*, const char*);

inline int soap_read_ns3__DocTipo(struct soap *soap, ns3__DocTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__DocTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DocTipo(struct soap *soap, const char *URL, ns3__DocTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__DocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__DocTipo(struct soap *soap, ns3__DocTipo *p)
{
	if (afip::soap_read_ns3__DocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfDocTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfDocTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfDocTipo(struct soap*, const char*, int, const ns3__ArrayOfDocTipo *, const char*);
SOAP_FMAC3 ns3__ArrayOfDocTipo * SOAP_FMAC4 soap_in_ns3__ArrayOfDocTipo(struct soap*, const char*, ns3__ArrayOfDocTipo *, const char*);
SOAP_FMAC1 ns3__ArrayOfDocTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfDocTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfDocTipo * soap_new_ns3__ArrayOfDocTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfDocTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfDocTipo * soap_new_req_ns3__ArrayOfDocTipo(
	struct soap *soap)
{
	ns3__ArrayOfDocTipo *_p = afip::soap_new_ns3__ArrayOfDocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfDocTipo * soap_new_set_ns3__ArrayOfDocTipo(
	struct soap *soap,
	const std::vector<ns3__DocTipo *> & DocTipo)
{
	ns3__ArrayOfDocTipo *_p = afip::soap_new_ns3__ArrayOfDocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfDocTipo::DocTipo = DocTipo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfDocTipo(struct soap *soap, ns3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfDocTipo(struct soap *soap, const char *URL, ns3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfDocTipo(struct soap *soap, const char *URL, ns3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfDocTipo(struct soap *soap, const char *URL, ns3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfDocTipo * SOAP_FMAC4 soap_get_ns3__ArrayOfDocTipo(struct soap*, ns3__ArrayOfDocTipo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfDocTipo(struct soap *soap, ns3__ArrayOfDocTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfDocTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfDocTipo(struct soap *soap, const char *URL, ns3__ArrayOfDocTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfDocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfDocTipo(struct soap *soap, ns3__ArrayOfDocTipo *p)
{
	if (afip::soap_read_ns3__ArrayOfDocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__DocTipoResponse_DEFINED
#define SOAP_TYPE_afip_ns3__DocTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DocTipoResponse(struct soap*, const char*, int, const ns3__DocTipoResponse *, const char*);
SOAP_FMAC3 ns3__DocTipoResponse * SOAP_FMAC4 soap_in_ns3__DocTipoResponse(struct soap*, const char*, ns3__DocTipoResponse *, const char*);
SOAP_FMAC1 ns3__DocTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__DocTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DocTipoResponse * soap_new_ns3__DocTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DocTipoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__DocTipoResponse * soap_new_req_ns3__DocTipoResponse(
	struct soap *soap)
{
	ns3__DocTipoResponse *_p = afip::soap_new_ns3__DocTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__DocTipoResponse * soap_new_set_ns3__DocTipoResponse(
	struct soap *soap,
	ns3__ArrayOfDocTipo *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__DocTipoResponse *_p = afip::soap_new_ns3__DocTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DocTipoResponse::ResultGet = ResultGet;
		_p->ns3__DocTipoResponse::Errors = Errors;
		_p->ns3__DocTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__DocTipoResponse(struct soap *soap, ns3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DocTipoResponse(struct soap *soap, const char *URL, ns3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__DocTipoResponse(struct soap *soap, const char *URL, ns3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DocTipoResponse(struct soap *soap, const char *URL, ns3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DocTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DocTipoResponse * SOAP_FMAC4 soap_get_ns3__DocTipoResponse(struct soap*, ns3__DocTipoResponse *, const char*, const char*);

inline int soap_read_ns3__DocTipoResponse(struct soap *soap, ns3__DocTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__DocTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DocTipoResponse(struct soap *soap, const char *URL, ns3__DocTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__DocTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__DocTipoResponse(struct soap *soap, ns3__DocTipoResponse *p)
{
	if (afip::soap_read_ns3__DocTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__CbteTipo_DEFINED
#define SOAP_TYPE_afip_ns3__CbteTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CbteTipo(struct soap*, const char*, int, const ns3__CbteTipo *, const char*);
SOAP_FMAC3 ns3__CbteTipo * SOAP_FMAC4 soap_in_ns3__CbteTipo(struct soap*, const char*, ns3__CbteTipo *, const char*);
SOAP_FMAC1 ns3__CbteTipo * SOAP_FMAC2 soap_instantiate_ns3__CbteTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CbteTipo * soap_new_ns3__CbteTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CbteTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__CbteTipo * soap_new_req_ns3__CbteTipo(
	struct soap *soap,
	int Id)
{
	ns3__CbteTipo *_p = afip::soap_new_ns3__CbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CbteTipo::Id = Id;
	}
	return _p;
}

inline ns3__CbteTipo * soap_new_set_ns3__CbteTipo(
	struct soap *soap,
	int Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	ns3__CbteTipo *_p = afip::soap_new_ns3__CbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CbteTipo::Id = Id;
		_p->ns3__CbteTipo::Desc = Desc;
		_p->ns3__CbteTipo::FchDesde = FchDesde;
		_p->ns3__CbteTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_ns3__CbteTipo(struct soap *soap, ns3__CbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CbteTipo(struct soap *soap, const char *URL, ns3__CbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__CbteTipo(struct soap *soap, const char *URL, ns3__CbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CbteTipo(struct soap *soap, const char *URL, ns3__CbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CbteTipo * SOAP_FMAC4 soap_get_ns3__CbteTipo(struct soap*, ns3__CbteTipo *, const char*, const char*);

inline int soap_read_ns3__CbteTipo(struct soap *soap, ns3__CbteTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__CbteTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CbteTipo(struct soap *soap, const char *URL, ns3__CbteTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__CbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__CbteTipo(struct soap *soap, ns3__CbteTipo *p)
{
	if (afip::soap_read_ns3__CbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfCbteTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfCbteTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfCbteTipo(struct soap*, const char*, int, const ns3__ArrayOfCbteTipo *, const char*);
SOAP_FMAC3 ns3__ArrayOfCbteTipo * SOAP_FMAC4 soap_in_ns3__ArrayOfCbteTipo(struct soap*, const char*, ns3__ArrayOfCbteTipo *, const char*);
SOAP_FMAC1 ns3__ArrayOfCbteTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfCbteTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfCbteTipo * soap_new_ns3__ArrayOfCbteTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfCbteTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfCbteTipo * soap_new_req_ns3__ArrayOfCbteTipo(
	struct soap *soap)
{
	ns3__ArrayOfCbteTipo *_p = afip::soap_new_ns3__ArrayOfCbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfCbteTipo * soap_new_set_ns3__ArrayOfCbteTipo(
	struct soap *soap,
	const std::vector<ns3__CbteTipo *> & CbteTipo)
{
	ns3__ArrayOfCbteTipo *_p = afip::soap_new_ns3__ArrayOfCbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfCbteTipo::CbteTipo = CbteTipo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfCbteTipo(struct soap *soap, ns3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfCbteTipo(struct soap *soap, const char *URL, ns3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfCbteTipo(struct soap *soap, const char *URL, ns3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfCbteTipo(struct soap *soap, const char *URL, ns3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfCbteTipo * SOAP_FMAC4 soap_get_ns3__ArrayOfCbteTipo(struct soap*, ns3__ArrayOfCbteTipo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfCbteTipo(struct soap *soap, ns3__ArrayOfCbteTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfCbteTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfCbteTipo(struct soap *soap, const char *URL, ns3__ArrayOfCbteTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfCbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfCbteTipo(struct soap *soap, ns3__ArrayOfCbteTipo *p)
{
	if (afip::soap_read_ns3__ArrayOfCbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__CbteTipoResponse_DEFINED
#define SOAP_TYPE_afip_ns3__CbteTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CbteTipoResponse(struct soap*, const char*, int, const ns3__CbteTipoResponse *, const char*);
SOAP_FMAC3 ns3__CbteTipoResponse * SOAP_FMAC4 soap_in_ns3__CbteTipoResponse(struct soap*, const char*, ns3__CbteTipoResponse *, const char*);
SOAP_FMAC1 ns3__CbteTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__CbteTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CbteTipoResponse * soap_new_ns3__CbteTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CbteTipoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__CbteTipoResponse * soap_new_req_ns3__CbteTipoResponse(
	struct soap *soap)
{
	ns3__CbteTipoResponse *_p = afip::soap_new_ns3__CbteTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__CbteTipoResponse * soap_new_set_ns3__CbteTipoResponse(
	struct soap *soap,
	ns3__ArrayOfCbteTipo *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__CbteTipoResponse *_p = afip::soap_new_ns3__CbteTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CbteTipoResponse::ResultGet = ResultGet;
		_p->ns3__CbteTipoResponse::Errors = Errors;
		_p->ns3__CbteTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__CbteTipoResponse(struct soap *soap, ns3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CbteTipoResponse(struct soap *soap, const char *URL, ns3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__CbteTipoResponse(struct soap *soap, const char *URL, ns3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CbteTipoResponse(struct soap *soap, const char *URL, ns3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CbteTipoResponse * SOAP_FMAC4 soap_get_ns3__CbteTipoResponse(struct soap*, ns3__CbteTipoResponse *, const char*, const char*);

inline int soap_read_ns3__CbteTipoResponse(struct soap *soap, ns3__CbteTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__CbteTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CbteTipoResponse(struct soap *soap, const char *URL, ns3__CbteTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__CbteTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__CbteTipoResponse(struct soap *soap, ns3__CbteTipoResponse *p)
{
	if (afip::soap_read_ns3__CbteTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__PtoVenta_DEFINED
#define SOAP_TYPE_afip_ns3__PtoVenta_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__PtoVenta(struct soap*, const char*, int, const ns3__PtoVenta *, const char*);
SOAP_FMAC3 ns3__PtoVenta * SOAP_FMAC4 soap_in_ns3__PtoVenta(struct soap*, const char*, ns3__PtoVenta *, const char*);
SOAP_FMAC1 ns3__PtoVenta * SOAP_FMAC2 soap_instantiate_ns3__PtoVenta(struct soap*, int, const char*, const char*, size_t*);

inline ns3__PtoVenta * soap_new_ns3__PtoVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__PtoVenta(soap, n, NULL, NULL, NULL);
}

inline ns3__PtoVenta * soap_new_req_ns3__PtoVenta(
	struct soap *soap,
	int Nro)
{
	ns3__PtoVenta *_p = afip::soap_new_ns3__PtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PtoVenta::Nro = Nro;
	}
	return _p;
}

inline ns3__PtoVenta * soap_new_set_ns3__PtoVenta(
	struct soap *soap,
	int Nro,
	std::string *EmisionTipo,
	std::string *Bloqueado,
	std::string *FchBaja)
{
	ns3__PtoVenta *_p = afip::soap_new_ns3__PtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__PtoVenta::Nro = Nro;
		_p->ns3__PtoVenta::EmisionTipo = EmisionTipo;
		_p->ns3__PtoVenta::Bloqueado = Bloqueado;
		_p->ns3__PtoVenta::FchBaja = FchBaja;
	}
	return _p;
}

inline int soap_write_ns3__PtoVenta(struct soap *soap, ns3__PtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__PtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__PtoVenta(struct soap *soap, const char *URL, ns3__PtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__PtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__PtoVenta(struct soap *soap, const char *URL, ns3__PtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__PtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__PtoVenta(struct soap *soap, const char *URL, ns3__PtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:PtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__PtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__PtoVenta * SOAP_FMAC4 soap_get_ns3__PtoVenta(struct soap*, ns3__PtoVenta *, const char*, const char*);

inline int soap_read_ns3__PtoVenta(struct soap *soap, ns3__PtoVenta *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__PtoVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__PtoVenta(struct soap *soap, const char *URL, ns3__PtoVenta *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__PtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__PtoVenta(struct soap *soap, ns3__PtoVenta *p)
{
	if (afip::soap_read_ns3__PtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfPtoVenta_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfPtoVenta_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfPtoVenta(struct soap*, const char*, int, const ns3__ArrayOfPtoVenta *, const char*);
SOAP_FMAC3 ns3__ArrayOfPtoVenta * SOAP_FMAC4 soap_in_ns3__ArrayOfPtoVenta(struct soap*, const char*, ns3__ArrayOfPtoVenta *, const char*);
SOAP_FMAC1 ns3__ArrayOfPtoVenta * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfPtoVenta(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfPtoVenta * soap_new_ns3__ArrayOfPtoVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfPtoVenta(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfPtoVenta * soap_new_req_ns3__ArrayOfPtoVenta(
	struct soap *soap)
{
	ns3__ArrayOfPtoVenta *_p = afip::soap_new_ns3__ArrayOfPtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfPtoVenta * soap_new_set_ns3__ArrayOfPtoVenta(
	struct soap *soap,
	const std::vector<ns3__PtoVenta *> & PtoVenta)
{
	ns3__ArrayOfPtoVenta *_p = afip::soap_new_ns3__ArrayOfPtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfPtoVenta::PtoVenta = PtoVenta;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfPtoVenta(struct soap *soap, ns3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfPtoVenta(struct soap *soap, const char *URL, ns3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfPtoVenta(struct soap *soap, const char *URL, ns3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfPtoVenta(struct soap *soap, const char *URL, ns3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfPtoVenta * SOAP_FMAC4 soap_get_ns3__ArrayOfPtoVenta(struct soap*, ns3__ArrayOfPtoVenta *, const char*, const char*);

inline int soap_read_ns3__ArrayOfPtoVenta(struct soap *soap, ns3__ArrayOfPtoVenta *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfPtoVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfPtoVenta(struct soap *soap, const char *URL, ns3__ArrayOfPtoVenta *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfPtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfPtoVenta(struct soap *soap, ns3__ArrayOfPtoVenta *p)
{
	if (afip::soap_read_ns3__ArrayOfPtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FEPtoVentaResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FEPtoVentaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FEPtoVentaResponse(struct soap*, const char*, int, const ns3__FEPtoVentaResponse *, const char*);
SOAP_FMAC3 ns3__FEPtoVentaResponse * SOAP_FMAC4 soap_in_ns3__FEPtoVentaResponse(struct soap*, const char*, ns3__FEPtoVentaResponse *, const char*);
SOAP_FMAC1 ns3__FEPtoVentaResponse * SOAP_FMAC2 soap_instantiate_ns3__FEPtoVentaResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FEPtoVentaResponse * soap_new_ns3__FEPtoVentaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FEPtoVentaResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FEPtoVentaResponse * soap_new_req_ns3__FEPtoVentaResponse(
	struct soap *soap)
{
	ns3__FEPtoVentaResponse *_p = afip::soap_new_ns3__FEPtoVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FEPtoVentaResponse * soap_new_set_ns3__FEPtoVentaResponse(
	struct soap *soap,
	ns3__ArrayOfPtoVenta *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FEPtoVentaResponse *_p = afip::soap_new_ns3__FEPtoVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEPtoVentaResponse::ResultGet = ResultGet;
		_p->ns3__FEPtoVentaResponse::Errors = Errors;
		_p->ns3__FEPtoVentaResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FEPtoVentaResponse(struct soap *soap, ns3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FEPtoVentaResponse(struct soap *soap, const char *URL, ns3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FEPtoVentaResponse(struct soap *soap, const char *URL, ns3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FEPtoVentaResponse(struct soap *soap, const char *URL, ns3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FEPtoVentaResponse * SOAP_FMAC4 soap_get_ns3__FEPtoVentaResponse(struct soap*, ns3__FEPtoVentaResponse *, const char*, const char*);

inline int soap_read_ns3__FEPtoVentaResponse(struct soap *soap, ns3__FEPtoVentaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FEPtoVentaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FEPtoVentaResponse(struct soap *soap, const char *URL, ns3__FEPtoVentaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FEPtoVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FEPtoVentaResponse(struct soap *soap, ns3__FEPtoVentaResponse *p)
{
	if (afip::soap_read_ns3__FEPtoVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ConceptoTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ConceptoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ConceptoTipo(struct soap*, const char*, int, const ns3__ConceptoTipo *, const char*);
SOAP_FMAC3 ns3__ConceptoTipo * SOAP_FMAC4 soap_in_ns3__ConceptoTipo(struct soap*, const char*, ns3__ConceptoTipo *, const char*);
SOAP_FMAC1 ns3__ConceptoTipo * SOAP_FMAC2 soap_instantiate_ns3__ConceptoTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ConceptoTipo * soap_new_ns3__ConceptoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ConceptoTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ConceptoTipo * soap_new_req_ns3__ConceptoTipo(
	struct soap *soap,
	int Id)
{
	ns3__ConceptoTipo *_p = afip::soap_new_ns3__ConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ConceptoTipo::Id = Id;
	}
	return _p;
}

inline ns3__ConceptoTipo * soap_new_set_ns3__ConceptoTipo(
	struct soap *soap,
	int Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	ns3__ConceptoTipo *_p = afip::soap_new_ns3__ConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ConceptoTipo::Id = Id;
		_p->ns3__ConceptoTipo::Desc = Desc;
		_p->ns3__ConceptoTipo::FchDesde = FchDesde;
		_p->ns3__ConceptoTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_ns3__ConceptoTipo(struct soap *soap, ns3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ConceptoTipo(struct soap *soap, const char *URL, ns3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ConceptoTipo(struct soap *soap, const char *URL, ns3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ConceptoTipo(struct soap *soap, const char *URL, ns3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ConceptoTipo * SOAP_FMAC4 soap_get_ns3__ConceptoTipo(struct soap*, ns3__ConceptoTipo *, const char*, const char*);

inline int soap_read_ns3__ConceptoTipo(struct soap *soap, ns3__ConceptoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ConceptoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ConceptoTipo(struct soap *soap, const char *URL, ns3__ConceptoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ConceptoTipo(struct soap *soap, ns3__ConceptoTipo *p)
{
	if (afip::soap_read_ns3__ConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfConceptoTipo(struct soap*, const char*, int, const ns3__ArrayOfConceptoTipo *, const char*);
SOAP_FMAC3 ns3__ArrayOfConceptoTipo * SOAP_FMAC4 soap_in_ns3__ArrayOfConceptoTipo(struct soap*, const char*, ns3__ArrayOfConceptoTipo *, const char*);
SOAP_FMAC1 ns3__ArrayOfConceptoTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfConceptoTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfConceptoTipo * soap_new_ns3__ArrayOfConceptoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfConceptoTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfConceptoTipo * soap_new_req_ns3__ArrayOfConceptoTipo(
	struct soap *soap)
{
	ns3__ArrayOfConceptoTipo *_p = afip::soap_new_ns3__ArrayOfConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfConceptoTipo * soap_new_set_ns3__ArrayOfConceptoTipo(
	struct soap *soap,
	const std::vector<ns3__ConceptoTipo *> & ConceptoTipo)
{
	ns3__ArrayOfConceptoTipo *_p = afip::soap_new_ns3__ArrayOfConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfConceptoTipo::ConceptoTipo = ConceptoTipo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfConceptoTipo(struct soap *soap, ns3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, ns3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, ns3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, ns3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfConceptoTipo * SOAP_FMAC4 soap_get_ns3__ArrayOfConceptoTipo(struct soap*, ns3__ArrayOfConceptoTipo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfConceptoTipo(struct soap *soap, ns3__ArrayOfConceptoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfConceptoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, ns3__ArrayOfConceptoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfConceptoTipo(struct soap *soap, ns3__ArrayOfConceptoTipo *p)
{
	if (afip::soap_read_ns3__ArrayOfConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ConceptoTipoResponse_DEFINED
#define SOAP_TYPE_afip_ns3__ConceptoTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ConceptoTipoResponse(struct soap*, const char*, int, const ns3__ConceptoTipoResponse *, const char*);
SOAP_FMAC3 ns3__ConceptoTipoResponse * SOAP_FMAC4 soap_in_ns3__ConceptoTipoResponse(struct soap*, const char*, ns3__ConceptoTipoResponse *, const char*);
SOAP_FMAC1 ns3__ConceptoTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__ConceptoTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ConceptoTipoResponse * soap_new_ns3__ConceptoTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ConceptoTipoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__ConceptoTipoResponse * soap_new_req_ns3__ConceptoTipoResponse(
	struct soap *soap)
{
	ns3__ConceptoTipoResponse *_p = afip::soap_new_ns3__ConceptoTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ConceptoTipoResponse * soap_new_set_ns3__ConceptoTipoResponse(
	struct soap *soap,
	ns3__ArrayOfConceptoTipo *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__ConceptoTipoResponse *_p = afip::soap_new_ns3__ConceptoTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ConceptoTipoResponse::ResultGet = ResultGet;
		_p->ns3__ConceptoTipoResponse::Errors = Errors;
		_p->ns3__ConceptoTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__ConceptoTipoResponse(struct soap *soap, ns3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ConceptoTipoResponse(struct soap *soap, const char *URL, ns3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ConceptoTipoResponse(struct soap *soap, const char *URL, ns3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ConceptoTipoResponse(struct soap *soap, const char *URL, ns3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ConceptoTipoResponse * SOAP_FMAC4 soap_get_ns3__ConceptoTipoResponse(struct soap*, ns3__ConceptoTipoResponse *, const char*, const char*);

inline int soap_read_ns3__ConceptoTipoResponse(struct soap *soap, ns3__ConceptoTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ConceptoTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ConceptoTipoResponse(struct soap *soap, const char *URL, ns3__ConceptoTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ConceptoTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ConceptoTipoResponse(struct soap *soap, ns3__ConceptoTipoResponse *p)
{
	if (afip::soap_read_ns3__ConceptoTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__OpcionalTipo_DEFINED
#define SOAP_TYPE_afip_ns3__OpcionalTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OpcionalTipo(struct soap*, const char*, int, const ns3__OpcionalTipo *, const char*);
SOAP_FMAC3 ns3__OpcionalTipo * SOAP_FMAC4 soap_in_ns3__OpcionalTipo(struct soap*, const char*, ns3__OpcionalTipo *, const char*);
SOAP_FMAC1 ns3__OpcionalTipo * SOAP_FMAC2 soap_instantiate_ns3__OpcionalTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OpcionalTipo * soap_new_ns3__OpcionalTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OpcionalTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__OpcionalTipo * soap_new_req_ns3__OpcionalTipo(
	struct soap *soap)
{
	ns3__OpcionalTipo *_p = afip::soap_new_ns3__OpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OpcionalTipo * soap_new_set_ns3__OpcionalTipo(
	struct soap *soap,
	std::string *Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	ns3__OpcionalTipo *_p = afip::soap_new_ns3__OpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OpcionalTipo::Id = Id;
		_p->ns3__OpcionalTipo::Desc = Desc;
		_p->ns3__OpcionalTipo::FchDesde = FchDesde;
		_p->ns3__OpcionalTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_ns3__OpcionalTipo(struct soap *soap, ns3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OpcionalTipo(struct soap *soap, const char *URL, ns3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__OpcionalTipo(struct soap *soap, const char *URL, ns3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OpcionalTipo(struct soap *soap, const char *URL, ns3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OpcionalTipo * SOAP_FMAC4 soap_get_ns3__OpcionalTipo(struct soap*, ns3__OpcionalTipo *, const char*, const char*);

inline int soap_read_ns3__OpcionalTipo(struct soap *soap, ns3__OpcionalTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__OpcionalTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OpcionalTipo(struct soap *soap, const char *URL, ns3__OpcionalTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__OpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__OpcionalTipo(struct soap *soap, ns3__OpcionalTipo *p)
{
	if (afip::soap_read_ns3__OpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfOpcionalTipo(struct soap*, const char*, int, const ns3__ArrayOfOpcionalTipo *, const char*);
SOAP_FMAC3 ns3__ArrayOfOpcionalTipo * SOAP_FMAC4 soap_in_ns3__ArrayOfOpcionalTipo(struct soap*, const char*, ns3__ArrayOfOpcionalTipo *, const char*);
SOAP_FMAC1 ns3__ArrayOfOpcionalTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfOpcionalTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfOpcionalTipo * soap_new_ns3__ArrayOfOpcionalTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfOpcionalTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfOpcionalTipo * soap_new_req_ns3__ArrayOfOpcionalTipo(
	struct soap *soap)
{
	ns3__ArrayOfOpcionalTipo *_p = afip::soap_new_ns3__ArrayOfOpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfOpcionalTipo * soap_new_set_ns3__ArrayOfOpcionalTipo(
	struct soap *soap,
	const std::vector<ns3__OpcionalTipo *> & OpcionalTipo)
{
	ns3__ArrayOfOpcionalTipo *_p = afip::soap_new_ns3__ArrayOfOpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfOpcionalTipo::OpcionalTipo = OpcionalTipo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfOpcionalTipo(struct soap *soap, ns3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, ns3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, ns3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, ns3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfOpcionalTipo * SOAP_FMAC4 soap_get_ns3__ArrayOfOpcionalTipo(struct soap*, ns3__ArrayOfOpcionalTipo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfOpcionalTipo(struct soap *soap, ns3__ArrayOfOpcionalTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfOpcionalTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, ns3__ArrayOfOpcionalTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfOpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfOpcionalTipo(struct soap *soap, ns3__ArrayOfOpcionalTipo *p)
{
	if (afip::soap_read_ns3__ArrayOfOpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__OpcionalTipoResponse_DEFINED
#define SOAP_TYPE_afip_ns3__OpcionalTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__OpcionalTipoResponse(struct soap*, const char*, int, const ns3__OpcionalTipoResponse *, const char*);
SOAP_FMAC3 ns3__OpcionalTipoResponse * SOAP_FMAC4 soap_in_ns3__OpcionalTipoResponse(struct soap*, const char*, ns3__OpcionalTipoResponse *, const char*);
SOAP_FMAC1 ns3__OpcionalTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__OpcionalTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__OpcionalTipoResponse * soap_new_ns3__OpcionalTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__OpcionalTipoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__OpcionalTipoResponse * soap_new_req_ns3__OpcionalTipoResponse(
	struct soap *soap)
{
	ns3__OpcionalTipoResponse *_p = afip::soap_new_ns3__OpcionalTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__OpcionalTipoResponse * soap_new_set_ns3__OpcionalTipoResponse(
	struct soap *soap,
	ns3__ArrayOfOpcionalTipo *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__OpcionalTipoResponse *_p = afip::soap_new_ns3__OpcionalTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__OpcionalTipoResponse::ResultGet = ResultGet;
		_p->ns3__OpcionalTipoResponse::Errors = Errors;
		_p->ns3__OpcionalTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__OpcionalTipoResponse(struct soap *soap, ns3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__OpcionalTipoResponse(struct soap *soap, const char *URL, ns3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__OpcionalTipoResponse(struct soap *soap, const char *URL, ns3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__OpcionalTipoResponse(struct soap *soap, const char *URL, ns3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__OpcionalTipoResponse * SOAP_FMAC4 soap_get_ns3__OpcionalTipoResponse(struct soap*, ns3__OpcionalTipoResponse *, const char*, const char*);

inline int soap_read_ns3__OpcionalTipoResponse(struct soap *soap, ns3__OpcionalTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__OpcionalTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__OpcionalTipoResponse(struct soap *soap, const char *URL, ns3__OpcionalTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__OpcionalTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__OpcionalTipoResponse(struct soap *soap, ns3__OpcionalTipoResponse *p)
{
	if (afip::soap_read_ns3__OpcionalTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__IvaTipo_DEFINED
#define SOAP_TYPE_afip_ns3__IvaTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IvaTipo(struct soap*, const char*, int, const ns3__IvaTipo *, const char*);
SOAP_FMAC3 ns3__IvaTipo * SOAP_FMAC4 soap_in_ns3__IvaTipo(struct soap*, const char*, ns3__IvaTipo *, const char*);
SOAP_FMAC1 ns3__IvaTipo * SOAP_FMAC2 soap_instantiate_ns3__IvaTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IvaTipo * soap_new_ns3__IvaTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IvaTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__IvaTipo * soap_new_req_ns3__IvaTipo(
	struct soap *soap)
{
	ns3__IvaTipo *_p = afip::soap_new_ns3__IvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IvaTipo * soap_new_set_ns3__IvaTipo(
	struct soap *soap,
	std::string *Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	ns3__IvaTipo *_p = afip::soap_new_ns3__IvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IvaTipo::Id = Id;
		_p->ns3__IvaTipo::Desc = Desc;
		_p->ns3__IvaTipo::FchDesde = FchDesde;
		_p->ns3__IvaTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_ns3__IvaTipo(struct soap *soap, ns3__IvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IvaTipo(struct soap *soap, const char *URL, ns3__IvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__IvaTipo(struct soap *soap, const char *URL, ns3__IvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IvaTipo(struct soap *soap, const char *URL, ns3__IvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IvaTipo * SOAP_FMAC4 soap_get_ns3__IvaTipo(struct soap*, ns3__IvaTipo *, const char*, const char*);

inline int soap_read_ns3__IvaTipo(struct soap *soap, ns3__IvaTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__IvaTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IvaTipo(struct soap *soap, const char *URL, ns3__IvaTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__IvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__IvaTipo(struct soap *soap, ns3__IvaTipo *p)
{
	if (afip::soap_read_ns3__IvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfIvaTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfIvaTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfIvaTipo(struct soap*, const char*, int, const ns3__ArrayOfIvaTipo *, const char*);
SOAP_FMAC3 ns3__ArrayOfIvaTipo * SOAP_FMAC4 soap_in_ns3__ArrayOfIvaTipo(struct soap*, const char*, ns3__ArrayOfIvaTipo *, const char*);
SOAP_FMAC1 ns3__ArrayOfIvaTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfIvaTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfIvaTipo * soap_new_ns3__ArrayOfIvaTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfIvaTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfIvaTipo * soap_new_req_ns3__ArrayOfIvaTipo(
	struct soap *soap)
{
	ns3__ArrayOfIvaTipo *_p = afip::soap_new_ns3__ArrayOfIvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfIvaTipo * soap_new_set_ns3__ArrayOfIvaTipo(
	struct soap *soap,
	const std::vector<ns3__IvaTipo *> & IvaTipo)
{
	ns3__ArrayOfIvaTipo *_p = afip::soap_new_ns3__ArrayOfIvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfIvaTipo::IvaTipo = IvaTipo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfIvaTipo(struct soap *soap, ns3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfIvaTipo(struct soap *soap, const char *URL, ns3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfIvaTipo(struct soap *soap, const char *URL, ns3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfIvaTipo(struct soap *soap, const char *URL, ns3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfIvaTipo * SOAP_FMAC4 soap_get_ns3__ArrayOfIvaTipo(struct soap*, ns3__ArrayOfIvaTipo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfIvaTipo(struct soap *soap, ns3__ArrayOfIvaTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfIvaTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfIvaTipo(struct soap *soap, const char *URL, ns3__ArrayOfIvaTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfIvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfIvaTipo(struct soap *soap, ns3__ArrayOfIvaTipo *p)
{
	if (afip::soap_read_ns3__ArrayOfIvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__IvaTipoResponse_DEFINED
#define SOAP_TYPE_afip_ns3__IvaTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__IvaTipoResponse(struct soap*, const char*, int, const ns3__IvaTipoResponse *, const char*);
SOAP_FMAC3 ns3__IvaTipoResponse * SOAP_FMAC4 soap_in_ns3__IvaTipoResponse(struct soap*, const char*, ns3__IvaTipoResponse *, const char*);
SOAP_FMAC1 ns3__IvaTipoResponse * SOAP_FMAC2 soap_instantiate_ns3__IvaTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__IvaTipoResponse * soap_new_ns3__IvaTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__IvaTipoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__IvaTipoResponse * soap_new_req_ns3__IvaTipoResponse(
	struct soap *soap)
{
	ns3__IvaTipoResponse *_p = afip::soap_new_ns3__IvaTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__IvaTipoResponse * soap_new_set_ns3__IvaTipoResponse(
	struct soap *soap,
	ns3__ArrayOfIvaTipo *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__IvaTipoResponse *_p = afip::soap_new_ns3__IvaTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__IvaTipoResponse::ResultGet = ResultGet;
		_p->ns3__IvaTipoResponse::Errors = Errors;
		_p->ns3__IvaTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__IvaTipoResponse(struct soap *soap, ns3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__IvaTipoResponse(struct soap *soap, const char *URL, ns3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__IvaTipoResponse(struct soap *soap, const char *URL, ns3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__IvaTipoResponse(struct soap *soap, const char *URL, ns3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__IvaTipoResponse * SOAP_FMAC4 soap_get_ns3__IvaTipoResponse(struct soap*, ns3__IvaTipoResponse *, const char*, const char*);

inline int soap_read_ns3__IvaTipoResponse(struct soap *soap, ns3__IvaTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__IvaTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__IvaTipoResponse(struct soap *soap, const char *URL, ns3__IvaTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__IvaTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__IvaTipoResponse(struct soap *soap, ns3__IvaTipoResponse *p)
{
	if (afip::soap_read_ns3__IvaTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Moneda_DEFINED
#define SOAP_TYPE_afip_ns3__Moneda_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Moneda(struct soap*, const char*, int, const ns3__Moneda *, const char*);
SOAP_FMAC3 ns3__Moneda * SOAP_FMAC4 soap_in_ns3__Moneda(struct soap*, const char*, ns3__Moneda *, const char*);
SOAP_FMAC1 ns3__Moneda * SOAP_FMAC2 soap_instantiate_ns3__Moneda(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Moneda * soap_new_ns3__Moneda(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Moneda(soap, n, NULL, NULL, NULL);
}

inline ns3__Moneda * soap_new_req_ns3__Moneda(
	struct soap *soap)
{
	ns3__Moneda *_p = afip::soap_new_ns3__Moneda(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__Moneda * soap_new_set_ns3__Moneda(
	struct soap *soap,
	std::string *Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	ns3__Moneda *_p = afip::soap_new_ns3__Moneda(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Moneda::Id = Id;
		_p->ns3__Moneda::Desc = Desc;
		_p->ns3__Moneda::FchDesde = FchDesde;
		_p->ns3__Moneda::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_ns3__Moneda(struct soap *soap, ns3__Moneda const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Moneda", p->soap_type() == SOAP_TYPE_afip_ns3__Moneda ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Moneda(struct soap *soap, const char *URL, ns3__Moneda const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Moneda", p->soap_type() == SOAP_TYPE_afip_ns3__Moneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Moneda(struct soap *soap, const char *URL, ns3__Moneda const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Moneda", p->soap_type() == SOAP_TYPE_afip_ns3__Moneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Moneda(struct soap *soap, const char *URL, ns3__Moneda const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Moneda", p->soap_type() == SOAP_TYPE_afip_ns3__Moneda ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Moneda * SOAP_FMAC4 soap_get_ns3__Moneda(struct soap*, ns3__Moneda *, const char*, const char*);

inline int soap_read_ns3__Moneda(struct soap *soap, ns3__Moneda *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Moneda(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Moneda(struct soap *soap, const char *URL, ns3__Moneda *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Moneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Moneda(struct soap *soap, ns3__Moneda *p)
{
	if (afip::soap_read_ns3__Moneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfMoneda_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfMoneda_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfMoneda(struct soap*, const char*, int, const ns3__ArrayOfMoneda *, const char*);
SOAP_FMAC3 ns3__ArrayOfMoneda * SOAP_FMAC4 soap_in_ns3__ArrayOfMoneda(struct soap*, const char*, ns3__ArrayOfMoneda *, const char*);
SOAP_FMAC1 ns3__ArrayOfMoneda * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfMoneda(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfMoneda * soap_new_ns3__ArrayOfMoneda(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfMoneda(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfMoneda * soap_new_req_ns3__ArrayOfMoneda(
	struct soap *soap)
{
	ns3__ArrayOfMoneda *_p = afip::soap_new_ns3__ArrayOfMoneda(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfMoneda * soap_new_set_ns3__ArrayOfMoneda(
	struct soap *soap,
	const std::vector<ns3__Moneda *> & Moneda)
{
	ns3__ArrayOfMoneda *_p = afip::soap_new_ns3__ArrayOfMoneda(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfMoneda::Moneda = Moneda;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfMoneda(struct soap *soap, ns3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfMoneda(struct soap *soap, const char *URL, ns3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfMoneda(struct soap *soap, const char *URL, ns3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfMoneda(struct soap *soap, const char *URL, ns3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfMoneda * SOAP_FMAC4 soap_get_ns3__ArrayOfMoneda(struct soap*, ns3__ArrayOfMoneda *, const char*, const char*);

inline int soap_read_ns3__ArrayOfMoneda(struct soap *soap, ns3__ArrayOfMoneda *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfMoneda(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfMoneda(struct soap *soap, const char *URL, ns3__ArrayOfMoneda *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfMoneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfMoneda(struct soap *soap, ns3__ArrayOfMoneda *p)
{
	if (afip::soap_read_ns3__ArrayOfMoneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__MonedaResponse_DEFINED
#define SOAP_TYPE_afip_ns3__MonedaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__MonedaResponse(struct soap*, const char*, int, const ns3__MonedaResponse *, const char*);
SOAP_FMAC3 ns3__MonedaResponse * SOAP_FMAC4 soap_in_ns3__MonedaResponse(struct soap*, const char*, ns3__MonedaResponse *, const char*);
SOAP_FMAC1 ns3__MonedaResponse * SOAP_FMAC2 soap_instantiate_ns3__MonedaResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__MonedaResponse * soap_new_ns3__MonedaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__MonedaResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__MonedaResponse * soap_new_req_ns3__MonedaResponse(
	struct soap *soap)
{
	ns3__MonedaResponse *_p = afip::soap_new_ns3__MonedaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__MonedaResponse * soap_new_set_ns3__MonedaResponse(
	struct soap *soap,
	ns3__ArrayOfMoneda *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__MonedaResponse *_p = afip::soap_new_ns3__MonedaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__MonedaResponse::ResultGet = ResultGet;
		_p->ns3__MonedaResponse::Errors = Errors;
		_p->ns3__MonedaResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__MonedaResponse(struct soap *soap, ns3__MonedaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__MonedaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__MonedaResponse(struct soap *soap, const char *URL, ns3__MonedaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__MonedaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__MonedaResponse(struct soap *soap, const char *URL, ns3__MonedaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__MonedaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__MonedaResponse(struct soap *soap, const char *URL, ns3__MonedaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__MonedaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__MonedaResponse * SOAP_FMAC4 soap_get_ns3__MonedaResponse(struct soap*, ns3__MonedaResponse *, const char*, const char*);

inline int soap_read_ns3__MonedaResponse(struct soap *soap, ns3__MonedaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__MonedaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__MonedaResponse(struct soap *soap, const char *URL, ns3__MonedaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__MonedaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__MonedaResponse(struct soap *soap, ns3__MonedaResponse *p)
{
	if (afip::soap_read_ns3__MonedaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__TributoTipo_DEFINED
#define SOAP_TYPE_afip_ns3__TributoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__TributoTipo(struct soap*, const char*, int, const ns3__TributoTipo *, const char*);
SOAP_FMAC3 ns3__TributoTipo * SOAP_FMAC4 soap_in_ns3__TributoTipo(struct soap*, const char*, ns3__TributoTipo *, const char*);
SOAP_FMAC1 ns3__TributoTipo * SOAP_FMAC2 soap_instantiate_ns3__TributoTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__TributoTipo * soap_new_ns3__TributoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__TributoTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__TributoTipo * soap_new_req_ns3__TributoTipo(
	struct soap *soap,
	short Id)
{
	ns3__TributoTipo *_p = afip::soap_new_ns3__TributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TributoTipo::Id = Id;
	}
	return _p;
}

inline ns3__TributoTipo * soap_new_set_ns3__TributoTipo(
	struct soap *soap,
	short Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	ns3__TributoTipo *_p = afip::soap_new_ns3__TributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__TributoTipo::Id = Id;
		_p->ns3__TributoTipo::Desc = Desc;
		_p->ns3__TributoTipo::FchDesde = FchDesde;
		_p->ns3__TributoTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_ns3__TributoTipo(struct soap *soap, ns3__TributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__TributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__TributoTipo(struct soap *soap, const char *URL, ns3__TributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__TributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__TributoTipo(struct soap *soap, const char *URL, ns3__TributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__TributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__TributoTipo(struct soap *soap, const char *URL, ns3__TributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:TributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__TributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__TributoTipo * SOAP_FMAC4 soap_get_ns3__TributoTipo(struct soap*, ns3__TributoTipo *, const char*, const char*);

inline int soap_read_ns3__TributoTipo(struct soap *soap, ns3__TributoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__TributoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__TributoTipo(struct soap *soap, const char *URL, ns3__TributoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__TributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__TributoTipo(struct soap *soap, ns3__TributoTipo *p)
{
	if (afip::soap_read_ns3__TributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfTributoTipo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfTributoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfTributoTipo(struct soap*, const char*, int, const ns3__ArrayOfTributoTipo *, const char*);
SOAP_FMAC3 ns3__ArrayOfTributoTipo * SOAP_FMAC4 soap_in_ns3__ArrayOfTributoTipo(struct soap*, const char*, ns3__ArrayOfTributoTipo *, const char*);
SOAP_FMAC1 ns3__ArrayOfTributoTipo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfTributoTipo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfTributoTipo * soap_new_ns3__ArrayOfTributoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfTributoTipo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfTributoTipo * soap_new_req_ns3__ArrayOfTributoTipo(
	struct soap *soap)
{
	ns3__ArrayOfTributoTipo *_p = afip::soap_new_ns3__ArrayOfTributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfTributoTipo * soap_new_set_ns3__ArrayOfTributoTipo(
	struct soap *soap,
	const std::vector<ns3__TributoTipo *> & TributoTipo)
{
	ns3__ArrayOfTributoTipo *_p = afip::soap_new_ns3__ArrayOfTributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfTributoTipo::TributoTipo = TributoTipo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfTributoTipo(struct soap *soap, ns3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfTributoTipo(struct soap *soap, const char *URL, ns3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfTributoTipo(struct soap *soap, const char *URL, ns3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfTributoTipo(struct soap *soap, const char *URL, ns3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfTributoTipo * SOAP_FMAC4 soap_get_ns3__ArrayOfTributoTipo(struct soap*, ns3__ArrayOfTributoTipo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfTributoTipo(struct soap *soap, ns3__ArrayOfTributoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfTributoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfTributoTipo(struct soap *soap, const char *URL, ns3__ArrayOfTributoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfTributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfTributoTipo(struct soap *soap, ns3__ArrayOfTributoTipo *p)
{
	if (afip::soap_read_ns3__ArrayOfTributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FETributoResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FETributoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FETributoResponse(struct soap*, const char*, int, const ns3__FETributoResponse *, const char*);
SOAP_FMAC3 ns3__FETributoResponse * SOAP_FMAC4 soap_in_ns3__FETributoResponse(struct soap*, const char*, ns3__FETributoResponse *, const char*);
SOAP_FMAC1 ns3__FETributoResponse * SOAP_FMAC2 soap_instantiate_ns3__FETributoResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FETributoResponse * soap_new_ns3__FETributoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FETributoResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FETributoResponse * soap_new_req_ns3__FETributoResponse(
	struct soap *soap)
{
	ns3__FETributoResponse *_p = afip::soap_new_ns3__FETributoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FETributoResponse * soap_new_set_ns3__FETributoResponse(
	struct soap *soap,
	ns3__ArrayOfTributoTipo *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FETributoResponse *_p = afip::soap_new_ns3__FETributoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FETributoResponse::ResultGet = ResultGet;
		_p->ns3__FETributoResponse::Errors = Errors;
		_p->ns3__FETributoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FETributoResponse(struct soap *soap, ns3__FETributoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FETributoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FETributoResponse(struct soap *soap, const char *URL, ns3__FETributoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FETributoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FETributoResponse(struct soap *soap, const char *URL, ns3__FETributoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FETributoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FETributoResponse(struct soap *soap, const char *URL, ns3__FETributoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FETributoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FETributoResponse * SOAP_FMAC4 soap_get_ns3__FETributoResponse(struct soap*, ns3__FETributoResponse *, const char*, const char*);

inline int soap_read_ns3__FETributoResponse(struct soap *soap, ns3__FETributoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FETributoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FETributoResponse(struct soap *soap, const char *URL, ns3__FETributoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FETributoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FETributoResponse(struct soap *soap, ns3__FETributoResponse *p)
{
	if (afip::soap_read_ns3__FETributoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Cotizacion_DEFINED
#define SOAP_TYPE_afip_ns3__Cotizacion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Cotizacion(struct soap*, const char*, int, const ns3__Cotizacion *, const char*);
SOAP_FMAC3 ns3__Cotizacion * SOAP_FMAC4 soap_in_ns3__Cotizacion(struct soap*, const char*, ns3__Cotizacion *, const char*);
SOAP_FMAC1 ns3__Cotizacion * SOAP_FMAC2 soap_instantiate_ns3__Cotizacion(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Cotizacion * soap_new_ns3__Cotizacion(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Cotizacion(soap, n, NULL, NULL, NULL);
}

inline ns3__Cotizacion * soap_new_req_ns3__Cotizacion(
	struct soap *soap,
	double MonCotiz)
{
	ns3__Cotizacion *_p = afip::soap_new_ns3__Cotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Cotizacion::MonCotiz = MonCotiz;
	}
	return _p;
}

inline ns3__Cotizacion * soap_new_set_ns3__Cotizacion(
	struct soap *soap,
	std::string *MonId,
	double MonCotiz,
	std::string *FchCotiz)
{
	ns3__Cotizacion *_p = afip::soap_new_ns3__Cotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Cotizacion::MonId = MonId;
		_p->ns3__Cotizacion::MonCotiz = MonCotiz;
		_p->ns3__Cotizacion::FchCotiz = FchCotiz;
	}
	return _p;
}

inline int soap_write_ns3__Cotizacion(struct soap *soap, ns3__Cotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Cotizacion", p->soap_type() == SOAP_TYPE_afip_ns3__Cotizacion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Cotizacion(struct soap *soap, const char *URL, ns3__Cotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Cotizacion", p->soap_type() == SOAP_TYPE_afip_ns3__Cotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Cotizacion(struct soap *soap, const char *URL, ns3__Cotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Cotizacion", p->soap_type() == SOAP_TYPE_afip_ns3__Cotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Cotizacion(struct soap *soap, const char *URL, ns3__Cotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Cotizacion", p->soap_type() == SOAP_TYPE_afip_ns3__Cotizacion ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Cotizacion * SOAP_FMAC4 soap_get_ns3__Cotizacion(struct soap*, ns3__Cotizacion *, const char*, const char*);

inline int soap_read_ns3__Cotizacion(struct soap *soap, ns3__Cotizacion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Cotizacion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Cotizacion(struct soap *soap, const char *URL, ns3__Cotizacion *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Cotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Cotizacion(struct soap *soap, ns3__Cotizacion *p)
{
	if (afip::soap_read_ns3__Cotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECotizacionResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECotizacionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECotizacionResponse(struct soap*, const char*, int, const ns3__FECotizacionResponse *, const char*);
SOAP_FMAC3 ns3__FECotizacionResponse * SOAP_FMAC4 soap_in_ns3__FECotizacionResponse(struct soap*, const char*, ns3__FECotizacionResponse *, const char*);
SOAP_FMAC1 ns3__FECotizacionResponse * SOAP_FMAC2 soap_instantiate_ns3__FECotizacionResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECotizacionResponse * soap_new_ns3__FECotizacionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECotizacionResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECotizacionResponse * soap_new_req_ns3__FECotizacionResponse(
	struct soap *soap)
{
	ns3__FECotizacionResponse *_p = afip::soap_new_ns3__FECotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECotizacionResponse * soap_new_set_ns3__FECotizacionResponse(
	struct soap *soap,
	ns3__Cotizacion *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FECotizacionResponse *_p = afip::soap_new_ns3__FECotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECotizacionResponse::ResultGet = ResultGet;
		_p->ns3__FECotizacionResponse::Errors = Errors;
		_p->ns3__FECotizacionResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FECotizacionResponse(struct soap *soap, ns3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECotizacionResponse(struct soap *soap, const char *URL, ns3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECotizacionResponse(struct soap *soap, const char *URL, ns3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECotizacionResponse(struct soap *soap, const char *URL, ns3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECotizacionResponse * SOAP_FMAC4 soap_get_ns3__FECotizacionResponse(struct soap*, ns3__FECotizacionResponse *, const char*, const char*);

inline int soap_read_ns3__FECotizacionResponse(struct soap *soap, ns3__FECotizacionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECotizacionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECotizacionResponse(struct soap *soap, const char *URL, ns3__FECotizacionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECotizacionResponse(struct soap *soap, ns3__FECotizacionResponse *p)
{
	if (afip::soap_read_ns3__FECotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEASinMovResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEASinMovResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEASinMovResponse(struct soap*, const char*, int, const ns3__FECAEASinMovResponse *, const char*);
SOAP_FMAC3 ns3__FECAEASinMovResponse * SOAP_FMAC4 soap_in_ns3__FECAEASinMovResponse(struct soap*, const char*, ns3__FECAEASinMovResponse *, const char*);
SOAP_FMAC1 ns3__FECAEASinMovResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEASinMovResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEASinMovResponse * soap_new_ns3__FECAEASinMovResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEASinMovResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEASinMovResponse * soap_new_req_ns3__FECAEASinMovResponse(
	struct soap *soap,
	int PtoVta__1)
{
	ns3__FECAEASinMovResponse *_p = afip::soap_new_ns3__FECAEASinMovResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEASinMov::PtoVta = PtoVta__1;
	}
	return _p;
}

inline ns3__FECAEASinMovResponse * soap_new_set_ns3__FECAEASinMovResponse(
	struct soap *soap,
	std::string *Resultado,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events,
	std::string *CAEA__1,
	std::string *FchProceso__1,
	int PtoVta__1)
{
	ns3__FECAEASinMovResponse *_p = afip::soap_new_ns3__FECAEASinMovResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEASinMovResponse::Resultado = Resultado;
		_p->ns3__FECAEASinMovResponse::Errors = Errors;
		_p->ns3__FECAEASinMovResponse::Events = Events;
		_p->ns3__FECAEASinMov::CAEA = CAEA__1;
		_p->ns3__FECAEASinMov::FchProceso = FchProceso__1;
		_p->ns3__FECAEASinMov::PtoVta = PtoVta__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAEASinMovResponse(struct soap *soap, ns3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEASinMovResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEASinMovResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEASinMovResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEASinMovResponse * SOAP_FMAC4 soap_get_ns3__FECAEASinMovResponse(struct soap*, ns3__FECAEASinMovResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEASinMovResponse(struct soap *soap, ns3__FECAEASinMovResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEASinMovResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEASinMovResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEASinMovResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEASinMovResponse(struct soap *soap, ns3__FECAEASinMovResponse *p)
{
	if (afip::soap_read_ns3__FECAEASinMovResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEASinMov_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEASinMov_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEASinMov(struct soap*, const char*, int, const ns3__FECAEASinMov *, const char*);
SOAP_FMAC3 ns3__FECAEASinMov * SOAP_FMAC4 soap_in_ns3__FECAEASinMov(struct soap*, const char*, ns3__FECAEASinMov *, const char*);
SOAP_FMAC1 ns3__FECAEASinMov * SOAP_FMAC2 soap_instantiate_ns3__FECAEASinMov(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEASinMov * soap_new_ns3__FECAEASinMov(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEASinMov(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEASinMov * soap_new_req_ns3__FECAEASinMov(
	struct soap *soap,
	int PtoVta)
{
	ns3__FECAEASinMov *_p = afip::soap_new_ns3__FECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEASinMov::PtoVta = PtoVta;
	}
	return _p;
}

inline ns3__FECAEASinMov * soap_new_set_ns3__FECAEASinMov(
	struct soap *soap,
	std::string *CAEA,
	std::string *FchProceso,
	int PtoVta)
{
	ns3__FECAEASinMov *_p = afip::soap_new_ns3__FECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEASinMov::CAEA = CAEA;
		_p->ns3__FECAEASinMov::FchProceso = FchProceso;
		_p->ns3__FECAEASinMov::PtoVta = PtoVta;
	}
	return _p;
}

inline int soap_write_ns3__FECAEASinMov(struct soap *soap, ns3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEASinMov(struct soap *soap, const char *URL, ns3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEASinMov(struct soap *soap, const char *URL, ns3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEASinMov(struct soap *soap, const char *URL, ns3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEASinMov * SOAP_FMAC4 soap_get_ns3__FECAEASinMov(struct soap*, ns3__FECAEASinMov *, const char*, const char*);

inline int soap_read_ns3__FECAEASinMov(struct soap *soap, ns3__FECAEASinMov *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEASinMov(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEASinMov(struct soap *soap, const char *URL, ns3__FECAEASinMov *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEASinMov(struct soap *soap, ns3__FECAEASinMov *p)
{
	if (afip::soap_read_ns3__FECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfFECAEASinMov(struct soap*, const char*, int, const ns3__ArrayOfFECAEASinMov *, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEASinMov * SOAP_FMAC4 soap_in_ns3__ArrayOfFECAEASinMov(struct soap*, const char*, ns3__ArrayOfFECAEASinMov *, const char*);
SOAP_FMAC1 ns3__ArrayOfFECAEASinMov * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEASinMov(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfFECAEASinMov * soap_new_ns3__ArrayOfFECAEASinMov(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfFECAEASinMov(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfFECAEASinMov * soap_new_req_ns3__ArrayOfFECAEASinMov(
	struct soap *soap)
{
	ns3__ArrayOfFECAEASinMov *_p = afip::soap_new_ns3__ArrayOfFECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfFECAEASinMov * soap_new_set_ns3__ArrayOfFECAEASinMov(
	struct soap *soap,
	const std::vector<ns3__FECAEASinMov *> & FECAEASinMov)
{
	ns3__ArrayOfFECAEASinMov *_p = afip::soap_new_ns3__ArrayOfFECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfFECAEASinMov::FECAEASinMov = FECAEASinMov;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfFECAEASinMov(struct soap *soap, ns3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, ns3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, ns3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, ns3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfFECAEASinMov * SOAP_FMAC4 soap_get_ns3__ArrayOfFECAEASinMov(struct soap*, ns3__ArrayOfFECAEASinMov *, const char*, const char*);

inline int soap_read_ns3__ArrayOfFECAEASinMov(struct soap *soap, ns3__ArrayOfFECAEASinMov *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfFECAEASinMov(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, ns3__ArrayOfFECAEASinMov *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfFECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfFECAEASinMov(struct soap *soap, ns3__ArrayOfFECAEASinMov *p)
{
	if (afip::soap_read_ns3__ArrayOfFECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEASinMovConsResponse(struct soap*, const char*, int, const ns3__FECAEASinMovConsResponse *, const char*);
SOAP_FMAC3 ns3__FECAEASinMovConsResponse * SOAP_FMAC4 soap_in_ns3__FECAEASinMovConsResponse(struct soap*, const char*, ns3__FECAEASinMovConsResponse *, const char*);
SOAP_FMAC1 ns3__FECAEASinMovConsResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEASinMovConsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEASinMovConsResponse * soap_new_ns3__FECAEASinMovConsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEASinMovConsResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEASinMovConsResponse * soap_new_req_ns3__FECAEASinMovConsResponse(
	struct soap *soap)
{
	ns3__FECAEASinMovConsResponse *_p = afip::soap_new_ns3__FECAEASinMovConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECAEASinMovConsResponse * soap_new_set_ns3__FECAEASinMovConsResponse(
	struct soap *soap,
	ns3__ArrayOfFECAEASinMov *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FECAEASinMovConsResponse *_p = afip::soap_new_ns3__FECAEASinMovConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEASinMovConsResponse::ResultGet = ResultGet;
		_p->ns3__FECAEASinMovConsResponse::Errors = Errors;
		_p->ns3__FECAEASinMovConsResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FECAEASinMovConsResponse(struct soap *soap, ns3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEASinMovConsResponse * SOAP_FMAC4 soap_get_ns3__FECAEASinMovConsResponse(struct soap*, ns3__FECAEASinMovConsResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEASinMovConsResponse(struct soap *soap, ns3__FECAEASinMovConsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEASinMovConsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, ns3__FECAEASinMovConsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEASinMovConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEASinMovConsResponse(struct soap *soap, ns3__FECAEASinMovConsResponse *p)
{
	if (afip::soap_read_ns3__FECAEASinMovConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEAGet_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEAGet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEAGet(struct soap*, const char*, int, const ns3__FECAEAGet *, const char*);
SOAP_FMAC3 ns3__FECAEAGet * SOAP_FMAC4 soap_in_ns3__FECAEAGet(struct soap*, const char*, ns3__FECAEAGet *, const char*);
SOAP_FMAC1 ns3__FECAEAGet * SOAP_FMAC2 soap_instantiate_ns3__FECAEAGet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEAGet * soap_new_ns3__FECAEAGet(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEAGet(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEAGet * soap_new_req_ns3__FECAEAGet(
	struct soap *soap,
	int Periodo,
	short Orden)
{
	ns3__FECAEAGet *_p = afip::soap_new_ns3__FECAEAGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEAGet::Periodo = Periodo;
		_p->ns3__FECAEAGet::Orden = Orden;
	}
	return _p;
}

inline ns3__FECAEAGet * soap_new_set_ns3__FECAEAGet(
	struct soap *soap,
	std::string *CAEA,
	int Periodo,
	short Orden,
	std::string *FchVigDesde,
	std::string *FchVigHasta,
	std::string *FchTopeInf,
	std::string *FchProceso,
	ns3__ArrayOfObs *Observaciones)
{
	ns3__FECAEAGet *_p = afip::soap_new_ns3__FECAEAGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEAGet::CAEA = CAEA;
		_p->ns3__FECAEAGet::Periodo = Periodo;
		_p->ns3__FECAEAGet::Orden = Orden;
		_p->ns3__FECAEAGet::FchVigDesde = FchVigDesde;
		_p->ns3__FECAEAGet::FchVigHasta = FchVigHasta;
		_p->ns3__FECAEAGet::FchTopeInf = FchTopeInf;
		_p->ns3__FECAEAGet::FchProceso = FchProceso;
		_p->ns3__FECAEAGet::Observaciones = Observaciones;
	}
	return _p;
}

inline int soap_write_ns3__FECAEAGet(struct soap *soap, ns3__FECAEAGet const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEAGet(struct soap *soap, const char *URL, ns3__FECAEAGet const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEAGet(struct soap *soap, const char *URL, ns3__FECAEAGet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEAGet(struct soap *soap, const char *URL, ns3__FECAEAGet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEAGet * SOAP_FMAC4 soap_get_ns3__FECAEAGet(struct soap*, ns3__FECAEAGet *, const char*, const char*);

inline int soap_read_ns3__FECAEAGet(struct soap *soap, ns3__FECAEAGet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEAGet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEAGet(struct soap *soap, const char *URL, ns3__FECAEAGet *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEAGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEAGet(struct soap *soap, ns3__FECAEAGet *p)
{
	if (afip::soap_read_ns3__FECAEAGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEAGetResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEAGetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEAGetResponse(struct soap*, const char*, int, const ns3__FECAEAGetResponse *, const char*);
SOAP_FMAC3 ns3__FECAEAGetResponse * SOAP_FMAC4 soap_in_ns3__FECAEAGetResponse(struct soap*, const char*, ns3__FECAEAGetResponse *, const char*);
SOAP_FMAC1 ns3__FECAEAGetResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEAGetResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEAGetResponse * soap_new_ns3__FECAEAGetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEAGetResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEAGetResponse * soap_new_req_ns3__FECAEAGetResponse(
	struct soap *soap)
{
	ns3__FECAEAGetResponse *_p = afip::soap_new_ns3__FECAEAGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECAEAGetResponse * soap_new_set_ns3__FECAEAGetResponse(
	struct soap *soap,
	ns3__FECAEAGet *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FECAEAGetResponse *_p = afip::soap_new_ns3__FECAEAGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEAGetResponse::ResultGet = ResultGet;
		_p->ns3__FECAEAGetResponse::Errors = Errors;
		_p->ns3__FECAEAGetResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FECAEAGetResponse(struct soap *soap, ns3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEAGetResponse(struct soap *soap, const char *URL, ns3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEAGetResponse(struct soap *soap, const char *URL, ns3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEAGetResponse(struct soap *soap, const char *URL, ns3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEAGetResponse * SOAP_FMAC4 soap_get_ns3__FECAEAGetResponse(struct soap*, ns3__FECAEAGetResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEAGetResponse(struct soap *soap, ns3__FECAEAGetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEAGetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEAGetResponse(struct soap *soap, const char *URL, ns3__FECAEAGetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEAGetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEAGetResponse(struct soap *soap, ns3__FECAEAGetResponse *p)
{
	if (afip::soap_read_ns3__FECAEAGetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEADetResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEADetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEADetResponse(struct soap*, const char*, int, const ns3__FECAEADetResponse *, const char*);
SOAP_FMAC3 ns3__FECAEADetResponse * SOAP_FMAC4 soap_in_ns3__FECAEADetResponse(struct soap*, const char*, ns3__FECAEADetResponse *, const char*);
SOAP_FMAC1 ns3__FECAEADetResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEADetResponse * soap_new_ns3__FECAEADetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEADetResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEADetResponse * soap_new_req_ns3__FECAEADetResponse(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1)
{
	ns3__FECAEADetResponse *_p = afip::soap_new_ns3__FECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetResponse::Concepto = Concepto__1;
		_p->ns3__FEDetResponse::DocTipo = DocTipo__1;
		_p->ns3__FEDetResponse::DocNro = DocNro__1;
		_p->ns3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetResponse::CbteHasta = CbteHasta__1;
	}
	return _p;
}

inline ns3__FECAEADetResponse * soap_new_set_ns3__FECAEADetResponse(
	struct soap *soap,
	std::string *CAEA,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	std::string *Resultado__1,
	ns3__ArrayOfObs *Observaciones__1)
{
	ns3__FECAEADetResponse *_p = afip::soap_new_ns3__FECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEADetResponse::CAEA = CAEA;
		_p->ns3__FEDetResponse::Concepto = Concepto__1;
		_p->ns3__FEDetResponse::DocTipo = DocTipo__1;
		_p->ns3__FEDetResponse::DocNro = DocNro__1;
		_p->ns3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetResponse::CbteHasta = CbteHasta__1;
		_p->ns3__FEDetResponse::CbteFch = CbteFch__1;
		_p->ns3__FEDetResponse::Resultado = Resultado__1;
		_p->ns3__FEDetResponse::Observaciones = Observaciones__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAEADetResponse(struct soap *soap, ns3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEADetResponse(struct soap *soap, const char *URL, ns3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEADetResponse(struct soap *soap, const char *URL, ns3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEADetResponse(struct soap *soap, const char *URL, ns3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEADetResponse * SOAP_FMAC4 soap_get_ns3__FECAEADetResponse(struct soap*, ns3__FECAEADetResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEADetResponse(struct soap *soap, ns3__FECAEADetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEADetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEADetResponse(struct soap *soap, const char *URL, ns3__FECAEADetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEADetResponse(struct soap *soap, ns3__FECAEADetResponse *p)
{
	if (afip::soap_read_ns3__FECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfFECAEADetResponse(struct soap*, const char*, int, const ns3__ArrayOfFECAEADetResponse *, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEADetResponse * SOAP_FMAC4 soap_in_ns3__ArrayOfFECAEADetResponse(struct soap*, const char*, ns3__ArrayOfFECAEADetResponse *, const char*);
SOAP_FMAC1 ns3__ArrayOfFECAEADetResponse * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfFECAEADetResponse * soap_new_ns3__ArrayOfFECAEADetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfFECAEADetResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfFECAEADetResponse * soap_new_req_ns3__ArrayOfFECAEADetResponse(
	struct soap *soap)
{
	ns3__ArrayOfFECAEADetResponse *_p = afip::soap_new_ns3__ArrayOfFECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfFECAEADetResponse * soap_new_set_ns3__ArrayOfFECAEADetResponse(
	struct soap *soap,
	const std::vector<ns3__FECAEADetResponse *> & FECAEADetResponse)
{
	ns3__ArrayOfFECAEADetResponse *_p = afip::soap_new_ns3__ArrayOfFECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfFECAEADetResponse::FECAEADetResponse = FECAEADetResponse;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfFECAEADetResponse(struct soap *soap, ns3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfFECAEADetResponse * SOAP_FMAC4 soap_get_ns3__ArrayOfFECAEADetResponse(struct soap*, ns3__ArrayOfFECAEADetResponse *, const char*, const char*);

inline int soap_read_ns3__ArrayOfFECAEADetResponse(struct soap *soap, ns3__ArrayOfFECAEADetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfFECAEADetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfFECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfFECAEADetResponse(struct soap *soap, ns3__ArrayOfFECAEADetResponse *p)
{
	if (afip::soap_read_ns3__ArrayOfFECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEACabResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEACabResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEACabResponse(struct soap*, const char*, int, const ns3__FECAEACabResponse *, const char*);
SOAP_FMAC3 ns3__FECAEACabResponse * SOAP_FMAC4 soap_in_ns3__FECAEACabResponse(struct soap*, const char*, ns3__FECAEACabResponse *, const char*);
SOAP_FMAC1 ns3__FECAEACabResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEACabResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEACabResponse * soap_new_ns3__FECAEACabResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEACabResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEACabResponse * soap_new_req_ns3__FECAEACabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	int CantReg__1)
{
	ns3__FECAEACabResponse *_p = afip::soap_new_ns3__FECAEACabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabResponse::Cuit = Cuit__1;
		_p->ns3__FECabResponse::PtoVta = PtoVta__1;
		_p->ns3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->ns3__FECabResponse::CantReg = CantReg__1;
	}
	return _p;
}

inline ns3__FECAEACabResponse * soap_new_set_ns3__FECAEACabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	std::string *FchProceso__1,
	int CantReg__1,
	std::string *Resultado__1,
	std::string *Reproceso__1)
{
	ns3__FECAEACabResponse *_p = afip::soap_new_ns3__FECAEACabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabResponse::Cuit = Cuit__1;
		_p->ns3__FECabResponse::PtoVta = PtoVta__1;
		_p->ns3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->ns3__FECabResponse::FchProceso = FchProceso__1;
		_p->ns3__FECabResponse::CantReg = CantReg__1;
		_p->ns3__FECabResponse::Resultado = Resultado__1;
		_p->ns3__FECabResponse::Reproceso = Reproceso__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAEACabResponse(struct soap *soap, ns3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEACabResponse(struct soap *soap, const char *URL, ns3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEACabResponse(struct soap *soap, const char *URL, ns3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEACabResponse(struct soap *soap, const char *URL, ns3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEACabResponse * SOAP_FMAC4 soap_get_ns3__FECAEACabResponse(struct soap*, ns3__FECAEACabResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEACabResponse(struct soap *soap, ns3__FECAEACabResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEACabResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEACabResponse(struct soap *soap, const char *URL, ns3__FECAEACabResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEACabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEACabResponse(struct soap *soap, ns3__FECAEACabResponse *p)
{
	if (afip::soap_read_ns3__FECAEACabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEAResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEAResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEAResponse(struct soap*, const char*, int, const ns3__FECAEAResponse *, const char*);
SOAP_FMAC3 ns3__FECAEAResponse * SOAP_FMAC4 soap_in_ns3__FECAEAResponse(struct soap*, const char*, ns3__FECAEAResponse *, const char*);
SOAP_FMAC1 ns3__FECAEAResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEAResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEAResponse * soap_new_ns3__FECAEAResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEAResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEAResponse * soap_new_req_ns3__FECAEAResponse(
	struct soap *soap)
{
	ns3__FECAEAResponse *_p = afip::soap_new_ns3__FECAEAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECAEAResponse * soap_new_set_ns3__FECAEAResponse(
	struct soap *soap,
	ns3__FECAEACabResponse *FeCabResp,
	ns3__ArrayOfFECAEADetResponse *FeDetResp,
	ns3__ArrayOfEvt *Events,
	ns3__ArrayOfErr *Errors)
{
	ns3__FECAEAResponse *_p = afip::soap_new_ns3__FECAEAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEAResponse::FeCabResp = FeCabResp;
		_p->ns3__FECAEAResponse::FeDetResp = FeDetResp;
		_p->ns3__FECAEAResponse::Events = Events;
		_p->ns3__FECAEAResponse::Errors = Errors;
	}
	return _p;
}

inline int soap_write_ns3__FECAEAResponse(struct soap *soap, ns3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEAResponse(struct soap *soap, const char *URL, ns3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEAResponse(struct soap *soap, const char *URL, ns3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEAResponse(struct soap *soap, const char *URL, ns3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEAResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEAResponse * SOAP_FMAC4 soap_get_ns3__FECAEAResponse(struct soap*, ns3__FECAEAResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEAResponse(struct soap *soap, ns3__FECAEAResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEAResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEAResponse(struct soap *soap, const char *URL, ns3__FECAEAResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEAResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEAResponse(struct soap *soap, ns3__FECAEAResponse *p)
{
	if (afip::soap_read_ns3__FECAEAResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEADetRequest_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEADetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEADetRequest(struct soap*, const char*, int, const ns3__FECAEADetRequest *, const char*);
SOAP_FMAC3 ns3__FECAEADetRequest * SOAP_FMAC4 soap_in_ns3__FECAEADetRequest(struct soap*, const char*, ns3__FECAEADetRequest *, const char*);
SOAP_FMAC1 ns3__FECAEADetRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEADetRequest * soap_new_ns3__FECAEADetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEADetRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEADetRequest * soap_new_req_ns3__FECAEADetRequest(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	double MonCotiz__1)
{
	ns3__FECAEADetRequest *_p = afip::soap_new_ns3__FECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetRequest::Concepto = Concepto__1;
		_p->ns3__FEDetRequest::DocTipo = DocTipo__1;
		_p->ns3__FEDetRequest::DocNro = DocNro__1;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz__1;
	}
	return _p;
}

inline ns3__FECAEADetRequest * soap_new_set_ns3__FECAEADetRequest(
	struct soap *soap,
	std::string *CAEA,
	std::string *CbteFchHsGen,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	std::string *FchServDesde__1,
	std::string *FchServHasta__1,
	std::string *FchVtoPago__1,
	std::string *MonId__1,
	double MonCotiz__1,
	ns3__ArrayOfCbteAsoc *CbtesAsoc__1,
	ns3__ArrayOfTributo *Tributos__1,
	ns3__ArrayOfAlicIva *Iva__1,
	ns3__ArrayOfOpcional *Opcionales__1,
	ns3__ArrayOfComprador *Compradores__1)
{
	ns3__FECAEADetRequest *_p = afip::soap_new_ns3__FECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEADetRequest::CAEA = CAEA;
		_p->ns3__FECAEADetRequest::CbteFchHsGen = CbteFchHsGen;
		_p->ns3__FEDetRequest::Concepto = Concepto__1;
		_p->ns3__FEDetRequest::DocTipo = DocTipo__1;
		_p->ns3__FEDetRequest::DocNro = DocNro__1;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->ns3__FEDetRequest::CbteFch = CbteFch__1;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->ns3__FEDetRequest::FchServDesde = FchServDesde__1;
		_p->ns3__FEDetRequest::FchServHasta = FchServHasta__1;
		_p->ns3__FEDetRequest::FchVtoPago = FchVtoPago__1;
		_p->ns3__FEDetRequest::MonId = MonId__1;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz__1;
		_p->ns3__FEDetRequest::CbtesAsoc = CbtesAsoc__1;
		_p->ns3__FEDetRequest::Tributos = Tributos__1;
		_p->ns3__FEDetRequest::Iva = Iva__1;
		_p->ns3__FEDetRequest::Opcionales = Opcionales__1;
		_p->ns3__FEDetRequest::Compradores = Compradores__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAEADetRequest(struct soap *soap, ns3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEADetRequest(struct soap *soap, const char *URL, ns3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEADetRequest(struct soap *soap, const char *URL, ns3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEADetRequest(struct soap *soap, const char *URL, ns3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEADetRequest * SOAP_FMAC4 soap_get_ns3__FECAEADetRequest(struct soap*, ns3__FECAEADetRequest *, const char*, const char*);

inline int soap_read_ns3__FECAEADetRequest(struct soap *soap, ns3__FECAEADetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEADetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEADetRequest(struct soap *soap, const char *URL, ns3__FECAEADetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEADetRequest(struct soap *soap, ns3__FECAEADetRequest *p)
{
	if (afip::soap_read_ns3__FECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfFECAEADetRequest(struct soap*, const char*, int, const ns3__ArrayOfFECAEADetRequest *, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEADetRequest * SOAP_FMAC4 soap_in_ns3__ArrayOfFECAEADetRequest(struct soap*, const char*, ns3__ArrayOfFECAEADetRequest *, const char*);
SOAP_FMAC1 ns3__ArrayOfFECAEADetRequest * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfFECAEADetRequest * soap_new_ns3__ArrayOfFECAEADetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfFECAEADetRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfFECAEADetRequest * soap_new_req_ns3__ArrayOfFECAEADetRequest(
	struct soap *soap)
{
	ns3__ArrayOfFECAEADetRequest *_p = afip::soap_new_ns3__ArrayOfFECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfFECAEADetRequest * soap_new_set_ns3__ArrayOfFECAEADetRequest(
	struct soap *soap,
	const std::vector<ns3__FECAEADetRequest *> & FECAEADetRequest)
{
	ns3__ArrayOfFECAEADetRequest *_p = afip::soap_new_ns3__ArrayOfFECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfFECAEADetRequest::FECAEADetRequest = FECAEADetRequest;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfFECAEADetRequest(struct soap *soap, ns3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfFECAEADetRequest * SOAP_FMAC4 soap_get_ns3__ArrayOfFECAEADetRequest(struct soap*, ns3__ArrayOfFECAEADetRequest *, const char*, const char*);

inline int soap_read_ns3__ArrayOfFECAEADetRequest(struct soap *soap, ns3__ArrayOfFECAEADetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfFECAEADetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEADetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfFECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfFECAEADetRequest(struct soap *soap, ns3__ArrayOfFECAEADetRequest *p)
{
	if (afip::soap_read_ns3__ArrayOfFECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEACabRequest_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEACabRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEACabRequest(struct soap*, const char*, int, const ns3__FECAEACabRequest *, const char*);
SOAP_FMAC3 ns3__FECAEACabRequest * SOAP_FMAC4 soap_in_ns3__FECAEACabRequest(struct soap*, const char*, ns3__FECAEACabRequest *, const char*);
SOAP_FMAC1 ns3__FECAEACabRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEACabRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEACabRequest * soap_new_ns3__FECAEACabRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEACabRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEACabRequest * soap_new_req_ns3__FECAEACabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	ns3__FECAEACabRequest *_p = afip::soap_new_ns3__FECAEACabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabRequest::CantReg = CantReg__1;
		_p->ns3__FECabRequest::PtoVta = PtoVta__1;
		_p->ns3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline ns3__FECAEACabRequest * soap_new_set_ns3__FECAEACabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	ns3__FECAEACabRequest *_p = afip::soap_new_ns3__FECAEACabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabRequest::CantReg = CantReg__1;
		_p->ns3__FECabRequest::PtoVta = PtoVta__1;
		_p->ns3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAEACabRequest(struct soap *soap, ns3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEACabRequest(struct soap *soap, const char *URL, ns3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEACabRequest(struct soap *soap, const char *URL, ns3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEACabRequest(struct soap *soap, const char *URL, ns3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEACabRequest * SOAP_FMAC4 soap_get_ns3__FECAEACabRequest(struct soap*, ns3__FECAEACabRequest *, const char*, const char*);

inline int soap_read_ns3__FECAEACabRequest(struct soap *soap, ns3__FECAEACabRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEACabRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEACabRequest(struct soap *soap, const char *URL, ns3__FECAEACabRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEACabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEACabRequest(struct soap *soap, ns3__FECAEACabRequest *p)
{
	if (afip::soap_read_ns3__FECAEACabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEARequest_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEARequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEARequest(struct soap*, const char*, int, const ns3__FECAEARequest *, const char*);
SOAP_FMAC3 ns3__FECAEARequest * SOAP_FMAC4 soap_in_ns3__FECAEARequest(struct soap*, const char*, ns3__FECAEARequest *, const char*);
SOAP_FMAC1 ns3__FECAEARequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEARequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEARequest * soap_new_ns3__FECAEARequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEARequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEARequest * soap_new_req_ns3__FECAEARequest(
	struct soap *soap)
{
	ns3__FECAEARequest *_p = afip::soap_new_ns3__FECAEARequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECAEARequest * soap_new_set_ns3__FECAEARequest(
	struct soap *soap,
	ns3__FECAEACabRequest *FeCabReq,
	ns3__ArrayOfFECAEADetRequest *FeDetReq)
{
	ns3__FECAEARequest *_p = afip::soap_new_ns3__FECAEARequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEARequest::FeCabReq = FeCabReq;
		_p->ns3__FECAEARequest::FeDetReq = FeDetReq;
	}
	return _p;
}

inline int soap_write_ns3__FECAEARequest(struct soap *soap, ns3__FECAEARequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEARequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEARequest(struct soap *soap, const char *URL, ns3__FECAEARequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEARequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEARequest(struct soap *soap, const char *URL, ns3__FECAEARequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEARequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEARequest(struct soap *soap, const char *URL, ns3__FECAEARequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEARequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEARequest * SOAP_FMAC4 soap_get_ns3__FECAEARequest(struct soap*, ns3__FECAEARequest *, const char*, const char*);

inline int soap_read_ns3__FECAEARequest(struct soap *soap, ns3__FECAEARequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEARequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEARequest(struct soap *soap, const char *URL, ns3__FECAEARequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEARequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEARequest(struct soap *soap, ns3__FECAEARequest *p)
{
	if (afip::soap_read_ns3__FECAEARequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECompConsResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECompConsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECompConsResponse(struct soap*, const char*, int, const ns3__FECompConsResponse *, const char*);
SOAP_FMAC3 ns3__FECompConsResponse * SOAP_FMAC4 soap_in_ns3__FECompConsResponse(struct soap*, const char*, ns3__FECompConsResponse *, const char*);
SOAP_FMAC1 ns3__FECompConsResponse * SOAP_FMAC2 soap_instantiate_ns3__FECompConsResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECompConsResponse * soap_new_ns3__FECompConsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECompConsResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECompConsResponse * soap_new_req_ns3__FECompConsResponse(
	struct soap *soap,
	int PtoVta,
	int CbteTipo,
	int Concepto__2,
	int DocTipo__2,
	LONG64 DocNro__2,
	LONG64 CbteDesde__2,
	LONG64 CbteHasta__2,
	double ImpTotal__2,
	double ImpTotConc__2,
	double ImpNeto__2,
	double ImpOpEx__2,
	double ImpTrib__2,
	double ImpIVA__2,
	double MonCotiz__2)
{
	ns3__FECompConsResponse *_p = afip::soap_new_ns3__FECompConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECompConsResponse::PtoVta = PtoVta;
		_p->ns3__FECompConsResponse::CbteTipo = CbteTipo;
		_p->ns3__FEDetRequest::Concepto = Concepto__2;
		_p->ns3__FEDetRequest::DocTipo = DocTipo__2;
		_p->ns3__FEDetRequest::DocNro = DocNro__2;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde__2;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta__2;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal__2;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc__2;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto__2;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx__2;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib__2;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA__2;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz__2;
	}
	return _p;
}

inline ns3__FECompConsResponse * soap_new_set_ns3__FECompConsResponse(
	struct soap *soap,
	std::string *Resultado,
	std::string *CodAutorizacion,
	std::string *EmisionTipo,
	std::string *FchVto,
	std::string *FchProceso,
	ns3__ArrayOfObs *Observaciones,
	int PtoVta,
	int CbteTipo,
	int Concepto__2,
	int DocTipo__2,
	LONG64 DocNro__2,
	LONG64 CbteDesde__2,
	LONG64 CbteHasta__2,
	std::string *CbteFch__2,
	double ImpTotal__2,
	double ImpTotConc__2,
	double ImpNeto__2,
	double ImpOpEx__2,
	double ImpTrib__2,
	double ImpIVA__2,
	std::string *FchServDesde__2,
	std::string *FchServHasta__2,
	std::string *FchVtoPago__2,
	std::string *MonId__2,
	double MonCotiz__2,
	ns3__ArrayOfCbteAsoc *CbtesAsoc__2,
	ns3__ArrayOfTributo *Tributos__2,
	ns3__ArrayOfAlicIva *Iva__2,
	ns3__ArrayOfOpcional *Opcionales__2,
	ns3__ArrayOfComprador *Compradores__2)
{
	ns3__FECompConsResponse *_p = afip::soap_new_ns3__FECompConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECompConsResponse::Resultado = Resultado;
		_p->ns3__FECompConsResponse::CodAutorizacion = CodAutorizacion;
		_p->ns3__FECompConsResponse::EmisionTipo = EmisionTipo;
		_p->ns3__FECompConsResponse::FchVto = FchVto;
		_p->ns3__FECompConsResponse::FchProceso = FchProceso;
		_p->ns3__FECompConsResponse::Observaciones = Observaciones;
		_p->ns3__FECompConsResponse::PtoVta = PtoVta;
		_p->ns3__FECompConsResponse::CbteTipo = CbteTipo;
		_p->ns3__FEDetRequest::Concepto = Concepto__2;
		_p->ns3__FEDetRequest::DocTipo = DocTipo__2;
		_p->ns3__FEDetRequest::DocNro = DocNro__2;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde__2;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta__2;
		_p->ns3__FEDetRequest::CbteFch = CbteFch__2;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal__2;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc__2;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto__2;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx__2;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib__2;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA__2;
		_p->ns3__FEDetRequest::FchServDesde = FchServDesde__2;
		_p->ns3__FEDetRequest::FchServHasta = FchServHasta__2;
		_p->ns3__FEDetRequest::FchVtoPago = FchVtoPago__2;
		_p->ns3__FEDetRequest::MonId = MonId__2;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz__2;
		_p->ns3__FEDetRequest::CbtesAsoc = CbtesAsoc__2;
		_p->ns3__FEDetRequest::Tributos = Tributos__2;
		_p->ns3__FEDetRequest::Iva = Iva__2;
		_p->ns3__FEDetRequest::Opcionales = Opcionales__2;
		_p->ns3__FEDetRequest::Compradores = Compradores__2;
	}
	return _p;
}

inline int soap_write_ns3__FECompConsResponse(struct soap *soap, ns3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECompConsResponse(struct soap *soap, const char *URL, ns3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECompConsResponse(struct soap *soap, const char *URL, ns3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECompConsResponse(struct soap *soap, const char *URL, ns3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECompConsResponse * SOAP_FMAC4 soap_get_ns3__FECompConsResponse(struct soap*, ns3__FECompConsResponse *, const char*, const char*);

inline int soap_read_ns3__FECompConsResponse(struct soap *soap, ns3__FECompConsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECompConsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECompConsResponse(struct soap *soap, const char *URL, ns3__FECompConsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECompConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECompConsResponse(struct soap *soap, ns3__FECompConsResponse *p)
{
	if (afip::soap_read_ns3__FECompConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECompConsultaResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECompConsultaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECompConsultaResponse(struct soap*, const char*, int, const ns3__FECompConsultaResponse *, const char*);
SOAP_FMAC3 ns3__FECompConsultaResponse * SOAP_FMAC4 soap_in_ns3__FECompConsultaResponse(struct soap*, const char*, ns3__FECompConsultaResponse *, const char*);
SOAP_FMAC1 ns3__FECompConsultaResponse * SOAP_FMAC2 soap_instantiate_ns3__FECompConsultaResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECompConsultaResponse * soap_new_ns3__FECompConsultaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECompConsultaResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECompConsultaResponse * soap_new_req_ns3__FECompConsultaResponse(
	struct soap *soap)
{
	ns3__FECompConsultaResponse *_p = afip::soap_new_ns3__FECompConsultaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECompConsultaResponse * soap_new_set_ns3__FECompConsultaResponse(
	struct soap *soap,
	ns3__FECompConsResponse *ResultGet,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FECompConsultaResponse *_p = afip::soap_new_ns3__FECompConsultaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECompConsultaResponse::ResultGet = ResultGet;
		_p->ns3__FECompConsultaResponse::Errors = Errors;
		_p->ns3__FECompConsultaResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FECompConsultaResponse(struct soap *soap, ns3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECompConsultaResponse(struct soap *soap, const char *URL, ns3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECompConsultaResponse(struct soap *soap, const char *URL, ns3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECompConsultaResponse(struct soap *soap, const char *URL, ns3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECompConsultaResponse * SOAP_FMAC4 soap_get_ns3__FECompConsultaResponse(struct soap*, ns3__FECompConsultaResponse *, const char*, const char*);

inline int soap_read_ns3__FECompConsultaResponse(struct soap *soap, ns3__FECompConsultaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECompConsultaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECompConsultaResponse(struct soap *soap, const char *URL, ns3__FECompConsultaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECompConsultaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECompConsultaResponse(struct soap *soap, ns3__FECompConsultaResponse *p)
{
	if (afip::soap_read_ns3__FECompConsultaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECompConsultaReq_DEFINED
#define SOAP_TYPE_afip_ns3__FECompConsultaReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECompConsultaReq(struct soap*, const char*, int, const ns3__FECompConsultaReq *, const char*);
SOAP_FMAC3 ns3__FECompConsultaReq * SOAP_FMAC4 soap_in_ns3__FECompConsultaReq(struct soap*, const char*, ns3__FECompConsultaReq *, const char*);
SOAP_FMAC1 ns3__FECompConsultaReq * SOAP_FMAC2 soap_instantiate_ns3__FECompConsultaReq(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECompConsultaReq * soap_new_ns3__FECompConsultaReq(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECompConsultaReq(soap, n, NULL, NULL, NULL);
}

inline ns3__FECompConsultaReq * soap_new_req_ns3__FECompConsultaReq(
	struct soap *soap,
	int CbteTipo,
	LONG64 CbteNro,
	int PtoVta)
{
	ns3__FECompConsultaReq *_p = afip::soap_new_ns3__FECompConsultaReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECompConsultaReq::CbteTipo = CbteTipo;
		_p->ns3__FECompConsultaReq::CbteNro = CbteNro;
		_p->ns3__FECompConsultaReq::PtoVta = PtoVta;
	}
	return _p;
}

inline ns3__FECompConsultaReq * soap_new_set_ns3__FECompConsultaReq(
	struct soap *soap,
	int CbteTipo,
	LONG64 CbteNro,
	int PtoVta)
{
	ns3__FECompConsultaReq *_p = afip::soap_new_ns3__FECompConsultaReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECompConsultaReq::CbteTipo = CbteTipo;
		_p->ns3__FECompConsultaReq::CbteNro = CbteNro;
		_p->ns3__FECompConsultaReq::PtoVta = PtoVta;
	}
	return _p;
}

inline int soap_write_ns3__FECompConsultaReq(struct soap *soap, ns3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECompConsultaReq(struct soap *soap, const char *URL, ns3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECompConsultaReq(struct soap *soap, const char *URL, ns3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECompConsultaReq(struct soap *soap, const char *URL, ns3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip_ns3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECompConsultaReq * SOAP_FMAC4 soap_get_ns3__FECompConsultaReq(struct soap*, ns3__FECompConsultaReq *, const char*, const char*);

inline int soap_read_ns3__FECompConsultaReq(struct soap *soap, ns3__FECompConsultaReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECompConsultaReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECompConsultaReq(struct soap *soap, const char *URL, ns3__FECompConsultaReq *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECompConsultaReq(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECompConsultaReq(struct soap *soap, ns3__FECompConsultaReq *p)
{
	if (afip::soap_read_ns3__FECompConsultaReq(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FERecuperaLastCbteResponse(struct soap*, const char*, int, const ns3__FERecuperaLastCbteResponse *, const char*);
SOAP_FMAC3 ns3__FERecuperaLastCbteResponse * SOAP_FMAC4 soap_in_ns3__FERecuperaLastCbteResponse(struct soap*, const char*, ns3__FERecuperaLastCbteResponse *, const char*);
SOAP_FMAC1 ns3__FERecuperaLastCbteResponse * SOAP_FMAC2 soap_instantiate_ns3__FERecuperaLastCbteResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FERecuperaLastCbteResponse * soap_new_ns3__FERecuperaLastCbteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FERecuperaLastCbteResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FERecuperaLastCbteResponse * soap_new_req_ns3__FERecuperaLastCbteResponse(
	struct soap *soap,
	int PtoVta,
	int CbteTipo,
	int CbteNro)
{
	ns3__FERecuperaLastCbteResponse *_p = afip::soap_new_ns3__FERecuperaLastCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FERecuperaLastCbteResponse::PtoVta = PtoVta;
		_p->ns3__FERecuperaLastCbteResponse::CbteTipo = CbteTipo;
		_p->ns3__FERecuperaLastCbteResponse::CbteNro = CbteNro;
	}
	return _p;
}

inline ns3__FERecuperaLastCbteResponse * soap_new_set_ns3__FERecuperaLastCbteResponse(
	struct soap *soap,
	int PtoVta,
	int CbteTipo,
	int CbteNro,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FERecuperaLastCbteResponse *_p = afip::soap_new_ns3__FERecuperaLastCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FERecuperaLastCbteResponse::PtoVta = PtoVta;
		_p->ns3__FERecuperaLastCbteResponse::CbteTipo = CbteTipo;
		_p->ns3__FERecuperaLastCbteResponse::CbteNro = CbteNro;
		_p->ns3__FERecuperaLastCbteResponse::Errors = Errors;
		_p->ns3__FERecuperaLastCbteResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FERecuperaLastCbteResponse(struct soap *soap, ns3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, ns3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, ns3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, ns3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FERecuperaLastCbteResponse * SOAP_FMAC4 soap_get_ns3__FERecuperaLastCbteResponse(struct soap*, ns3__FERecuperaLastCbteResponse *, const char*, const char*);

inline int soap_read_ns3__FERecuperaLastCbteResponse(struct soap *soap, ns3__FERecuperaLastCbteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FERecuperaLastCbteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, ns3__FERecuperaLastCbteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FERecuperaLastCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FERecuperaLastCbteResponse(struct soap *soap, ns3__FERecuperaLastCbteResponse *p)
{
	if (afip::soap_read_ns3__FERecuperaLastCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__DummyResponse_DEFINED
#define SOAP_TYPE_afip_ns3__DummyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__DummyResponse(struct soap*, const char*, int, const ns3__DummyResponse *, const char*);
SOAP_FMAC3 ns3__DummyResponse * SOAP_FMAC4 soap_in_ns3__DummyResponse(struct soap*, const char*, ns3__DummyResponse *, const char*);
SOAP_FMAC1 ns3__DummyResponse * SOAP_FMAC2 soap_instantiate_ns3__DummyResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__DummyResponse * soap_new_ns3__DummyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__DummyResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__DummyResponse * soap_new_req_ns3__DummyResponse(
	struct soap *soap)
{
	ns3__DummyResponse *_p = afip::soap_new_ns3__DummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__DummyResponse * soap_new_set_ns3__DummyResponse(
	struct soap *soap,
	std::string *AppServer,
	std::string *DbServer,
	std::string *AuthServer)
{
	ns3__DummyResponse *_p = afip::soap_new_ns3__DummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__DummyResponse::AppServer = AppServer;
		_p->ns3__DummyResponse::DbServer = DbServer;
		_p->ns3__DummyResponse::AuthServer = AuthServer;
	}
	return _p;
}

inline int soap_write_ns3__DummyResponse(struct soap *soap, ns3__DummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DummyResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__DummyResponse(struct soap *soap, const char *URL, ns3__DummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DummyResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__DummyResponse(struct soap *soap, const char *URL, ns3__DummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DummyResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__DummyResponse(struct soap *soap, const char *URL, ns3__DummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:DummyResponse", p->soap_type() == SOAP_TYPE_afip_ns3__DummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__DummyResponse * SOAP_FMAC4 soap_get_ns3__DummyResponse(struct soap*, ns3__DummyResponse *, const char*, const char*);

inline int soap_read_ns3__DummyResponse(struct soap *soap, ns3__DummyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__DummyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__DummyResponse(struct soap *soap, const char *URL, ns3__DummyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__DummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__DummyResponse(struct soap *soap, ns3__DummyResponse *p)
{
	if (afip::soap_read_ns3__DummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FERegXReqResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FERegXReqResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FERegXReqResponse(struct soap*, const char*, int, const ns3__FERegXReqResponse *, const char*);
SOAP_FMAC3 ns3__FERegXReqResponse * SOAP_FMAC4 soap_in_ns3__FERegXReqResponse(struct soap*, const char*, ns3__FERegXReqResponse *, const char*);
SOAP_FMAC1 ns3__FERegXReqResponse * SOAP_FMAC2 soap_instantiate_ns3__FERegXReqResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FERegXReqResponse * soap_new_ns3__FERegXReqResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FERegXReqResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FERegXReqResponse * soap_new_req_ns3__FERegXReqResponse(
	struct soap *soap,
	int RegXReq)
{
	ns3__FERegXReqResponse *_p = afip::soap_new_ns3__FERegXReqResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FERegXReqResponse::RegXReq = RegXReq;
	}
	return _p;
}

inline ns3__FERegXReqResponse * soap_new_set_ns3__FERegXReqResponse(
	struct soap *soap,
	int RegXReq,
	ns3__ArrayOfErr *Errors,
	ns3__ArrayOfEvt *Events)
{
	ns3__FERegXReqResponse *_p = afip::soap_new_ns3__FERegXReqResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FERegXReqResponse::RegXReq = RegXReq;
		_p->ns3__FERegXReqResponse::Errors = Errors;
		_p->ns3__FERegXReqResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_ns3__FERegXReqResponse(struct soap *soap, ns3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FERegXReqResponse(struct soap *soap, const char *URL, ns3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FERegXReqResponse(struct soap *soap, const char *URL, ns3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FERegXReqResponse(struct soap *soap, const char *URL, ns3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FERegXReqResponse * SOAP_FMAC4 soap_get_ns3__FERegXReqResponse(struct soap*, ns3__FERegXReqResponse *, const char*, const char*);

inline int soap_read_ns3__FERegXReqResponse(struct soap *soap, ns3__FERegXReqResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FERegXReqResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FERegXReqResponse(struct soap *soap, const char *URL, ns3__FERegXReqResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FERegXReqResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FERegXReqResponse(struct soap *soap, ns3__FERegXReqResponse *p)
{
	if (afip::soap_read_ns3__FERegXReqResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Err_DEFINED
#define SOAP_TYPE_afip_ns3__Err_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Err(struct soap*, const char*, int, const ns3__Err *, const char*);
SOAP_FMAC3 ns3__Err * SOAP_FMAC4 soap_in_ns3__Err(struct soap*, const char*, ns3__Err *, const char*);
SOAP_FMAC1 ns3__Err * SOAP_FMAC2 soap_instantiate_ns3__Err(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Err * soap_new_ns3__Err(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Err(soap, n, NULL, NULL, NULL);
}

inline ns3__Err * soap_new_req_ns3__Err(
	struct soap *soap,
	int Code)
{
	ns3__Err *_p = afip::soap_new_ns3__Err(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Err::Code = Code;
	}
	return _p;
}

inline ns3__Err * soap_new_set_ns3__Err(
	struct soap *soap,
	int Code,
	std::string *Msg)
{
	ns3__Err *_p = afip::soap_new_ns3__Err(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Err::Code = Code;
		_p->ns3__Err::Msg = Msg;
	}
	return _p;
}

inline int soap_write_ns3__Err(struct soap *soap, ns3__Err const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Err", p->soap_type() == SOAP_TYPE_afip_ns3__Err ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Err(struct soap *soap, const char *URL, ns3__Err const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Err", p->soap_type() == SOAP_TYPE_afip_ns3__Err ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Err(struct soap *soap, const char *URL, ns3__Err const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Err", p->soap_type() == SOAP_TYPE_afip_ns3__Err ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Err(struct soap *soap, const char *URL, ns3__Err const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Err", p->soap_type() == SOAP_TYPE_afip_ns3__Err ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Err * SOAP_FMAC4 soap_get_ns3__Err(struct soap*, ns3__Err *, const char*, const char*);

inline int soap_read_ns3__Err(struct soap *soap, ns3__Err *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Err(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Err(struct soap *soap, const char *URL, ns3__Err *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Err(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Err(struct soap *soap, ns3__Err *p)
{
	if (afip::soap_read_ns3__Err(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfErr_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfErr_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfErr(struct soap*, const char*, int, const ns3__ArrayOfErr *, const char*);
SOAP_FMAC3 ns3__ArrayOfErr * SOAP_FMAC4 soap_in_ns3__ArrayOfErr(struct soap*, const char*, ns3__ArrayOfErr *, const char*);
SOAP_FMAC1 ns3__ArrayOfErr * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfErr(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfErr * soap_new_ns3__ArrayOfErr(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfErr(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfErr * soap_new_req_ns3__ArrayOfErr(
	struct soap *soap)
{
	ns3__ArrayOfErr *_p = afip::soap_new_ns3__ArrayOfErr(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfErr * soap_new_set_ns3__ArrayOfErr(
	struct soap *soap,
	const std::vector<ns3__Err *> & Err)
{
	ns3__ArrayOfErr *_p = afip::soap_new_ns3__ArrayOfErr(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfErr::Err = Err;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfErr(struct soap *soap, ns3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfErr ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfErr(struct soap *soap, const char *URL, ns3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfErr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfErr(struct soap *soap, const char *URL, ns3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfErr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfErr(struct soap *soap, const char *URL, ns3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfErr ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfErr * SOAP_FMAC4 soap_get_ns3__ArrayOfErr(struct soap*, ns3__ArrayOfErr *, const char*, const char*);

inline int soap_read_ns3__ArrayOfErr(struct soap *soap, ns3__ArrayOfErr *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfErr(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfErr(struct soap *soap, const char *URL, ns3__ArrayOfErr *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfErr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfErr(struct soap *soap, ns3__ArrayOfErr *p)
{
	if (afip::soap_read_ns3__ArrayOfErr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Evt_DEFINED
#define SOAP_TYPE_afip_ns3__Evt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Evt(struct soap*, const char*, int, const ns3__Evt *, const char*);
SOAP_FMAC3 ns3__Evt * SOAP_FMAC4 soap_in_ns3__Evt(struct soap*, const char*, ns3__Evt *, const char*);
SOAP_FMAC1 ns3__Evt * SOAP_FMAC2 soap_instantiate_ns3__Evt(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Evt * soap_new_ns3__Evt(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Evt(soap, n, NULL, NULL, NULL);
}

inline ns3__Evt * soap_new_req_ns3__Evt(
	struct soap *soap,
	int Code)
{
	ns3__Evt *_p = afip::soap_new_ns3__Evt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Evt::Code = Code;
	}
	return _p;
}

inline ns3__Evt * soap_new_set_ns3__Evt(
	struct soap *soap,
	int Code,
	std::string *Msg)
{
	ns3__Evt *_p = afip::soap_new_ns3__Evt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Evt::Code = Code;
		_p->ns3__Evt::Msg = Msg;
	}
	return _p;
}

inline int soap_write_ns3__Evt(struct soap *soap, ns3__Evt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Evt", p->soap_type() == SOAP_TYPE_afip_ns3__Evt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Evt(struct soap *soap, const char *URL, ns3__Evt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Evt", p->soap_type() == SOAP_TYPE_afip_ns3__Evt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Evt(struct soap *soap, const char *URL, ns3__Evt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Evt", p->soap_type() == SOAP_TYPE_afip_ns3__Evt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Evt(struct soap *soap, const char *URL, ns3__Evt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Evt", p->soap_type() == SOAP_TYPE_afip_ns3__Evt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Evt * SOAP_FMAC4 soap_get_ns3__Evt(struct soap*, ns3__Evt *, const char*, const char*);

inline int soap_read_ns3__Evt(struct soap *soap, ns3__Evt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Evt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Evt(struct soap *soap, const char *URL, ns3__Evt *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Evt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Evt(struct soap *soap, ns3__Evt *p)
{
	if (afip::soap_read_ns3__Evt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfEvt_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfEvt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfEvt(struct soap*, const char*, int, const ns3__ArrayOfEvt *, const char*);
SOAP_FMAC3 ns3__ArrayOfEvt * SOAP_FMAC4 soap_in_ns3__ArrayOfEvt(struct soap*, const char*, ns3__ArrayOfEvt *, const char*);
SOAP_FMAC1 ns3__ArrayOfEvt * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfEvt(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfEvt * soap_new_ns3__ArrayOfEvt(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfEvt(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfEvt * soap_new_req_ns3__ArrayOfEvt(
	struct soap *soap)
{
	ns3__ArrayOfEvt *_p = afip::soap_new_ns3__ArrayOfEvt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfEvt * soap_new_set_ns3__ArrayOfEvt(
	struct soap *soap,
	const std::vector<ns3__Evt *> & Evt)
{
	ns3__ArrayOfEvt *_p = afip::soap_new_ns3__ArrayOfEvt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfEvt::Evt = Evt;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfEvt(struct soap *soap, ns3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfEvt(struct soap *soap, const char *URL, ns3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfEvt(struct soap *soap, const char *URL, ns3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfEvt(struct soap *soap, const char *URL, ns3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfEvt * SOAP_FMAC4 soap_get_ns3__ArrayOfEvt(struct soap*, ns3__ArrayOfEvt *, const char*, const char*);

inline int soap_read_ns3__ArrayOfEvt(struct soap *soap, ns3__ArrayOfEvt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfEvt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfEvt(struct soap *soap, const char *URL, ns3__ArrayOfEvt *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfEvt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfEvt(struct soap *soap, ns3__ArrayOfEvt *p)
{
	if (afip::soap_read_ns3__ArrayOfEvt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Obs_DEFINED
#define SOAP_TYPE_afip_ns3__Obs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Obs(struct soap*, const char*, int, const ns3__Obs *, const char*);
SOAP_FMAC3 ns3__Obs * SOAP_FMAC4 soap_in_ns3__Obs(struct soap*, const char*, ns3__Obs *, const char*);
SOAP_FMAC1 ns3__Obs * SOAP_FMAC2 soap_instantiate_ns3__Obs(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Obs * soap_new_ns3__Obs(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Obs(soap, n, NULL, NULL, NULL);
}

inline ns3__Obs * soap_new_req_ns3__Obs(
	struct soap *soap,
	int Code)
{
	ns3__Obs *_p = afip::soap_new_ns3__Obs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Obs::Code = Code;
	}
	return _p;
}

inline ns3__Obs * soap_new_set_ns3__Obs(
	struct soap *soap,
	int Code,
	std::string *Msg)
{
	ns3__Obs *_p = afip::soap_new_ns3__Obs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Obs::Code = Code;
		_p->ns3__Obs::Msg = Msg;
	}
	return _p;
}

inline int soap_write_ns3__Obs(struct soap *soap, ns3__Obs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Obs", p->soap_type() == SOAP_TYPE_afip_ns3__Obs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Obs(struct soap *soap, const char *URL, ns3__Obs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Obs", p->soap_type() == SOAP_TYPE_afip_ns3__Obs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Obs(struct soap *soap, const char *URL, ns3__Obs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Obs", p->soap_type() == SOAP_TYPE_afip_ns3__Obs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Obs(struct soap *soap, const char *URL, ns3__Obs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Obs", p->soap_type() == SOAP_TYPE_afip_ns3__Obs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Obs * SOAP_FMAC4 soap_get_ns3__Obs(struct soap*, ns3__Obs *, const char*, const char*);

inline int soap_read_ns3__Obs(struct soap *soap, ns3__Obs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Obs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Obs(struct soap *soap, const char *URL, ns3__Obs *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Obs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Obs(struct soap *soap, ns3__Obs *p)
{
	if (afip::soap_read_ns3__Obs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfObs_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfObs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfObs(struct soap*, const char*, int, const ns3__ArrayOfObs *, const char*);
SOAP_FMAC3 ns3__ArrayOfObs * SOAP_FMAC4 soap_in_ns3__ArrayOfObs(struct soap*, const char*, ns3__ArrayOfObs *, const char*);
SOAP_FMAC1 ns3__ArrayOfObs * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfObs(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfObs * soap_new_ns3__ArrayOfObs(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfObs(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfObs * soap_new_req_ns3__ArrayOfObs(
	struct soap *soap)
{
	ns3__ArrayOfObs *_p = afip::soap_new_ns3__ArrayOfObs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfObs * soap_new_set_ns3__ArrayOfObs(
	struct soap *soap,
	const std::vector<ns3__Obs *> & Obs)
{
	ns3__ArrayOfObs *_p = afip::soap_new_ns3__ArrayOfObs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfObs::Obs = Obs;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfObs(struct soap *soap, ns3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfObs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfObs(struct soap *soap, const char *URL, ns3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfObs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfObs(struct soap *soap, const char *URL, ns3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfObs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfObs(struct soap *soap, const char *URL, ns3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfObs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfObs * SOAP_FMAC4 soap_get_ns3__ArrayOfObs(struct soap*, ns3__ArrayOfObs *, const char*, const char*);

inline int soap_read_ns3__ArrayOfObs(struct soap *soap, ns3__ArrayOfObs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfObs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfObs(struct soap *soap, const char *URL, ns3__ArrayOfObs *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfObs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfObs(struct soap *soap, ns3__ArrayOfObs *p)
{
	if (afip::soap_read_ns3__ArrayOfObs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FEDetResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FEDetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FEDetResponse(struct soap*, const char*, int, const ns3__FEDetResponse *, const char*);
SOAP_FMAC3 ns3__FEDetResponse * SOAP_FMAC4 soap_in_ns3__FEDetResponse(struct soap*, const char*, ns3__FEDetResponse *, const char*);
SOAP_FMAC1 ns3__FEDetResponse * SOAP_FMAC2 soap_instantiate_ns3__FEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FEDetResponse * soap_new_ns3__FEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FEDetResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FEDetResponse * soap_new_req_ns3__FEDetResponse(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta)
{
	ns3__FEDetResponse *_p = afip::soap_new_ns3__FEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetResponse::Concepto = Concepto;
		_p->ns3__FEDetResponse::DocTipo = DocTipo;
		_p->ns3__FEDetResponse::DocNro = DocNro;
		_p->ns3__FEDetResponse::CbteDesde = CbteDesde;
		_p->ns3__FEDetResponse::CbteHasta = CbteHasta;
	}
	return _p;
}

inline ns3__FEDetResponse * soap_new_set_ns3__FEDetResponse(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta,
	std::string *CbteFch,
	std::string *Resultado,
	ns3__ArrayOfObs *Observaciones)
{
	ns3__FEDetResponse *_p = afip::soap_new_ns3__FEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetResponse::Concepto = Concepto;
		_p->ns3__FEDetResponse::DocTipo = DocTipo;
		_p->ns3__FEDetResponse::DocNro = DocNro;
		_p->ns3__FEDetResponse::CbteDesde = CbteDesde;
		_p->ns3__FEDetResponse::CbteHasta = CbteHasta;
		_p->ns3__FEDetResponse::CbteFch = CbteFch;
		_p->ns3__FEDetResponse::Resultado = Resultado;
		_p->ns3__FEDetResponse::Observaciones = Observaciones;
	}
	return _p;
}

inline int soap_write_ns3__FEDetResponse(struct soap *soap, ns3__FEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FEDetResponse(struct soap *soap, const char *URL, ns3__FEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FEDetResponse(struct soap *soap, const char *URL, ns3__FEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FEDetResponse(struct soap *soap, const char *URL, ns3__FEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FEDetResponse * SOAP_FMAC4 soap_get_ns3__FEDetResponse(struct soap*, ns3__FEDetResponse *, const char*, const char*);

inline int soap_read_ns3__FEDetResponse(struct soap *soap, ns3__FEDetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FEDetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FEDetResponse(struct soap *soap, const char *URL, ns3__FEDetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FEDetResponse(struct soap *soap, ns3__FEDetResponse *p)
{
	if (afip::soap_read_ns3__FEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEDetResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEDetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEDetResponse(struct soap*, const char*, int, const ns3__FECAEDetResponse *, const char*);
SOAP_FMAC3 ns3__FECAEDetResponse * SOAP_FMAC4 soap_in_ns3__FECAEDetResponse(struct soap*, const char*, ns3__FECAEDetResponse *, const char*);
SOAP_FMAC1 ns3__FECAEDetResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEDetResponse * soap_new_ns3__FECAEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEDetResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEDetResponse * soap_new_req_ns3__FECAEDetResponse(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1)
{
	ns3__FECAEDetResponse *_p = afip::soap_new_ns3__FECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetResponse::Concepto = Concepto__1;
		_p->ns3__FEDetResponse::DocTipo = DocTipo__1;
		_p->ns3__FEDetResponse::DocNro = DocNro__1;
		_p->ns3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetResponse::CbteHasta = CbteHasta__1;
	}
	return _p;
}

inline ns3__FECAEDetResponse * soap_new_set_ns3__FECAEDetResponse(
	struct soap *soap,
	std::string *CAE,
	std::string *CAEFchVto,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	std::string *Resultado__1,
	ns3__ArrayOfObs *Observaciones__1)
{
	ns3__FECAEDetResponse *_p = afip::soap_new_ns3__FECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEDetResponse::CAE = CAE;
		_p->ns3__FECAEDetResponse::CAEFchVto = CAEFchVto;
		_p->ns3__FEDetResponse::Concepto = Concepto__1;
		_p->ns3__FEDetResponse::DocTipo = DocTipo__1;
		_p->ns3__FEDetResponse::DocNro = DocNro__1;
		_p->ns3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetResponse::CbteHasta = CbteHasta__1;
		_p->ns3__FEDetResponse::CbteFch = CbteFch__1;
		_p->ns3__FEDetResponse::Resultado = Resultado__1;
		_p->ns3__FEDetResponse::Observaciones = Observaciones__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAEDetResponse(struct soap *soap, ns3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEDetResponse(struct soap *soap, const char *URL, ns3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEDetResponse(struct soap *soap, const char *URL, ns3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEDetResponse(struct soap *soap, const char *URL, ns3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEDetResponse * SOAP_FMAC4 soap_get_ns3__FECAEDetResponse(struct soap*, ns3__FECAEDetResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEDetResponse(struct soap *soap, ns3__FECAEDetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEDetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEDetResponse(struct soap *soap, const char *URL, ns3__FECAEDetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEDetResponse(struct soap *soap, ns3__FECAEDetResponse *p)
{
	if (afip::soap_read_ns3__FECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfFECAEDetResponse(struct soap*, const char*, int, const ns3__ArrayOfFECAEDetResponse *, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEDetResponse * SOAP_FMAC4 soap_in_ns3__ArrayOfFECAEDetResponse(struct soap*, const char*, ns3__ArrayOfFECAEDetResponse *, const char*);
SOAP_FMAC1 ns3__ArrayOfFECAEDetResponse * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfFECAEDetResponse * soap_new_ns3__ArrayOfFECAEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfFECAEDetResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfFECAEDetResponse * soap_new_req_ns3__ArrayOfFECAEDetResponse(
	struct soap *soap)
{
	ns3__ArrayOfFECAEDetResponse *_p = afip::soap_new_ns3__ArrayOfFECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfFECAEDetResponse * soap_new_set_ns3__ArrayOfFECAEDetResponse(
	struct soap *soap,
	const std::vector<ns3__FECAEDetResponse *> & FECAEDetResponse)
{
	ns3__ArrayOfFECAEDetResponse *_p = afip::soap_new_ns3__ArrayOfFECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfFECAEDetResponse::FECAEDetResponse = FECAEDetResponse;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfFECAEDetResponse(struct soap *soap, ns3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfFECAEDetResponse * SOAP_FMAC4 soap_get_ns3__ArrayOfFECAEDetResponse(struct soap*, ns3__ArrayOfFECAEDetResponse *, const char*, const char*);

inline int soap_read_ns3__ArrayOfFECAEDetResponse(struct soap *soap, ns3__ArrayOfFECAEDetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfFECAEDetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfFECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfFECAEDetResponse(struct soap *soap, ns3__ArrayOfFECAEDetResponse *p)
{
	if (afip::soap_read_ns3__ArrayOfFECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECabResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECabResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECabResponse(struct soap*, const char*, int, const ns3__FECabResponse *, const char*);
SOAP_FMAC3 ns3__FECabResponse * SOAP_FMAC4 soap_in_ns3__FECabResponse(struct soap*, const char*, ns3__FECabResponse *, const char*);
SOAP_FMAC1 ns3__FECabResponse * SOAP_FMAC2 soap_instantiate_ns3__FECabResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECabResponse * soap_new_ns3__FECabResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECabResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECabResponse * soap_new_req_ns3__FECabResponse(
	struct soap *soap,
	LONG64 Cuit,
	int PtoVta,
	int CbteTipo,
	int CantReg)
{
	ns3__FECabResponse *_p = afip::soap_new_ns3__FECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabResponse::Cuit = Cuit;
		_p->ns3__FECabResponse::PtoVta = PtoVta;
		_p->ns3__FECabResponse::CbteTipo = CbteTipo;
		_p->ns3__FECabResponse::CantReg = CantReg;
	}
	return _p;
}

inline ns3__FECabResponse * soap_new_set_ns3__FECabResponse(
	struct soap *soap,
	LONG64 Cuit,
	int PtoVta,
	int CbteTipo,
	std::string *FchProceso,
	int CantReg,
	std::string *Resultado,
	std::string *Reproceso)
{
	ns3__FECabResponse *_p = afip::soap_new_ns3__FECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabResponse::Cuit = Cuit;
		_p->ns3__FECabResponse::PtoVta = PtoVta;
		_p->ns3__FECabResponse::CbteTipo = CbteTipo;
		_p->ns3__FECabResponse::FchProceso = FchProceso;
		_p->ns3__FECabResponse::CantReg = CantReg;
		_p->ns3__FECabResponse::Resultado = Resultado;
		_p->ns3__FECabResponse::Reproceso = Reproceso;
	}
	return _p;
}

inline int soap_write_ns3__FECabResponse(struct soap *soap, ns3__FECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECabResponse(struct soap *soap, const char *URL, ns3__FECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECabResponse(struct soap *soap, const char *URL, ns3__FECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECabResponse(struct soap *soap, const char *URL, ns3__FECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECabResponse * SOAP_FMAC4 soap_get_ns3__FECabResponse(struct soap*, ns3__FECabResponse *, const char*, const char*);

inline int soap_read_ns3__FECabResponse(struct soap *soap, ns3__FECabResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECabResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECabResponse(struct soap *soap, const char *URL, ns3__FECabResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECabResponse(struct soap *soap, ns3__FECabResponse *p)
{
	if (afip::soap_read_ns3__FECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAECabResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAECabResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAECabResponse(struct soap*, const char*, int, const ns3__FECAECabResponse *, const char*);
SOAP_FMAC3 ns3__FECAECabResponse * SOAP_FMAC4 soap_in_ns3__FECAECabResponse(struct soap*, const char*, ns3__FECAECabResponse *, const char*);
SOAP_FMAC1 ns3__FECAECabResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAECabResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAECabResponse * soap_new_ns3__FECAECabResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAECabResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAECabResponse * soap_new_req_ns3__FECAECabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	int CantReg__1)
{
	ns3__FECAECabResponse *_p = afip::soap_new_ns3__FECAECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabResponse::Cuit = Cuit__1;
		_p->ns3__FECabResponse::PtoVta = PtoVta__1;
		_p->ns3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->ns3__FECabResponse::CantReg = CantReg__1;
	}
	return _p;
}

inline ns3__FECAECabResponse * soap_new_set_ns3__FECAECabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	std::string *FchProceso__1,
	int CantReg__1,
	std::string *Resultado__1,
	std::string *Reproceso__1)
{
	ns3__FECAECabResponse *_p = afip::soap_new_ns3__FECAECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabResponse::Cuit = Cuit__1;
		_p->ns3__FECabResponse::PtoVta = PtoVta__1;
		_p->ns3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->ns3__FECabResponse::FchProceso = FchProceso__1;
		_p->ns3__FECabResponse::CantReg = CantReg__1;
		_p->ns3__FECabResponse::Resultado = Resultado__1;
		_p->ns3__FECabResponse::Reproceso = Reproceso__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAECabResponse(struct soap *soap, ns3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAECabResponse(struct soap *soap, const char *URL, ns3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAECabResponse(struct soap *soap, const char *URL, ns3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAECabResponse(struct soap *soap, const char *URL, ns3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAECabResponse * SOAP_FMAC4 soap_get_ns3__FECAECabResponse(struct soap*, ns3__FECAECabResponse *, const char*, const char*);

inline int soap_read_ns3__FECAECabResponse(struct soap *soap, ns3__FECAECabResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAECabResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAECabResponse(struct soap *soap, const char *URL, ns3__FECAECabResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAECabResponse(struct soap *soap, ns3__FECAECabResponse *p)
{
	if (afip::soap_read_ns3__FECAECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEResponse_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEResponse(struct soap*, const char*, int, const ns3__FECAEResponse *, const char*);
SOAP_FMAC3 ns3__FECAEResponse * SOAP_FMAC4 soap_in_ns3__FECAEResponse(struct soap*, const char*, ns3__FECAEResponse *, const char*);
SOAP_FMAC1 ns3__FECAEResponse * SOAP_FMAC2 soap_instantiate_ns3__FECAEResponse(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEResponse * soap_new_ns3__FECAEResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEResponse(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEResponse * soap_new_req_ns3__FECAEResponse(
	struct soap *soap)
{
	ns3__FECAEResponse *_p = afip::soap_new_ns3__FECAEResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECAEResponse * soap_new_set_ns3__FECAEResponse(
	struct soap *soap,
	ns3__FECAECabResponse *FeCabResp,
	ns3__ArrayOfFECAEDetResponse *FeDetResp,
	ns3__ArrayOfEvt *Events,
	ns3__ArrayOfErr *Errors)
{
	ns3__FECAEResponse *_p = afip::soap_new_ns3__FECAEResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAEResponse::FeCabResp = FeCabResp;
		_p->ns3__FECAEResponse::FeDetResp = FeDetResp;
		_p->ns3__FECAEResponse::Events = Events;
		_p->ns3__FECAEResponse::Errors = Errors;
	}
	return _p;
}

inline int soap_write_ns3__FECAEResponse(struct soap *soap, ns3__FECAEResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEResponse(struct soap *soap, const char *URL, ns3__FECAEResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEResponse(struct soap *soap, const char *URL, ns3__FECAEResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEResponse(struct soap *soap, const char *URL, ns3__FECAEResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEResponse * SOAP_FMAC4 soap_get_ns3__FECAEResponse(struct soap*, ns3__FECAEResponse *, const char*, const char*);

inline int soap_read_ns3__FECAEResponse(struct soap *soap, ns3__FECAEResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEResponse(struct soap *soap, const char *URL, ns3__FECAEResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEResponse(struct soap *soap, ns3__FECAEResponse *p)
{
	if (afip::soap_read_ns3__FECAEResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Comprador_DEFINED
#define SOAP_TYPE_afip_ns3__Comprador_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Comprador(struct soap*, const char*, int, const ns3__Comprador *, const char*);
SOAP_FMAC3 ns3__Comprador * SOAP_FMAC4 soap_in_ns3__Comprador(struct soap*, const char*, ns3__Comprador *, const char*);
SOAP_FMAC1 ns3__Comprador * SOAP_FMAC2 soap_instantiate_ns3__Comprador(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Comprador * soap_new_ns3__Comprador(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Comprador(soap, n, NULL, NULL, NULL);
}

inline ns3__Comprador * soap_new_req_ns3__Comprador(
	struct soap *soap,
	int DocTipo,
	LONG64 DocNro,
	double Porcentaje)
{
	ns3__Comprador *_p = afip::soap_new_ns3__Comprador(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Comprador::DocTipo = DocTipo;
		_p->ns3__Comprador::DocNro = DocNro;
		_p->ns3__Comprador::Porcentaje = Porcentaje;
	}
	return _p;
}

inline ns3__Comprador * soap_new_set_ns3__Comprador(
	struct soap *soap,
	int DocTipo,
	LONG64 DocNro,
	double Porcentaje)
{
	ns3__Comprador *_p = afip::soap_new_ns3__Comprador(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Comprador::DocTipo = DocTipo;
		_p->ns3__Comprador::DocNro = DocNro;
		_p->ns3__Comprador::Porcentaje = Porcentaje;
	}
	return _p;
}

inline int soap_write_ns3__Comprador(struct soap *soap, ns3__Comprador const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Comprador", p->soap_type() == SOAP_TYPE_afip_ns3__Comprador ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Comprador(struct soap *soap, const char *URL, ns3__Comprador const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Comprador", p->soap_type() == SOAP_TYPE_afip_ns3__Comprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Comprador(struct soap *soap, const char *URL, ns3__Comprador const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Comprador", p->soap_type() == SOAP_TYPE_afip_ns3__Comprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Comprador(struct soap *soap, const char *URL, ns3__Comprador const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Comprador", p->soap_type() == SOAP_TYPE_afip_ns3__Comprador ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Comprador * SOAP_FMAC4 soap_get_ns3__Comprador(struct soap*, ns3__Comprador *, const char*, const char*);

inline int soap_read_ns3__Comprador(struct soap *soap, ns3__Comprador *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Comprador(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Comprador(struct soap *soap, const char *URL, ns3__Comprador *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Comprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Comprador(struct soap *soap, ns3__Comprador *p)
{
	if (afip::soap_read_ns3__Comprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfComprador_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfComprador_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfComprador(struct soap*, const char*, int, const ns3__ArrayOfComprador *, const char*);
SOAP_FMAC3 ns3__ArrayOfComprador * SOAP_FMAC4 soap_in_ns3__ArrayOfComprador(struct soap*, const char*, ns3__ArrayOfComprador *, const char*);
SOAP_FMAC1 ns3__ArrayOfComprador * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfComprador(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfComprador * soap_new_ns3__ArrayOfComprador(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfComprador(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfComprador * soap_new_req_ns3__ArrayOfComprador(
	struct soap *soap)
{
	ns3__ArrayOfComprador *_p = afip::soap_new_ns3__ArrayOfComprador(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfComprador * soap_new_set_ns3__ArrayOfComprador(
	struct soap *soap,
	const std::vector<ns3__Comprador *> & Comprador)
{
	ns3__ArrayOfComprador *_p = afip::soap_new_ns3__ArrayOfComprador(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfComprador::Comprador = Comprador;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfComprador(struct soap *soap, ns3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfComprador(struct soap *soap, const char *URL, ns3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfComprador(struct soap *soap, const char *URL, ns3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfComprador(struct soap *soap, const char *URL, ns3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfComprador * SOAP_FMAC4 soap_get_ns3__ArrayOfComprador(struct soap*, ns3__ArrayOfComprador *, const char*, const char*);

inline int soap_read_ns3__ArrayOfComprador(struct soap *soap, ns3__ArrayOfComprador *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfComprador(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfComprador(struct soap *soap, const char *URL, ns3__ArrayOfComprador *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfComprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfComprador(struct soap *soap, ns3__ArrayOfComprador *p)
{
	if (afip::soap_read_ns3__ArrayOfComprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Opcional_DEFINED
#define SOAP_TYPE_afip_ns3__Opcional_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Opcional(struct soap*, const char*, int, const ns3__Opcional *, const char*);
SOAP_FMAC3 ns3__Opcional * SOAP_FMAC4 soap_in_ns3__Opcional(struct soap*, const char*, ns3__Opcional *, const char*);
SOAP_FMAC1 ns3__Opcional * SOAP_FMAC2 soap_instantiate_ns3__Opcional(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Opcional * soap_new_ns3__Opcional(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Opcional(soap, n, NULL, NULL, NULL);
}

inline ns3__Opcional * soap_new_req_ns3__Opcional(
	struct soap *soap)
{
	ns3__Opcional *_p = afip::soap_new_ns3__Opcional(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__Opcional * soap_new_set_ns3__Opcional(
	struct soap *soap,
	std::string *Id,
	std::string *Valor)
{
	ns3__Opcional *_p = afip::soap_new_ns3__Opcional(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Opcional::Id = Id;
		_p->ns3__Opcional::Valor = Valor;
	}
	return _p;
}

inline int soap_write_ns3__Opcional(struct soap *soap, ns3__Opcional const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Opcional", p->soap_type() == SOAP_TYPE_afip_ns3__Opcional ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Opcional(struct soap *soap, const char *URL, ns3__Opcional const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Opcional", p->soap_type() == SOAP_TYPE_afip_ns3__Opcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Opcional(struct soap *soap, const char *URL, ns3__Opcional const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Opcional", p->soap_type() == SOAP_TYPE_afip_ns3__Opcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Opcional(struct soap *soap, const char *URL, ns3__Opcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Opcional", p->soap_type() == SOAP_TYPE_afip_ns3__Opcional ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Opcional * SOAP_FMAC4 soap_get_ns3__Opcional(struct soap*, ns3__Opcional *, const char*, const char*);

inline int soap_read_ns3__Opcional(struct soap *soap, ns3__Opcional *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Opcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Opcional(struct soap *soap, const char *URL, ns3__Opcional *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Opcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Opcional(struct soap *soap, ns3__Opcional *p)
{
	if (afip::soap_read_ns3__Opcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfOpcional_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfOpcional_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfOpcional(struct soap*, const char*, int, const ns3__ArrayOfOpcional *, const char*);
SOAP_FMAC3 ns3__ArrayOfOpcional * SOAP_FMAC4 soap_in_ns3__ArrayOfOpcional(struct soap*, const char*, ns3__ArrayOfOpcional *, const char*);
SOAP_FMAC1 ns3__ArrayOfOpcional * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfOpcional(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfOpcional * soap_new_ns3__ArrayOfOpcional(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfOpcional(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfOpcional * soap_new_req_ns3__ArrayOfOpcional(
	struct soap *soap)
{
	ns3__ArrayOfOpcional *_p = afip::soap_new_ns3__ArrayOfOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfOpcional * soap_new_set_ns3__ArrayOfOpcional(
	struct soap *soap,
	const std::vector<ns3__Opcional *> & Opcional)
{
	ns3__ArrayOfOpcional *_p = afip::soap_new_ns3__ArrayOfOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfOpcional::Opcional = Opcional;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfOpcional(struct soap *soap, ns3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfOpcional(struct soap *soap, const char *URL, ns3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfOpcional(struct soap *soap, const char *URL, ns3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfOpcional(struct soap *soap, const char *URL, ns3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfOpcional * SOAP_FMAC4 soap_get_ns3__ArrayOfOpcional(struct soap*, ns3__ArrayOfOpcional *, const char*, const char*);

inline int soap_read_ns3__ArrayOfOpcional(struct soap *soap, ns3__ArrayOfOpcional *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfOpcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfOpcional(struct soap *soap, const char *URL, ns3__ArrayOfOpcional *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfOpcional(struct soap *soap, ns3__ArrayOfOpcional *p)
{
	if (afip::soap_read_ns3__ArrayOfOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__AlicIva_DEFINED
#define SOAP_TYPE_afip_ns3__AlicIva_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__AlicIva(struct soap*, const char*, int, const ns3__AlicIva *, const char*);
SOAP_FMAC3 ns3__AlicIva * SOAP_FMAC4 soap_in_ns3__AlicIva(struct soap*, const char*, ns3__AlicIva *, const char*);
SOAP_FMAC1 ns3__AlicIva * SOAP_FMAC2 soap_instantiate_ns3__AlicIva(struct soap*, int, const char*, const char*, size_t*);

inline ns3__AlicIva * soap_new_ns3__AlicIva(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__AlicIva(soap, n, NULL, NULL, NULL);
}

inline ns3__AlicIva * soap_new_req_ns3__AlicIva(
	struct soap *soap,
	int Id,
	double BaseImp,
	double Importe)
{
	ns3__AlicIva *_p = afip::soap_new_ns3__AlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AlicIva::Id = Id;
		_p->ns3__AlicIva::BaseImp = BaseImp;
		_p->ns3__AlicIva::Importe = Importe;
	}
	return _p;
}

inline ns3__AlicIva * soap_new_set_ns3__AlicIva(
	struct soap *soap,
	int Id,
	double BaseImp,
	double Importe)
{
	ns3__AlicIva *_p = afip::soap_new_ns3__AlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__AlicIva::Id = Id;
		_p->ns3__AlicIva::BaseImp = BaseImp;
		_p->ns3__AlicIva::Importe = Importe;
	}
	return _p;
}

inline int soap_write_ns3__AlicIva(struct soap *soap, ns3__AlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__AlicIva ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__AlicIva(struct soap *soap, const char *URL, ns3__AlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__AlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__AlicIva(struct soap *soap, const char *URL, ns3__AlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__AlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__AlicIva(struct soap *soap, const char *URL, ns3__AlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:AlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__AlicIva ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__AlicIva * SOAP_FMAC4 soap_get_ns3__AlicIva(struct soap*, ns3__AlicIva *, const char*, const char*);

inline int soap_read_ns3__AlicIva(struct soap *soap, ns3__AlicIva *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__AlicIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__AlicIva(struct soap *soap, const char *URL, ns3__AlicIva *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__AlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__AlicIva(struct soap *soap, ns3__AlicIva *p)
{
	if (afip::soap_read_ns3__AlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfAlicIva_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfAlicIva_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfAlicIva(struct soap*, const char*, int, const ns3__ArrayOfAlicIva *, const char*);
SOAP_FMAC3 ns3__ArrayOfAlicIva * SOAP_FMAC4 soap_in_ns3__ArrayOfAlicIva(struct soap*, const char*, ns3__ArrayOfAlicIva *, const char*);
SOAP_FMAC1 ns3__ArrayOfAlicIva * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfAlicIva(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfAlicIva * soap_new_ns3__ArrayOfAlicIva(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfAlicIva(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfAlicIva * soap_new_req_ns3__ArrayOfAlicIva(
	struct soap *soap)
{
	ns3__ArrayOfAlicIva *_p = afip::soap_new_ns3__ArrayOfAlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfAlicIva * soap_new_set_ns3__ArrayOfAlicIva(
	struct soap *soap,
	const std::vector<ns3__AlicIva *> & AlicIva)
{
	ns3__ArrayOfAlicIva *_p = afip::soap_new_ns3__ArrayOfAlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfAlicIva::AlicIva = AlicIva;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfAlicIva(struct soap *soap, ns3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfAlicIva(struct soap *soap, const char *URL, ns3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfAlicIva(struct soap *soap, const char *URL, ns3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfAlicIva(struct soap *soap, const char *URL, ns3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfAlicIva * SOAP_FMAC4 soap_get_ns3__ArrayOfAlicIva(struct soap*, ns3__ArrayOfAlicIva *, const char*, const char*);

inline int soap_read_ns3__ArrayOfAlicIva(struct soap *soap, ns3__ArrayOfAlicIva *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfAlicIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfAlicIva(struct soap *soap, const char *URL, ns3__ArrayOfAlicIva *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfAlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfAlicIva(struct soap *soap, ns3__ArrayOfAlicIva *p)
{
	if (afip::soap_read_ns3__ArrayOfAlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__Tributo_DEFINED
#define SOAP_TYPE_afip_ns3__Tributo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__Tributo(struct soap*, const char*, int, const ns3__Tributo *, const char*);
SOAP_FMAC3 ns3__Tributo * SOAP_FMAC4 soap_in_ns3__Tributo(struct soap*, const char*, ns3__Tributo *, const char*);
SOAP_FMAC1 ns3__Tributo * SOAP_FMAC2 soap_instantiate_ns3__Tributo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__Tributo * soap_new_ns3__Tributo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__Tributo(soap, n, NULL, NULL, NULL);
}

inline ns3__Tributo * soap_new_req_ns3__Tributo(
	struct soap *soap,
	short Id,
	double BaseImp,
	double Alic,
	double Importe)
{
	ns3__Tributo *_p = afip::soap_new_ns3__Tributo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Tributo::Id = Id;
		_p->ns3__Tributo::BaseImp = BaseImp;
		_p->ns3__Tributo::Alic = Alic;
		_p->ns3__Tributo::Importe = Importe;
	}
	return _p;
}

inline ns3__Tributo * soap_new_set_ns3__Tributo(
	struct soap *soap,
	short Id,
	std::string *Desc,
	double BaseImp,
	double Alic,
	double Importe)
{
	ns3__Tributo *_p = afip::soap_new_ns3__Tributo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__Tributo::Id = Id;
		_p->ns3__Tributo::Desc = Desc;
		_p->ns3__Tributo::BaseImp = BaseImp;
		_p->ns3__Tributo::Alic = Alic;
		_p->ns3__Tributo::Importe = Importe;
	}
	return _p;
}

inline int soap_write_ns3__Tributo(struct soap *soap, ns3__Tributo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Tributo", p->soap_type() == SOAP_TYPE_afip_ns3__Tributo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__Tributo(struct soap *soap, const char *URL, ns3__Tributo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Tributo", p->soap_type() == SOAP_TYPE_afip_ns3__Tributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__Tributo(struct soap *soap, const char *URL, ns3__Tributo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Tributo", p->soap_type() == SOAP_TYPE_afip_ns3__Tributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__Tributo(struct soap *soap, const char *URL, ns3__Tributo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:Tributo", p->soap_type() == SOAP_TYPE_afip_ns3__Tributo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__Tributo * SOAP_FMAC4 soap_get_ns3__Tributo(struct soap*, ns3__Tributo *, const char*, const char*);

inline int soap_read_ns3__Tributo(struct soap *soap, ns3__Tributo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__Tributo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__Tributo(struct soap *soap, const char *URL, ns3__Tributo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__Tributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__Tributo(struct soap *soap, ns3__Tributo *p)
{
	if (afip::soap_read_ns3__Tributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfTributo_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfTributo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfTributo(struct soap*, const char*, int, const ns3__ArrayOfTributo *, const char*);
SOAP_FMAC3 ns3__ArrayOfTributo * SOAP_FMAC4 soap_in_ns3__ArrayOfTributo(struct soap*, const char*, ns3__ArrayOfTributo *, const char*);
SOAP_FMAC1 ns3__ArrayOfTributo * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfTributo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfTributo * soap_new_ns3__ArrayOfTributo(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfTributo(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfTributo * soap_new_req_ns3__ArrayOfTributo(
	struct soap *soap)
{
	ns3__ArrayOfTributo *_p = afip::soap_new_ns3__ArrayOfTributo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfTributo * soap_new_set_ns3__ArrayOfTributo(
	struct soap *soap,
	const std::vector<ns3__Tributo *> & Tributo)
{
	ns3__ArrayOfTributo *_p = afip::soap_new_ns3__ArrayOfTributo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfTributo::Tributo = Tributo;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfTributo(struct soap *soap, ns3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfTributo(struct soap *soap, const char *URL, ns3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfTributo(struct soap *soap, const char *URL, ns3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfTributo(struct soap *soap, const char *URL, ns3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfTributo * SOAP_FMAC4 soap_get_ns3__ArrayOfTributo(struct soap*, ns3__ArrayOfTributo *, const char*, const char*);

inline int soap_read_ns3__ArrayOfTributo(struct soap *soap, ns3__ArrayOfTributo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfTributo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfTributo(struct soap *soap, const char *URL, ns3__ArrayOfTributo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfTributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfTributo(struct soap *soap, ns3__ArrayOfTributo *p)
{
	if (afip::soap_read_ns3__ArrayOfTributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__CbteAsoc_DEFINED
#define SOAP_TYPE_afip_ns3__CbteAsoc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__CbteAsoc(struct soap*, const char*, int, const ns3__CbteAsoc *, const char*);
SOAP_FMAC3 ns3__CbteAsoc * SOAP_FMAC4 soap_in_ns3__CbteAsoc(struct soap*, const char*, ns3__CbteAsoc *, const char*);
SOAP_FMAC1 ns3__CbteAsoc * SOAP_FMAC2 soap_instantiate_ns3__CbteAsoc(struct soap*, int, const char*, const char*, size_t*);

inline ns3__CbteAsoc * soap_new_ns3__CbteAsoc(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__CbteAsoc(soap, n, NULL, NULL, NULL);
}

inline ns3__CbteAsoc * soap_new_req_ns3__CbteAsoc(
	struct soap *soap,
	int Tipo,
	int PtoVta,
	LONG64 Nro)
{
	ns3__CbteAsoc *_p = afip::soap_new_ns3__CbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CbteAsoc::Tipo = Tipo;
		_p->ns3__CbteAsoc::PtoVta = PtoVta;
		_p->ns3__CbteAsoc::Nro = Nro;
	}
	return _p;
}

inline ns3__CbteAsoc * soap_new_set_ns3__CbteAsoc(
	struct soap *soap,
	int Tipo,
	int PtoVta,
	LONG64 Nro,
	std::string *Cuit,
	std::string *CbteFch)
{
	ns3__CbteAsoc *_p = afip::soap_new_ns3__CbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__CbteAsoc::Tipo = Tipo;
		_p->ns3__CbteAsoc::PtoVta = PtoVta;
		_p->ns3__CbteAsoc::Nro = Nro;
		_p->ns3__CbteAsoc::Cuit = Cuit;
		_p->ns3__CbteAsoc::CbteFch = CbteFch;
	}
	return _p;
}

inline int soap_write_ns3__CbteAsoc(struct soap *soap, ns3__CbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__CbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__CbteAsoc(struct soap *soap, const char *URL, ns3__CbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__CbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__CbteAsoc(struct soap *soap, const char *URL, ns3__CbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__CbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__CbteAsoc(struct soap *soap, const char *URL, ns3__CbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__CbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__CbteAsoc * SOAP_FMAC4 soap_get_ns3__CbteAsoc(struct soap*, ns3__CbteAsoc *, const char*, const char*);

inline int soap_read_ns3__CbteAsoc(struct soap *soap, ns3__CbteAsoc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__CbteAsoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__CbteAsoc(struct soap *soap, const char *URL, ns3__CbteAsoc *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__CbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__CbteAsoc(struct soap *soap, ns3__CbteAsoc *p)
{
	if (afip::soap_read_ns3__CbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfCbteAsoc(struct soap*, const char*, int, const ns3__ArrayOfCbteAsoc *, const char*);
SOAP_FMAC3 ns3__ArrayOfCbteAsoc * SOAP_FMAC4 soap_in_ns3__ArrayOfCbteAsoc(struct soap*, const char*, ns3__ArrayOfCbteAsoc *, const char*);
SOAP_FMAC1 ns3__ArrayOfCbteAsoc * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfCbteAsoc(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfCbteAsoc * soap_new_ns3__ArrayOfCbteAsoc(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfCbteAsoc(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfCbteAsoc * soap_new_req_ns3__ArrayOfCbteAsoc(
	struct soap *soap)
{
	ns3__ArrayOfCbteAsoc *_p = afip::soap_new_ns3__ArrayOfCbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfCbteAsoc * soap_new_set_ns3__ArrayOfCbteAsoc(
	struct soap *soap,
	const std::vector<ns3__CbteAsoc *> & CbteAsoc)
{
	ns3__ArrayOfCbteAsoc *_p = afip::soap_new_ns3__ArrayOfCbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfCbteAsoc::CbteAsoc = CbteAsoc;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfCbteAsoc(struct soap *soap, ns3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, ns3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, ns3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, ns3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfCbteAsoc * SOAP_FMAC4 soap_get_ns3__ArrayOfCbteAsoc(struct soap*, ns3__ArrayOfCbteAsoc *, const char*, const char*);

inline int soap_read_ns3__ArrayOfCbteAsoc(struct soap *soap, ns3__ArrayOfCbteAsoc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfCbteAsoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, ns3__ArrayOfCbteAsoc *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfCbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfCbteAsoc(struct soap *soap, ns3__ArrayOfCbteAsoc *p)
{
	if (afip::soap_read_ns3__ArrayOfCbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FEDetRequest_DEFINED
#define SOAP_TYPE_afip_ns3__FEDetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FEDetRequest(struct soap*, const char*, int, const ns3__FEDetRequest *, const char*);
SOAP_FMAC3 ns3__FEDetRequest * SOAP_FMAC4 soap_in_ns3__FEDetRequest(struct soap*, const char*, ns3__FEDetRequest *, const char*);
SOAP_FMAC1 ns3__FEDetRequest * SOAP_FMAC2 soap_instantiate_ns3__FEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FEDetRequest * soap_new_ns3__FEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FEDetRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FEDetRequest * soap_new_req_ns3__FEDetRequest(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta,
	double ImpTotal,
	double ImpTotConc,
	double ImpNeto,
	double ImpOpEx,
	double ImpTrib,
	double ImpIVA,
	double MonCotiz)
{
	ns3__FEDetRequest *_p = afip::soap_new_ns3__FEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetRequest::Concepto = Concepto;
		_p->ns3__FEDetRequest::DocTipo = DocTipo;
		_p->ns3__FEDetRequest::DocNro = DocNro;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz;
	}
	return _p;
}

inline ns3__FEDetRequest * soap_new_set_ns3__FEDetRequest(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta,
	std::string *CbteFch,
	double ImpTotal,
	double ImpTotConc,
	double ImpNeto,
	double ImpOpEx,
	double ImpTrib,
	double ImpIVA,
	std::string *FchServDesde,
	std::string *FchServHasta,
	std::string *FchVtoPago,
	std::string *MonId,
	double MonCotiz,
	ns3__ArrayOfCbteAsoc *CbtesAsoc,
	ns3__ArrayOfTributo *Tributos,
	ns3__ArrayOfAlicIva *Iva,
	ns3__ArrayOfOpcional *Opcionales,
	ns3__ArrayOfComprador *Compradores)
{
	ns3__FEDetRequest *_p = afip::soap_new_ns3__FEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetRequest::Concepto = Concepto;
		_p->ns3__FEDetRequest::DocTipo = DocTipo;
		_p->ns3__FEDetRequest::DocNro = DocNro;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta;
		_p->ns3__FEDetRequest::CbteFch = CbteFch;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA;
		_p->ns3__FEDetRequest::FchServDesde = FchServDesde;
		_p->ns3__FEDetRequest::FchServHasta = FchServHasta;
		_p->ns3__FEDetRequest::FchVtoPago = FchVtoPago;
		_p->ns3__FEDetRequest::MonId = MonId;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz;
		_p->ns3__FEDetRequest::CbtesAsoc = CbtesAsoc;
		_p->ns3__FEDetRequest::Tributos = Tributos;
		_p->ns3__FEDetRequest::Iva = Iva;
		_p->ns3__FEDetRequest::Opcionales = Opcionales;
		_p->ns3__FEDetRequest::Compradores = Compradores;
	}
	return _p;
}

inline int soap_write_ns3__FEDetRequest(struct soap *soap, ns3__FEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FEDetRequest(struct soap *soap, const char *URL, ns3__FEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FEDetRequest(struct soap *soap, const char *URL, ns3__FEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FEDetRequest(struct soap *soap, const char *URL, ns3__FEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FEDetRequest * SOAP_FMAC4 soap_get_ns3__FEDetRequest(struct soap*, ns3__FEDetRequest *, const char*, const char*);

inline int soap_read_ns3__FEDetRequest(struct soap *soap, ns3__FEDetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FEDetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FEDetRequest(struct soap *soap, const char *URL, ns3__FEDetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FEDetRequest(struct soap *soap, ns3__FEDetRequest *p)
{
	if (afip::soap_read_ns3__FEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAEDetRequest_DEFINED
#define SOAP_TYPE_afip_ns3__FECAEDetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAEDetRequest(struct soap*, const char*, int, const ns3__FECAEDetRequest *, const char*);
SOAP_FMAC3 ns3__FECAEDetRequest * SOAP_FMAC4 soap_in_ns3__FECAEDetRequest(struct soap*, const char*, ns3__FECAEDetRequest *, const char*);
SOAP_FMAC1 ns3__FECAEDetRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAEDetRequest * soap_new_ns3__FECAEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAEDetRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAEDetRequest * soap_new_req_ns3__FECAEDetRequest(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	double MonCotiz__1)
{
	ns3__FECAEDetRequest *_p = afip::soap_new_ns3__FECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetRequest::Concepto = Concepto__1;
		_p->ns3__FEDetRequest::DocTipo = DocTipo__1;
		_p->ns3__FEDetRequest::DocNro = DocNro__1;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz__1;
	}
	return _p;
}

inline ns3__FECAEDetRequest * soap_new_set_ns3__FECAEDetRequest(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	std::string *FchServDesde__1,
	std::string *FchServHasta__1,
	std::string *FchVtoPago__1,
	std::string *MonId__1,
	double MonCotiz__1,
	ns3__ArrayOfCbteAsoc *CbtesAsoc__1,
	ns3__ArrayOfTributo *Tributos__1,
	ns3__ArrayOfAlicIva *Iva__1,
	ns3__ArrayOfOpcional *Opcionales__1,
	ns3__ArrayOfComprador *Compradores__1)
{
	ns3__FECAEDetRequest *_p = afip::soap_new_ns3__FECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEDetRequest::Concepto = Concepto__1;
		_p->ns3__FEDetRequest::DocTipo = DocTipo__1;
		_p->ns3__FEDetRequest::DocNro = DocNro__1;
		_p->ns3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->ns3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->ns3__FEDetRequest::CbteFch = CbteFch__1;
		_p->ns3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->ns3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->ns3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->ns3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->ns3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->ns3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->ns3__FEDetRequest::FchServDesde = FchServDesde__1;
		_p->ns3__FEDetRequest::FchServHasta = FchServHasta__1;
		_p->ns3__FEDetRequest::FchVtoPago = FchVtoPago__1;
		_p->ns3__FEDetRequest::MonId = MonId__1;
		_p->ns3__FEDetRequest::MonCotiz = MonCotiz__1;
		_p->ns3__FEDetRequest::CbtesAsoc = CbtesAsoc__1;
		_p->ns3__FEDetRequest::Tributos = Tributos__1;
		_p->ns3__FEDetRequest::Iva = Iva__1;
		_p->ns3__FEDetRequest::Opcionales = Opcionales__1;
		_p->ns3__FEDetRequest::Compradores = Compradores__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAEDetRequest(struct soap *soap, ns3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAEDetRequest(struct soap *soap, const char *URL, ns3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAEDetRequest(struct soap *soap, const char *URL, ns3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAEDetRequest(struct soap *soap, const char *URL, ns3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAEDetRequest * SOAP_FMAC4 soap_get_ns3__FECAEDetRequest(struct soap*, ns3__FECAEDetRequest *, const char*, const char*);

inline int soap_read_ns3__FECAEDetRequest(struct soap *soap, ns3__FECAEDetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAEDetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAEDetRequest(struct soap *soap, const char *URL, ns3__FECAEDetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAEDetRequest(struct soap *soap, ns3__FECAEDetRequest *p)
{
	if (afip::soap_read_ns3__FECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest_DEFINED
#define SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__ArrayOfFECAEDetRequest(struct soap*, const char*, int, const ns3__ArrayOfFECAEDetRequest *, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEDetRequest * SOAP_FMAC4 soap_in_ns3__ArrayOfFECAEDetRequest(struct soap*, const char*, ns3__ArrayOfFECAEDetRequest *, const char*);
SOAP_FMAC1 ns3__ArrayOfFECAEDetRequest * SOAP_FMAC2 soap_instantiate_ns3__ArrayOfFECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__ArrayOfFECAEDetRequest * soap_new_ns3__ArrayOfFECAEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__ArrayOfFECAEDetRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__ArrayOfFECAEDetRequest * soap_new_req_ns3__ArrayOfFECAEDetRequest(
	struct soap *soap)
{
	ns3__ArrayOfFECAEDetRequest *_p = afip::soap_new_ns3__ArrayOfFECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__ArrayOfFECAEDetRequest * soap_new_set_ns3__ArrayOfFECAEDetRequest(
	struct soap *soap,
	const std::vector<ns3__FECAEDetRequest *> & FECAEDetRequest)
{
	ns3__ArrayOfFECAEDetRequest *_p = afip::soap_new_ns3__ArrayOfFECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__ArrayOfFECAEDetRequest::FECAEDetRequest = FECAEDetRequest;
	}
	return _p;
}

inline int soap_write_ns3__ArrayOfFECAEDetRequest(struct soap *soap, ns3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip_ns3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__ArrayOfFECAEDetRequest * SOAP_FMAC4 soap_get_ns3__ArrayOfFECAEDetRequest(struct soap*, ns3__ArrayOfFECAEDetRequest *, const char*, const char*);

inline int soap_read_ns3__ArrayOfFECAEDetRequest(struct soap *soap, ns3__ArrayOfFECAEDetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__ArrayOfFECAEDetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, ns3__ArrayOfFECAEDetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__ArrayOfFECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__ArrayOfFECAEDetRequest(struct soap *soap, ns3__ArrayOfFECAEDetRequest *p)
{
	if (afip::soap_read_ns3__ArrayOfFECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECabRequest_DEFINED
#define SOAP_TYPE_afip_ns3__FECabRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECabRequest(struct soap*, const char*, int, const ns3__FECabRequest *, const char*);
SOAP_FMAC3 ns3__FECabRequest * SOAP_FMAC4 soap_in_ns3__FECabRequest(struct soap*, const char*, ns3__FECabRequest *, const char*);
SOAP_FMAC1 ns3__FECabRequest * SOAP_FMAC2 soap_instantiate_ns3__FECabRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECabRequest * soap_new_ns3__FECabRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECabRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FECabRequest * soap_new_req_ns3__FECabRequest(
	struct soap *soap,
	int CantReg,
	int PtoVta,
	int CbteTipo)
{
	ns3__FECabRequest *_p = afip::soap_new_ns3__FECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabRequest::CantReg = CantReg;
		_p->ns3__FECabRequest::PtoVta = PtoVta;
		_p->ns3__FECabRequest::CbteTipo = CbteTipo;
	}
	return _p;
}

inline ns3__FECabRequest * soap_new_set_ns3__FECabRequest(
	struct soap *soap,
	int CantReg,
	int PtoVta,
	int CbteTipo)
{
	ns3__FECabRequest *_p = afip::soap_new_ns3__FECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabRequest::CantReg = CantReg;
		_p->ns3__FECabRequest::PtoVta = PtoVta;
		_p->ns3__FECabRequest::CbteTipo = CbteTipo;
	}
	return _p;
}

inline int soap_write_ns3__FECabRequest(struct soap *soap, ns3__FECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECabRequest(struct soap *soap, const char *URL, ns3__FECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECabRequest(struct soap *soap, const char *URL, ns3__FECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECabRequest(struct soap *soap, const char *URL, ns3__FECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECabRequest * SOAP_FMAC4 soap_get_ns3__FECabRequest(struct soap*, ns3__FECabRequest *, const char*, const char*);

inline int soap_read_ns3__FECabRequest(struct soap *soap, ns3__FECabRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECabRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECabRequest(struct soap *soap, const char *URL, ns3__FECabRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECabRequest(struct soap *soap, ns3__FECabRequest *p)
{
	if (afip::soap_read_ns3__FECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAECabRequest_DEFINED
#define SOAP_TYPE_afip_ns3__FECAECabRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAECabRequest(struct soap*, const char*, int, const ns3__FECAECabRequest *, const char*);
SOAP_FMAC3 ns3__FECAECabRequest * SOAP_FMAC4 soap_in_ns3__FECAECabRequest(struct soap*, const char*, ns3__FECAECabRequest *, const char*);
SOAP_FMAC1 ns3__FECAECabRequest * SOAP_FMAC2 soap_instantiate_ns3__FECAECabRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAECabRequest * soap_new_ns3__FECAECabRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAECabRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAECabRequest * soap_new_req_ns3__FECAECabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	ns3__FECAECabRequest *_p = afip::soap_new_ns3__FECAECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabRequest::CantReg = CantReg__1;
		_p->ns3__FECabRequest::PtoVta = PtoVta__1;
		_p->ns3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline ns3__FECAECabRequest * soap_new_set_ns3__FECAECabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	ns3__FECAECabRequest *_p = afip::soap_new_ns3__FECAECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECabRequest::CantReg = CantReg__1;
		_p->ns3__FECabRequest::PtoVta = PtoVta__1;
		_p->ns3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline int soap_write_ns3__FECAECabRequest(struct soap *soap, ns3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAECabRequest(struct soap *soap, const char *URL, ns3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAECabRequest(struct soap *soap, const char *URL, ns3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAECabRequest(struct soap *soap, const char *URL, ns3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAECabRequest * SOAP_FMAC4 soap_get_ns3__FECAECabRequest(struct soap*, ns3__FECAECabRequest *, const char*, const char*);

inline int soap_read_ns3__FECAECabRequest(struct soap *soap, ns3__FECAECabRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAECabRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAECabRequest(struct soap *soap, const char *URL, ns3__FECAECabRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAECabRequest(struct soap *soap, ns3__FECAECabRequest *p)
{
	if (afip::soap_read_ns3__FECAECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FECAERequest_DEFINED
#define SOAP_TYPE_afip_ns3__FECAERequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FECAERequest(struct soap*, const char*, int, const ns3__FECAERequest *, const char*);
SOAP_FMAC3 ns3__FECAERequest * SOAP_FMAC4 soap_in_ns3__FECAERequest(struct soap*, const char*, ns3__FECAERequest *, const char*);
SOAP_FMAC1 ns3__FECAERequest * SOAP_FMAC2 soap_instantiate_ns3__FECAERequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FECAERequest * soap_new_ns3__FECAERequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FECAERequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FECAERequest * soap_new_req_ns3__FECAERequest(
	struct soap *soap)
{
	ns3__FECAERequest *_p = afip::soap_new_ns3__FECAERequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns3__FECAERequest * soap_new_set_ns3__FECAERequest(
	struct soap *soap,
	ns3__FECAECabRequest *FeCabReq,
	ns3__ArrayOfFECAEDetRequest *FeDetReq)
{
	ns3__FECAERequest *_p = afip::soap_new_ns3__FECAERequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FECAERequest::FeCabReq = FeCabReq;
		_p->ns3__FECAERequest::FeDetReq = FeDetReq;
	}
	return _p;
}

inline int soap_write_ns3__FECAERequest(struct soap *soap, ns3__FECAERequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAERequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAERequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FECAERequest(struct soap *soap, const char *URL, ns3__FECAERequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAERequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAERequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FECAERequest(struct soap *soap, const char *URL, ns3__FECAERequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAERequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAERequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FECAERequest(struct soap *soap, const char *URL, ns3__FECAERequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FECAERequest", p->soap_type() == SOAP_TYPE_afip_ns3__FECAERequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FECAERequest * SOAP_FMAC4 soap_get_ns3__FECAERequest(struct soap*, ns3__FECAERequest *, const char*, const char*);

inline int soap_read_ns3__FECAERequest(struct soap *soap, ns3__FECAERequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FECAERequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FECAERequest(struct soap *soap, const char *URL, ns3__FECAERequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FECAERequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FECAERequest(struct soap *soap, ns3__FECAERequest *p)
{
	if (afip::soap_read_ns3__FECAERequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns3__FEAuthRequest_DEFINED
#define SOAP_TYPE_afip_ns3__FEAuthRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__FEAuthRequest(struct soap*, const char*, int, const ns3__FEAuthRequest *, const char*);
SOAP_FMAC3 ns3__FEAuthRequest * SOAP_FMAC4 soap_in_ns3__FEAuthRequest(struct soap*, const char*, ns3__FEAuthRequest *, const char*);
SOAP_FMAC1 ns3__FEAuthRequest * SOAP_FMAC2 soap_instantiate_ns3__FEAuthRequest(struct soap*, int, const char*, const char*, size_t*);

inline ns3__FEAuthRequest * soap_new_ns3__FEAuthRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns3__FEAuthRequest(soap, n, NULL, NULL, NULL);
}

inline ns3__FEAuthRequest * soap_new_req_ns3__FEAuthRequest(
	struct soap *soap,
	LONG64 Cuit)
{
	ns3__FEAuthRequest *_p = afip::soap_new_ns3__FEAuthRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEAuthRequest::Cuit = Cuit;
	}
	return _p;
}

inline ns3__FEAuthRequest * soap_new_set_ns3__FEAuthRequest(
	struct soap *soap,
	std::string *Token,
	std::string *Sign,
	LONG64 Cuit)
{
	ns3__FEAuthRequest *_p = afip::soap_new_ns3__FEAuthRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->ns3__FEAuthRequest::Token = Token;
		_p->ns3__FEAuthRequest::Sign = Sign;
		_p->ns3__FEAuthRequest::Cuit = Cuit;
	}
	return _p;
}

inline int soap_write_ns3__FEAuthRequest(struct soap *soap, ns3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEAuthRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns3__FEAuthRequest(struct soap *soap, const char *URL, ns3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEAuthRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns3__FEAuthRequest(struct soap *soap, const char *URL, ns3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEAuthRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns3__FEAuthRequest(struct soap *soap, const char *URL, ns3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip_ns3__FEAuthRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns3__FEAuthRequest * SOAP_FMAC4 soap_get_ns3__FEAuthRequest(struct soap*, ns3__FEAuthRequest *, const char*, const char*);

inline int soap_read_ns3__FEAuthRequest(struct soap *soap, ns3__FEAuthRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns3__FEAuthRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns3__FEAuthRequest(struct soap *soap, const char *URL, ns3__FEAuthRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns3__FEAuthRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns3__FEAuthRequest(struct soap *soap, ns3__FEAuthRequest *p)
{
	if (afip::soap_read_ns3__FEAuthRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_ns2__LoginFault_DEFINED
#define SOAP_TYPE_afip_ns2__LoginFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__LoginFault(struct soap*, const char*, int, const ns2__LoginFault *, const char*);
SOAP_FMAC3 ns2__LoginFault * SOAP_FMAC4 soap_in_ns2__LoginFault(struct soap*, const char*, ns2__LoginFault *, const char*);
SOAP_FMAC1 ns2__LoginFault * SOAP_FMAC2 soap_instantiate_ns2__LoginFault(struct soap*, int, const char*, const char*, size_t*);

inline ns2__LoginFault * soap_new_ns2__LoginFault(struct soap *soap, int n = -1)
{
	return soap_instantiate_ns2__LoginFault(soap, n, NULL, NULL, NULL);
}

inline ns2__LoginFault * soap_new_req_ns2__LoginFault(
	struct soap *soap)
{
	ns2__LoginFault *_p = afip::soap_new_ns2__LoginFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline ns2__LoginFault * soap_new_set_ns2__LoginFault(
	struct soap *soap)
{
	ns2__LoginFault *_p = afip::soap_new_ns2__LoginFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_ns2__LoginFault(struct soap *soap, ns2__LoginFault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LoginFault", p->soap_type() == SOAP_TYPE_afip_ns2__LoginFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_ns2__LoginFault(struct soap *soap, const char *URL, ns2__LoginFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LoginFault", p->soap_type() == SOAP_TYPE_afip_ns2__LoginFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_ns2__LoginFault(struct soap *soap, const char *URL, ns2__LoginFault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LoginFault", p->soap_type() == SOAP_TYPE_afip_ns2__LoginFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_ns2__LoginFault(struct soap *soap, const char *URL, ns2__LoginFault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns2:LoginFault", p->soap_type() == SOAP_TYPE_afip_ns2__LoginFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 ns2__LoginFault * SOAP_FMAC4 soap_get_ns2__LoginFault(struct soap*, ns2__LoginFault *, const char*, const char*);

inline int soap_read_ns2__LoginFault(struct soap *soap, ns2__LoginFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get_ns2__LoginFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_ns2__LoginFault(struct soap *soap, const char *URL, ns2__LoginFault *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_ns2__LoginFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_ns2__LoginFault(struct soap *soap, ns2__LoginFault *p)
{
	if (afip::soap_read_ns2__LoginFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns1__loginCmsResponse_DEFINED
#define SOAP_TYPE_afip__ns1__loginCmsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginCmsResponse(struct soap*, const char*, int, const _ns1__loginCmsResponse *, const char*);
SOAP_FMAC3 _ns1__loginCmsResponse * SOAP_FMAC4 soap_in__ns1__loginCmsResponse(struct soap*, const char*, _ns1__loginCmsResponse *, const char*);
SOAP_FMAC1 _ns1__loginCmsResponse * SOAP_FMAC2 soap_instantiate__ns1__loginCmsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__loginCmsResponse * soap_new__ns1__loginCmsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__loginCmsResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__loginCmsResponse * soap_new_req__ns1__loginCmsResponse(
	struct soap *soap,
	const std::string& loginCmsReturn)
{
	_ns1__loginCmsResponse *_p = afip::soap_new__ns1__loginCmsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loginCmsResponse::loginCmsReturn = loginCmsReturn;
	}
	return _p;
}

inline _ns1__loginCmsResponse * soap_new_set__ns1__loginCmsResponse(
	struct soap *soap,
	const std::string& loginCmsReturn)
{
	_ns1__loginCmsResponse *_p = afip::soap_new__ns1__loginCmsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loginCmsResponse::loginCmsReturn = loginCmsReturn;
	}
	return _p;
}

inline int soap_write__ns1__loginCmsResponse(struct soap *soap, _ns1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCmsResponse", p->soap_type() == SOAP_TYPE_afip__ns1__loginCmsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__loginCmsResponse(struct soap *soap, const char *URL, _ns1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCmsResponse", p->soap_type() == SOAP_TYPE_afip__ns1__loginCmsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__loginCmsResponse(struct soap *soap, const char *URL, _ns1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCmsResponse", p->soap_type() == SOAP_TYPE_afip__ns1__loginCmsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__loginCmsResponse(struct soap *soap, const char *URL, _ns1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCmsResponse", p->soap_type() == SOAP_TYPE_afip__ns1__loginCmsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__loginCmsResponse * SOAP_FMAC4 soap_get__ns1__loginCmsResponse(struct soap*, _ns1__loginCmsResponse *, const char*, const char*);

inline int soap_read__ns1__loginCmsResponse(struct soap *soap, _ns1__loginCmsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns1__loginCmsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__loginCmsResponse(struct soap *soap, const char *URL, _ns1__loginCmsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns1__loginCmsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__loginCmsResponse(struct soap *soap, _ns1__loginCmsResponse *p)
{
	if (afip::soap_read__ns1__loginCmsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__ns1__loginCms_DEFINED
#define SOAP_TYPE_afip__ns1__loginCms_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__loginCms(struct soap*, const char*, int, const _ns1__loginCms *, const char*);
SOAP_FMAC3 _ns1__loginCms * SOAP_FMAC4 soap_in__ns1__loginCms(struct soap*, const char*, _ns1__loginCms *, const char*);
SOAP_FMAC1 _ns1__loginCms * SOAP_FMAC2 soap_instantiate__ns1__loginCms(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__loginCms * soap_new__ns1__loginCms(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__loginCms(soap, n, NULL, NULL, NULL);
}

inline _ns1__loginCms * soap_new_req__ns1__loginCms(
	struct soap *soap,
	const std::string& in0)
{
	_ns1__loginCms *_p = afip::soap_new__ns1__loginCms(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loginCms::in0 = in0;
	}
	return _p;
}

inline _ns1__loginCms * soap_new_set__ns1__loginCms(
	struct soap *soap,
	const std::string& in0)
{
	_ns1__loginCms *_p = afip::soap_new__ns1__loginCms(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__loginCms::in0 = in0;
	}
	return _p;
}

inline int soap_write__ns1__loginCms(struct soap *soap, _ns1__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCms", p->soap_type() == SOAP_TYPE_afip__ns1__loginCms ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__loginCms(struct soap *soap, const char *URL, _ns1__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCms", p->soap_type() == SOAP_TYPE_afip__ns1__loginCms ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__loginCms(struct soap *soap, const char *URL, _ns1__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCms", p->soap_type() == SOAP_TYPE_afip__ns1__loginCms ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__loginCms(struct soap *soap, const char *URL, _ns1__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:loginCms", p->soap_type() == SOAP_TYPE_afip__ns1__loginCms ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__loginCms * SOAP_FMAC4 soap_get__ns1__loginCms(struct soap*, _ns1__loginCms *, const char*, const char*);

inline int soap_read__ns1__loginCms(struct soap *soap, _ns1__loginCms *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || afip::soap_get__ns1__loginCms(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__loginCms(struct soap *soap, const char *URL, _ns1__loginCms *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__ns1__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__ns1__loginCms(struct soap *soap, _ns1__loginCms *p)
{
	if (afip::soap_read__ns1__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_afip_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = afip::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = afip::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || afip::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || afip::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || afip::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || afip::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	afip::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (afip::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_afip_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = afip::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = afip::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || afip::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || afip::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || afip::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || afip::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	afip::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (afip::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_afip_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = afip::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = afip::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize_SOAP_ENV__Code(soap, p), 0) || afip::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Code(soap, p), 0) || afip::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Code(soap, p), 0) || afip::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Code(soap, p), 0) || afip::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	afip::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (afip::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_afip_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = afip::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = afip::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize_SOAP_ENV__Header(soap, p), 0) || afip::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Header(soap, p), 0) || afip::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Header(soap, p), 0) || afip::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Header(soap, p), 0) || afip::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	afip::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (afip::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposPaises__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposPaises__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposPaises_(struct soap*, struct __ns3__FEParamGetTiposPaises_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposPaises_(struct soap*, const struct __ns3__FEParamGetTiposPaises_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposPaises_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposPaises_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposPaises_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposPaises_(struct soap*, const char*, struct __ns3__FEParamGetTiposPaises_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposPaises_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposPaises_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposPaises_ * soap_new___ns3__FEParamGetTiposPaises_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposPaises_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposPaises_ * soap_new_req___ns3__FEParamGetTiposPaises_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposPaises_ *_p = afip::soap_new___ns3__FEParamGetTiposPaises_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposPaises_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposPaises_ * soap_new_set___ns3__FEParamGetTiposPaises_(
	struct soap *soap,
	_ns3__FEParamGetTiposPaises *ns3__FEParamGetTiposPaises)
{
	struct __ns3__FEParamGetTiposPaises_ *_p = afip::soap_new___ns3__FEParamGetTiposPaises_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposPaises_(soap, _p);
		_p->ns3__FEParamGetTiposPaises = ns3__FEParamGetTiposPaises;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposPaises_(struct soap*, const struct __ns3__FEParamGetTiposPaises_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposPaises_(struct soap *soap, struct __ns3__FEParamGetTiposPaises_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposPaises_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises_(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposPaises_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposPaises_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises_(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposPaises_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposPaises_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises_(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposPaises_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposPaises_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises_(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposPaises_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposPaises_(struct soap*, struct __ns3__FEParamGetTiposPaises_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposPaises_(struct soap *soap, struct __ns3__FEParamGetTiposPaises_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposPaises_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposPaises_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposPaises_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposPaises_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposPaises_(struct soap *soap, struct __ns3__FEParamGetTiposPaises_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposPaises_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposDoc__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposDoc__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposDoc_(struct soap*, struct __ns3__FEParamGetTiposDoc_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposDoc_(struct soap*, const struct __ns3__FEParamGetTiposDoc_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposDoc_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposDoc_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposDoc_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposDoc_(struct soap*, const char*, struct __ns3__FEParamGetTiposDoc_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposDoc_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposDoc_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposDoc_ * soap_new___ns3__FEParamGetTiposDoc_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposDoc_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposDoc_ * soap_new_req___ns3__FEParamGetTiposDoc_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposDoc_ *_p = afip::soap_new___ns3__FEParamGetTiposDoc_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposDoc_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposDoc_ * soap_new_set___ns3__FEParamGetTiposDoc_(
	struct soap *soap,
	_ns3__FEParamGetTiposDoc *ns3__FEParamGetTiposDoc)
{
	struct __ns3__FEParamGetTiposDoc_ *_p = afip::soap_new___ns3__FEParamGetTiposDoc_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposDoc_(soap, _p);
		_p->ns3__FEParamGetTiposDoc = ns3__FEParamGetTiposDoc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposDoc_(struct soap*, const struct __ns3__FEParamGetTiposDoc_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposDoc_(struct soap *soap, struct __ns3__FEParamGetTiposDoc_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposDoc_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc_(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposDoc_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposDoc_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc_(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposDoc_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposDoc_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc_(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposDoc_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposDoc_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc_(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposDoc_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposDoc_(struct soap*, struct __ns3__FEParamGetTiposDoc_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposDoc_(struct soap *soap, struct __ns3__FEParamGetTiposDoc_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposDoc_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposDoc_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposDoc_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposDoc_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposDoc_(struct soap *soap, struct __ns3__FEParamGetTiposDoc_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposDoc_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposCbte__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposCbte__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposCbte_(struct soap*, struct __ns3__FEParamGetTiposCbte_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposCbte_(struct soap*, const struct __ns3__FEParamGetTiposCbte_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposCbte_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposCbte_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposCbte_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposCbte_(struct soap*, const char*, struct __ns3__FEParamGetTiposCbte_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposCbte_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposCbte_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposCbte_ * soap_new___ns3__FEParamGetTiposCbte_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposCbte_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposCbte_ * soap_new_req___ns3__FEParamGetTiposCbte_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposCbte_ *_p = afip::soap_new___ns3__FEParamGetTiposCbte_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposCbte_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposCbte_ * soap_new_set___ns3__FEParamGetTiposCbte_(
	struct soap *soap,
	_ns3__FEParamGetTiposCbte *ns3__FEParamGetTiposCbte)
{
	struct __ns3__FEParamGetTiposCbte_ *_p = afip::soap_new___ns3__FEParamGetTiposCbte_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposCbte_(soap, _p);
		_p->ns3__FEParamGetTiposCbte = ns3__FEParamGetTiposCbte;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposCbte_(struct soap*, const struct __ns3__FEParamGetTiposCbte_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposCbte_(struct soap *soap, struct __ns3__FEParamGetTiposCbte_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposCbte_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte_(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposCbte_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposCbte_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte_(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposCbte_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposCbte_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte_(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposCbte_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposCbte_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte_(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposCbte_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposCbte_(struct soap*, struct __ns3__FEParamGetTiposCbte_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposCbte_(struct soap *soap, struct __ns3__FEParamGetTiposCbte_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposCbte_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposCbte_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposCbte_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposCbte_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposCbte_(struct soap *soap, struct __ns3__FEParamGetTiposCbte_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposCbte_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetPtosVenta__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetPtosVenta__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetPtosVenta_(struct soap*, struct __ns3__FEParamGetPtosVenta_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetPtosVenta_(struct soap*, const struct __ns3__FEParamGetPtosVenta_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetPtosVenta_(struct soap*, const char*, int, const struct __ns3__FEParamGetPtosVenta_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetPtosVenta_ * SOAP_FMAC4 soap_in___ns3__FEParamGetPtosVenta_(struct soap*, const char*, struct __ns3__FEParamGetPtosVenta_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetPtosVenta_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetPtosVenta_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetPtosVenta_ * soap_new___ns3__FEParamGetPtosVenta_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetPtosVenta_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetPtosVenta_ * soap_new_req___ns3__FEParamGetPtosVenta_(
	struct soap *soap)
{
	struct __ns3__FEParamGetPtosVenta_ *_p = afip::soap_new___ns3__FEParamGetPtosVenta_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetPtosVenta_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetPtosVenta_ * soap_new_set___ns3__FEParamGetPtosVenta_(
	struct soap *soap,
	_ns3__FEParamGetPtosVenta *ns3__FEParamGetPtosVenta)
{
	struct __ns3__FEParamGetPtosVenta_ *_p = afip::soap_new___ns3__FEParamGetPtosVenta_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetPtosVenta_(soap, _p);
		_p->ns3__FEParamGetPtosVenta = ns3__FEParamGetPtosVenta;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetPtosVenta_(struct soap*, const struct __ns3__FEParamGetPtosVenta_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetPtosVenta_(struct soap *soap, struct __ns3__FEParamGetPtosVenta_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetPtosVenta_(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta_(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetPtosVenta_(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetPtosVenta_(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta_(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetPtosVenta_(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetPtosVenta_(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta_(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetPtosVenta_(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetPtosVenta_(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta_(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetPtosVenta_ * SOAP_FMAC4 soap_get___ns3__FEParamGetPtosVenta_(struct soap*, struct __ns3__FEParamGetPtosVenta_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetPtosVenta_(struct soap *soap, struct __ns3__FEParamGetPtosVenta_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetPtosVenta_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetPtosVenta_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetPtosVenta_(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetPtosVenta_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetPtosVenta_(struct soap *soap, struct __ns3__FEParamGetPtosVenta_ *p)
{
	if (afip::soap_read___ns3__FEParamGetPtosVenta_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposConcepto_(struct soap*, struct __ns3__FEParamGetTiposConcepto_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposConcepto_(struct soap*, const struct __ns3__FEParamGetTiposConcepto_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposConcepto_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposConcepto_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposConcepto_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposConcepto_(struct soap*, const char*, struct __ns3__FEParamGetTiposConcepto_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposConcepto_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposConcepto_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposConcepto_ * soap_new___ns3__FEParamGetTiposConcepto_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposConcepto_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposConcepto_ * soap_new_req___ns3__FEParamGetTiposConcepto_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposConcepto_ *_p = afip::soap_new___ns3__FEParamGetTiposConcepto_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposConcepto_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposConcepto_ * soap_new_set___ns3__FEParamGetTiposConcepto_(
	struct soap *soap,
	_ns3__FEParamGetTiposConcepto *ns3__FEParamGetTiposConcepto)
{
	struct __ns3__FEParamGetTiposConcepto_ *_p = afip::soap_new___ns3__FEParamGetTiposConcepto_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposConcepto_(soap, _p);
		_p->ns3__FEParamGetTiposConcepto = ns3__FEParamGetTiposConcepto;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposConcepto_(struct soap*, const struct __ns3__FEParamGetTiposConcepto_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposConcepto_(struct soap *soap, struct __ns3__FEParamGetTiposConcepto_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposConcepto_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto_(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposConcepto_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposConcepto_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto_(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposConcepto_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposConcepto_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto_(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposConcepto_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposConcepto_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto_(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposConcepto_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposConcepto_(struct soap*, struct __ns3__FEParamGetTiposConcepto_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposConcepto_(struct soap *soap, struct __ns3__FEParamGetTiposConcepto_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposConcepto_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposConcepto_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposConcepto_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposConcepto_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposConcepto_(struct soap *soap, struct __ns3__FEParamGetTiposConcepto_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposConcepto_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposOpcional_(struct soap*, struct __ns3__FEParamGetTiposOpcional_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposOpcional_(struct soap*, const struct __ns3__FEParamGetTiposOpcional_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposOpcional_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposOpcional_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposOpcional_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposOpcional_(struct soap*, const char*, struct __ns3__FEParamGetTiposOpcional_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposOpcional_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposOpcional_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposOpcional_ * soap_new___ns3__FEParamGetTiposOpcional_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposOpcional_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposOpcional_ * soap_new_req___ns3__FEParamGetTiposOpcional_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposOpcional_ *_p = afip::soap_new___ns3__FEParamGetTiposOpcional_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposOpcional_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposOpcional_ * soap_new_set___ns3__FEParamGetTiposOpcional_(
	struct soap *soap,
	_ns3__FEParamGetTiposOpcional *ns3__FEParamGetTiposOpcional)
{
	struct __ns3__FEParamGetTiposOpcional_ *_p = afip::soap_new___ns3__FEParamGetTiposOpcional_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposOpcional_(soap, _p);
		_p->ns3__FEParamGetTiposOpcional = ns3__FEParamGetTiposOpcional;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposOpcional_(struct soap*, const struct __ns3__FEParamGetTiposOpcional_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposOpcional_(struct soap *soap, struct __ns3__FEParamGetTiposOpcional_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposOpcional_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional_(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposOpcional_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposOpcional_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional_(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposOpcional_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposOpcional_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional_(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposOpcional_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposOpcional_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional_(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposOpcional_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposOpcional_(struct soap*, struct __ns3__FEParamGetTiposOpcional_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposOpcional_(struct soap *soap, struct __ns3__FEParamGetTiposOpcional_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposOpcional_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposOpcional_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposOpcional_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposOpcional_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposOpcional_(struct soap *soap, struct __ns3__FEParamGetTiposOpcional_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposOpcional_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposIva__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposIva__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposIva_(struct soap*, struct __ns3__FEParamGetTiposIva_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposIva_(struct soap*, const struct __ns3__FEParamGetTiposIva_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposIva_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposIva_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposIva_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposIva_(struct soap*, const char*, struct __ns3__FEParamGetTiposIva_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposIva_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposIva_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposIva_ * soap_new___ns3__FEParamGetTiposIva_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposIva_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposIva_ * soap_new_req___ns3__FEParamGetTiposIva_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposIva_ *_p = afip::soap_new___ns3__FEParamGetTiposIva_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposIva_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposIva_ * soap_new_set___ns3__FEParamGetTiposIva_(
	struct soap *soap,
	_ns3__FEParamGetTiposIva *ns3__FEParamGetTiposIva)
{
	struct __ns3__FEParamGetTiposIva_ *_p = afip::soap_new___ns3__FEParamGetTiposIva_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposIva_(soap, _p);
		_p->ns3__FEParamGetTiposIva = ns3__FEParamGetTiposIva;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposIva_(struct soap*, const struct __ns3__FEParamGetTiposIva_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposIva_(struct soap *soap, struct __ns3__FEParamGetTiposIva_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposIva_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva_(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposIva_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposIva_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva_(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposIva_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposIva_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva_(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposIva_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposIva_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva_(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposIva_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposIva_(struct soap*, struct __ns3__FEParamGetTiposIva_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposIva_(struct soap *soap, struct __ns3__FEParamGetTiposIva_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposIva_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposIva_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposIva_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposIva_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposIva_(struct soap *soap, struct __ns3__FEParamGetTiposIva_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposIva_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposMonedas_(struct soap*, struct __ns3__FEParamGetTiposMonedas_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposMonedas_(struct soap*, const struct __ns3__FEParamGetTiposMonedas_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposMonedas_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposMonedas_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposMonedas_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposMonedas_(struct soap*, const char*, struct __ns3__FEParamGetTiposMonedas_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposMonedas_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposMonedas_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposMonedas_ * soap_new___ns3__FEParamGetTiposMonedas_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposMonedas_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposMonedas_ * soap_new_req___ns3__FEParamGetTiposMonedas_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposMonedas_ *_p = afip::soap_new___ns3__FEParamGetTiposMonedas_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposMonedas_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposMonedas_ * soap_new_set___ns3__FEParamGetTiposMonedas_(
	struct soap *soap,
	_ns3__FEParamGetTiposMonedas *ns3__FEParamGetTiposMonedas)
{
	struct __ns3__FEParamGetTiposMonedas_ *_p = afip::soap_new___ns3__FEParamGetTiposMonedas_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposMonedas_(soap, _p);
		_p->ns3__FEParamGetTiposMonedas = ns3__FEParamGetTiposMonedas;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposMonedas_(struct soap*, const struct __ns3__FEParamGetTiposMonedas_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposMonedas_(struct soap *soap, struct __ns3__FEParamGetTiposMonedas_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposMonedas_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas_(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposMonedas_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposMonedas_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas_(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposMonedas_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposMonedas_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas_(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposMonedas_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposMonedas_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas_(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposMonedas_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposMonedas_(struct soap*, struct __ns3__FEParamGetTiposMonedas_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposMonedas_(struct soap *soap, struct __ns3__FEParamGetTiposMonedas_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposMonedas_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposMonedas_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposMonedas_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposMonedas_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposMonedas_(struct soap *soap, struct __ns3__FEParamGetTiposMonedas_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposMonedas_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposTributos__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposTributos__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposTributos_(struct soap*, struct __ns3__FEParamGetTiposTributos_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposTributos_(struct soap*, const struct __ns3__FEParamGetTiposTributos_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposTributos_(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposTributos_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposTributos_ * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposTributos_(struct soap*, const char*, struct __ns3__FEParamGetTiposTributos_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposTributos_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposTributos_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposTributos_ * soap_new___ns3__FEParamGetTiposTributos_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposTributos_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposTributos_ * soap_new_req___ns3__FEParamGetTiposTributos_(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposTributos_ *_p = afip::soap_new___ns3__FEParamGetTiposTributos_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposTributos_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposTributos_ * soap_new_set___ns3__FEParamGetTiposTributos_(
	struct soap *soap,
	_ns3__FEParamGetTiposTributos *ns3__FEParamGetTiposTributos)
{
	struct __ns3__FEParamGetTiposTributos_ *_p = afip::soap_new___ns3__FEParamGetTiposTributos_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposTributos_(soap, _p);
		_p->ns3__FEParamGetTiposTributos = ns3__FEParamGetTiposTributos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposTributos_(struct soap*, const struct __ns3__FEParamGetTiposTributos_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposTributos_(struct soap *soap, struct __ns3__FEParamGetTiposTributos_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposTributos_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos_(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposTributos_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposTributos_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos_(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposTributos_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposTributos_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos_(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposTributos_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposTributos_(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos_(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposTributos_ * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposTributos_(struct soap*, struct __ns3__FEParamGetTiposTributos_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposTributos_(struct soap *soap, struct __ns3__FEParamGetTiposTributos_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposTributos_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposTributos_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposTributos_(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposTributos_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposTributos_(struct soap *soap, struct __ns3__FEParamGetTiposTributos_ *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposTributos_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetCotizacion__DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetCotizacion__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetCotizacion_(struct soap*, struct __ns3__FEParamGetCotizacion_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetCotizacion_(struct soap*, const struct __ns3__FEParamGetCotizacion_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetCotizacion_(struct soap*, const char*, int, const struct __ns3__FEParamGetCotizacion_ *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetCotizacion_ * SOAP_FMAC4 soap_in___ns3__FEParamGetCotizacion_(struct soap*, const char*, struct __ns3__FEParamGetCotizacion_ *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetCotizacion_ * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetCotizacion_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetCotizacion_ * soap_new___ns3__FEParamGetCotizacion_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetCotizacion_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetCotizacion_ * soap_new_req___ns3__FEParamGetCotizacion_(
	struct soap *soap)
{
	struct __ns3__FEParamGetCotizacion_ *_p = afip::soap_new___ns3__FEParamGetCotizacion_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetCotizacion_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetCotizacion_ * soap_new_set___ns3__FEParamGetCotizacion_(
	struct soap *soap,
	_ns3__FEParamGetCotizacion *ns3__FEParamGetCotizacion)
{
	struct __ns3__FEParamGetCotizacion_ *_p = afip::soap_new___ns3__FEParamGetCotizacion_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetCotizacion_(soap, _p);
		_p->ns3__FEParamGetCotizacion = ns3__FEParamGetCotizacion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetCotizacion_(struct soap*, const struct __ns3__FEParamGetCotizacion_ *, const char*, const char*);

inline int soap_write___ns3__FEParamGetCotizacion_(struct soap *soap, struct __ns3__FEParamGetCotizacion_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetCotizacion_(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion_(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetCotizacion_(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetCotizacion_(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion_(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetCotizacion_(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetCotizacion_(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion_(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetCotizacion_(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetCotizacion_(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion_(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetCotizacion_ * SOAP_FMAC4 soap_get___ns3__FEParamGetCotizacion_(struct soap*, struct __ns3__FEParamGetCotizacion_ *, const char*, const char*);

inline int soap_read___ns3__FEParamGetCotizacion_(struct soap *soap, struct __ns3__FEParamGetCotizacion_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetCotizacion_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetCotizacion_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetCotizacion_(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetCotizacion_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetCotizacion_(struct soap *soap, struct __ns3__FEParamGetCotizacion_ *p)
{
	if (afip::soap_read___ns3__FEParamGetCotizacion_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEAConsultar__DEFINED
#define SOAP_TYPE_afip___ns3__FECAEAConsultar__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEAConsultar_(struct soap*, struct __ns3__FECAEAConsultar_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEAConsultar_(struct soap*, const struct __ns3__FECAEAConsultar_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEAConsultar_(struct soap*, const char*, int, const struct __ns3__FECAEAConsultar_ *, const char*);
SOAP_FMAC3 struct __ns3__FECAEAConsultar_ * SOAP_FMAC4 soap_in___ns3__FECAEAConsultar_(struct soap*, const char*, struct __ns3__FECAEAConsultar_ *, const char*);
SOAP_FMAC1 struct __ns3__FECAEAConsultar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEAConsultar_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEAConsultar_ * soap_new___ns3__FECAEAConsultar_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEAConsultar_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEAConsultar_ * soap_new_req___ns3__FECAEAConsultar_(
	struct soap *soap)
{
	struct __ns3__FECAEAConsultar_ *_p = afip::soap_new___ns3__FECAEAConsultar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEAConsultar_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEAConsultar_ * soap_new_set___ns3__FECAEAConsultar_(
	struct soap *soap,
	_ns3__FECAEAConsultar *ns3__FECAEAConsultar)
{
	struct __ns3__FECAEAConsultar_ *_p = afip::soap_new___ns3__FECAEAConsultar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEAConsultar_(soap, _p);
		_p->ns3__FECAEAConsultar = ns3__FECAEAConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEAConsultar_(struct soap*, const struct __ns3__FECAEAConsultar_ *, const char*, const char*);

inline int soap_write___ns3__FECAEAConsultar_(struct soap *soap, struct __ns3__FECAEAConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEAConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar_(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEAConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEAConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar_(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEAConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEAConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar_(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEAConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEAConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar_(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEAConsultar_ * SOAP_FMAC4 soap_get___ns3__FECAEAConsultar_(struct soap*, struct __ns3__FECAEAConsultar_ *, const char*, const char*);

inline int soap_read___ns3__FECAEAConsultar_(struct soap *soap, struct __ns3__FECAEAConsultar_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEAConsultar_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEAConsultar_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEAConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEAConsultar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEAConsultar_(struct soap *soap, struct __ns3__FECAEAConsultar_ *p)
{
	if (afip::soap_read___ns3__FECAEAConsultar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar__DEFINED
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEASinMovimientoInformar_(struct soap*, struct __ns3__FECAEASinMovimientoInformar_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEASinMovimientoInformar_(struct soap*, const struct __ns3__FECAEASinMovimientoInformar_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEASinMovimientoInformar_(struct soap*, const char*, int, const struct __ns3__FECAEASinMovimientoInformar_ *, const char*);
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoInformar_ * SOAP_FMAC4 soap_in___ns3__FECAEASinMovimientoInformar_(struct soap*, const char*, struct __ns3__FECAEASinMovimientoInformar_ *, const char*);
SOAP_FMAC1 struct __ns3__FECAEASinMovimientoInformar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoInformar_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEASinMovimientoInformar_ * soap_new___ns3__FECAEASinMovimientoInformar_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEASinMovimientoInformar_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEASinMovimientoInformar_ * soap_new_req___ns3__FECAEASinMovimientoInformar_(
	struct soap *soap)
{
	struct __ns3__FECAEASinMovimientoInformar_ *_p = afip::soap_new___ns3__FECAEASinMovimientoInformar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoInformar_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEASinMovimientoInformar_ * soap_new_set___ns3__FECAEASinMovimientoInformar_(
	struct soap *soap,
	_ns3__FECAEASinMovimientoInformar *ns3__FECAEASinMovimientoInformar)
{
	struct __ns3__FECAEASinMovimientoInformar_ *_p = afip::soap_new___ns3__FECAEASinMovimientoInformar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoInformar_(soap, _p);
		_p->ns3__FECAEASinMovimientoInformar = ns3__FECAEASinMovimientoInformar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEASinMovimientoInformar_(struct soap*, const struct __ns3__FECAEASinMovimientoInformar_ *, const char*, const char*);

inline int soap_write___ns3__FECAEASinMovimientoInformar_(struct soap *soap, struct __ns3__FECAEASinMovimientoInformar_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar_(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEASinMovimientoInformar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar_(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEASinMovimientoInformar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar_(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEASinMovimientoInformar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar_(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoInformar_ * SOAP_FMAC4 soap_get___ns3__FECAEASinMovimientoInformar_(struct soap*, struct __ns3__FECAEASinMovimientoInformar_ *, const char*, const char*);

inline int soap_read___ns3__FECAEASinMovimientoInformar_(struct soap *soap, struct __ns3__FECAEASinMovimientoInformar_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEASinMovimientoInformar_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEASinMovimientoInformar_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEASinMovimientoInformar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEASinMovimientoInformar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEASinMovimientoInformar_(struct soap *soap, struct __ns3__FECAEASinMovimientoInformar_ *p)
{
	if (afip::soap_read___ns3__FECAEASinMovimientoInformar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar__DEFINED
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEASinMovimientoConsultar_(struct soap*, struct __ns3__FECAEASinMovimientoConsultar_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEASinMovimientoConsultar_(struct soap*, const struct __ns3__FECAEASinMovimientoConsultar_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEASinMovimientoConsultar_(struct soap*, const char*, int, const struct __ns3__FECAEASinMovimientoConsultar_ *, const char*);
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoConsultar_ * SOAP_FMAC4 soap_in___ns3__FECAEASinMovimientoConsultar_(struct soap*, const char*, struct __ns3__FECAEASinMovimientoConsultar_ *, const char*);
SOAP_FMAC1 struct __ns3__FECAEASinMovimientoConsultar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoConsultar_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEASinMovimientoConsultar_ * soap_new___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEASinMovimientoConsultar_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEASinMovimientoConsultar_ * soap_new_req___ns3__FECAEASinMovimientoConsultar_(
	struct soap *soap)
{
	struct __ns3__FECAEASinMovimientoConsultar_ *_p = afip::soap_new___ns3__FECAEASinMovimientoConsultar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoConsultar_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEASinMovimientoConsultar_ * soap_new_set___ns3__FECAEASinMovimientoConsultar_(
	struct soap *soap,
	_ns3__FECAEASinMovimientoConsultar *ns3__FECAEASinMovimientoConsultar)
{
	struct __ns3__FECAEASinMovimientoConsultar_ *_p = afip::soap_new___ns3__FECAEASinMovimientoConsultar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoConsultar_(soap, _p);
		_p->ns3__FECAEASinMovimientoConsultar = ns3__FECAEASinMovimientoConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEASinMovimientoConsultar_(struct soap*, const struct __ns3__FECAEASinMovimientoConsultar_ *, const char*, const char*);

inline int soap_write___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, struct __ns3__FECAEASinMovimientoConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar_(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar_(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar_(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar_(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar_(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoConsultar_ * SOAP_FMAC4 soap_get___ns3__FECAEASinMovimientoConsultar_(struct soap*, struct __ns3__FECAEASinMovimientoConsultar_ *, const char*, const char*);

inline int soap_read___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, struct __ns3__FECAEASinMovimientoConsultar_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEASinMovimientoConsultar_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEASinMovimientoConsultar_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEASinMovimientoConsultar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEASinMovimientoConsultar_(struct soap *soap, struct __ns3__FECAEASinMovimientoConsultar_ *p)
{
	if (afip::soap_read___ns3__FECAEASinMovimientoConsultar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEASolicitar__DEFINED
#define SOAP_TYPE_afip___ns3__FECAEASolicitar__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEASolicitar_(struct soap*, struct __ns3__FECAEASolicitar_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEASolicitar_(struct soap*, const struct __ns3__FECAEASolicitar_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEASolicitar_(struct soap*, const char*, int, const struct __ns3__FECAEASolicitar_ *, const char*);
SOAP_FMAC3 struct __ns3__FECAEASolicitar_ * SOAP_FMAC4 soap_in___ns3__FECAEASolicitar_(struct soap*, const char*, struct __ns3__FECAEASolicitar_ *, const char*);
SOAP_FMAC1 struct __ns3__FECAEASolicitar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEASolicitar_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEASolicitar_ * soap_new___ns3__FECAEASolicitar_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEASolicitar_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEASolicitar_ * soap_new_req___ns3__FECAEASolicitar_(
	struct soap *soap)
{
	struct __ns3__FECAEASolicitar_ *_p = afip::soap_new___ns3__FECAEASolicitar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASolicitar_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEASolicitar_ * soap_new_set___ns3__FECAEASolicitar_(
	struct soap *soap,
	_ns3__FECAEASolicitar *ns3__FECAEASolicitar)
{
	struct __ns3__FECAEASolicitar_ *_p = afip::soap_new___ns3__FECAEASolicitar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASolicitar_(soap, _p);
		_p->ns3__FECAEASolicitar = ns3__FECAEASolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEASolicitar_(struct soap*, const struct __ns3__FECAEASolicitar_ *, const char*, const char*);

inline int soap_write___ns3__FECAEASolicitar_(struct soap *soap, struct __ns3__FECAEASolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEASolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar_(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEASolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar_(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEASolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar_(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEASolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar_(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEASolicitar_ * SOAP_FMAC4 soap_get___ns3__FECAEASolicitar_(struct soap*, struct __ns3__FECAEASolicitar_ *, const char*, const char*);

inline int soap_read___ns3__FECAEASolicitar_(struct soap *soap, struct __ns3__FECAEASolicitar_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEASolicitar_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEASolicitar_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEASolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEASolicitar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEASolicitar_(struct soap *soap, struct __ns3__FECAEASolicitar_ *p)
{
	if (afip::soap_read___ns3__FECAEASolicitar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEARegInformativo__DEFINED
#define SOAP_TYPE_afip___ns3__FECAEARegInformativo__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEARegInformativo_(struct soap*, struct __ns3__FECAEARegInformativo_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEARegInformativo_(struct soap*, const struct __ns3__FECAEARegInformativo_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEARegInformativo_(struct soap*, const char*, int, const struct __ns3__FECAEARegInformativo_ *, const char*);
SOAP_FMAC3 struct __ns3__FECAEARegInformativo_ * SOAP_FMAC4 soap_in___ns3__FECAEARegInformativo_(struct soap*, const char*, struct __ns3__FECAEARegInformativo_ *, const char*);
SOAP_FMAC1 struct __ns3__FECAEARegInformativo_ * SOAP_FMAC2 soap_instantiate___ns3__FECAEARegInformativo_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEARegInformativo_ * soap_new___ns3__FECAEARegInformativo_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEARegInformativo_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEARegInformativo_ * soap_new_req___ns3__FECAEARegInformativo_(
	struct soap *soap)
{
	struct __ns3__FECAEARegInformativo_ *_p = afip::soap_new___ns3__FECAEARegInformativo_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEARegInformativo_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEARegInformativo_ * soap_new_set___ns3__FECAEARegInformativo_(
	struct soap *soap,
	_ns3__FECAEARegInformativo *ns3__FECAEARegInformativo)
{
	struct __ns3__FECAEARegInformativo_ *_p = afip::soap_new___ns3__FECAEARegInformativo_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEARegInformativo_(soap, _p);
		_p->ns3__FECAEARegInformativo = ns3__FECAEARegInformativo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEARegInformativo_(struct soap*, const struct __ns3__FECAEARegInformativo_ *, const char*, const char*);

inline int soap_write___ns3__FECAEARegInformativo_(struct soap *soap, struct __ns3__FECAEARegInformativo_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEARegInformativo_(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo_(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEARegInformativo_(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEARegInformativo_(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo_(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEARegInformativo_(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEARegInformativo_(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo_(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEARegInformativo_(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEARegInformativo_(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo_(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEARegInformativo_ * SOAP_FMAC4 soap_get___ns3__FECAEARegInformativo_(struct soap*, struct __ns3__FECAEARegInformativo_ *, const char*, const char*);

inline int soap_read___ns3__FECAEARegInformativo_(struct soap *soap, struct __ns3__FECAEARegInformativo_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEARegInformativo_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEARegInformativo_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEARegInformativo_(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEARegInformativo_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEARegInformativo_(struct soap *soap, struct __ns3__FECAEARegInformativo_ *p)
{
	if (afip::soap_read___ns3__FECAEARegInformativo_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECompConsultar__DEFINED
#define SOAP_TYPE_afip___ns3__FECompConsultar__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECompConsultar_(struct soap*, struct __ns3__FECompConsultar_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECompConsultar_(struct soap*, const struct __ns3__FECompConsultar_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECompConsultar_(struct soap*, const char*, int, const struct __ns3__FECompConsultar_ *, const char*);
SOAP_FMAC3 struct __ns3__FECompConsultar_ * SOAP_FMAC4 soap_in___ns3__FECompConsultar_(struct soap*, const char*, struct __ns3__FECompConsultar_ *, const char*);
SOAP_FMAC1 struct __ns3__FECompConsultar_ * SOAP_FMAC2 soap_instantiate___ns3__FECompConsultar_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECompConsultar_ * soap_new___ns3__FECompConsultar_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECompConsultar_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECompConsultar_ * soap_new_req___ns3__FECompConsultar_(
	struct soap *soap)
{
	struct __ns3__FECompConsultar_ *_p = afip::soap_new___ns3__FECompConsultar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompConsultar_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECompConsultar_ * soap_new_set___ns3__FECompConsultar_(
	struct soap *soap,
	_ns3__FECompConsultar *ns3__FECompConsultar)
{
	struct __ns3__FECompConsultar_ *_p = afip::soap_new___ns3__FECompConsultar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompConsultar_(soap, _p);
		_p->ns3__FECompConsultar = ns3__FECompConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECompConsultar_(struct soap*, const struct __ns3__FECompConsultar_ *, const char*, const char*);

inline int soap_write___ns3__FECompConsultar_(struct soap *soap, struct __ns3__FECompConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECompConsultar_(soap, p), 0) || afip::soap_put___ns3__FECompConsultar_(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECompConsultar_(struct soap *soap, const char *URL, struct __ns3__FECompConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompConsultar_(soap, p), 0) || afip::soap_put___ns3__FECompConsultar_(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECompConsultar_(struct soap *soap, const char *URL, struct __ns3__FECompConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompConsultar_(soap, p), 0) || afip::soap_put___ns3__FECompConsultar_(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECompConsultar_(struct soap *soap, const char *URL, struct __ns3__FECompConsultar_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompConsultar_(soap, p), 0) || afip::soap_put___ns3__FECompConsultar_(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECompConsultar_ * SOAP_FMAC4 soap_get___ns3__FECompConsultar_(struct soap*, struct __ns3__FECompConsultar_ *, const char*, const char*);

inline int soap_read___ns3__FECompConsultar_(struct soap *soap, struct __ns3__FECompConsultar_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECompConsultar_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECompConsultar_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECompConsultar_(struct soap *soap, const char *URL, struct __ns3__FECompConsultar_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECompConsultar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECompConsultar_(struct soap *soap, struct __ns3__FECompConsultar_ *p)
{
	if (afip::soap_read___ns3__FECompConsultar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECompUltimoAutorizado__DEFINED
#define SOAP_TYPE_afip___ns3__FECompUltimoAutorizado__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECompUltimoAutorizado_(struct soap*, struct __ns3__FECompUltimoAutorizado_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECompUltimoAutorizado_(struct soap*, const struct __ns3__FECompUltimoAutorizado_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECompUltimoAutorizado_(struct soap*, const char*, int, const struct __ns3__FECompUltimoAutorizado_ *, const char*);
SOAP_FMAC3 struct __ns3__FECompUltimoAutorizado_ * SOAP_FMAC4 soap_in___ns3__FECompUltimoAutorizado_(struct soap*, const char*, struct __ns3__FECompUltimoAutorizado_ *, const char*);
SOAP_FMAC1 struct __ns3__FECompUltimoAutorizado_ * SOAP_FMAC2 soap_instantiate___ns3__FECompUltimoAutorizado_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECompUltimoAutorizado_ * soap_new___ns3__FECompUltimoAutorizado_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECompUltimoAutorizado_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECompUltimoAutorizado_ * soap_new_req___ns3__FECompUltimoAutorizado_(
	struct soap *soap)
{
	struct __ns3__FECompUltimoAutorizado_ *_p = afip::soap_new___ns3__FECompUltimoAutorizado_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompUltimoAutorizado_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECompUltimoAutorizado_ * soap_new_set___ns3__FECompUltimoAutorizado_(
	struct soap *soap,
	_ns3__FECompUltimoAutorizado *ns3__FECompUltimoAutorizado)
{
	struct __ns3__FECompUltimoAutorizado_ *_p = afip::soap_new___ns3__FECompUltimoAutorizado_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompUltimoAutorizado_(soap, _p);
		_p->ns3__FECompUltimoAutorizado = ns3__FECompUltimoAutorizado;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECompUltimoAutorizado_(struct soap*, const struct __ns3__FECompUltimoAutorizado_ *, const char*, const char*);

inline int soap_write___ns3__FECompUltimoAutorizado_(struct soap *soap, struct __ns3__FECompUltimoAutorizado_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECompUltimoAutorizado_(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado_(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECompUltimoAutorizado_(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompUltimoAutorizado_(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado_(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECompUltimoAutorizado_(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompUltimoAutorizado_(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado_(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECompUltimoAutorizado_(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompUltimoAutorizado_(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado_(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECompUltimoAutorizado_ * SOAP_FMAC4 soap_get___ns3__FECompUltimoAutorizado_(struct soap*, struct __ns3__FECompUltimoAutorizado_ *, const char*, const char*);

inline int soap_read___ns3__FECompUltimoAutorizado_(struct soap *soap, struct __ns3__FECompUltimoAutorizado_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECompUltimoAutorizado_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECompUltimoAutorizado_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECompUltimoAutorizado_(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECompUltimoAutorizado_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECompUltimoAutorizado_(struct soap *soap, struct __ns3__FECompUltimoAutorizado_ *p)
{
	if (afip::soap_read___ns3__FECompUltimoAutorizado_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEDummy__DEFINED
#define SOAP_TYPE_afip___ns3__FEDummy__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEDummy_(struct soap*, struct __ns3__FEDummy_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEDummy_(struct soap*, const struct __ns3__FEDummy_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEDummy_(struct soap*, const char*, int, const struct __ns3__FEDummy_ *, const char*);
SOAP_FMAC3 struct __ns3__FEDummy_ * SOAP_FMAC4 soap_in___ns3__FEDummy_(struct soap*, const char*, struct __ns3__FEDummy_ *, const char*);
SOAP_FMAC1 struct __ns3__FEDummy_ * SOAP_FMAC2 soap_instantiate___ns3__FEDummy_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEDummy_ * soap_new___ns3__FEDummy_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEDummy_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEDummy_ * soap_new_req___ns3__FEDummy_(
	struct soap *soap)
{
	struct __ns3__FEDummy_ *_p = afip::soap_new___ns3__FEDummy_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEDummy_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEDummy_ * soap_new_set___ns3__FEDummy_(
	struct soap *soap,
	_ns3__FEDummy *ns3__FEDummy)
{
	struct __ns3__FEDummy_ *_p = afip::soap_new___ns3__FEDummy_(soap);
	if (_p)
	{	afip::soap_default___ns3__FEDummy_(soap, _p);
		_p->ns3__FEDummy = ns3__FEDummy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEDummy_(struct soap*, const struct __ns3__FEDummy_ *, const char*, const char*);

inline int soap_write___ns3__FEDummy_(struct soap *soap, struct __ns3__FEDummy_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEDummy_(soap, p), 0) || afip::soap_put___ns3__FEDummy_(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEDummy_(struct soap *soap, const char *URL, struct __ns3__FEDummy_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEDummy_(soap, p), 0) || afip::soap_put___ns3__FEDummy_(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEDummy_(struct soap *soap, const char *URL, struct __ns3__FEDummy_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEDummy_(soap, p), 0) || afip::soap_put___ns3__FEDummy_(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEDummy_(struct soap *soap, const char *URL, struct __ns3__FEDummy_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEDummy_(soap, p), 0) || afip::soap_put___ns3__FEDummy_(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEDummy_ * SOAP_FMAC4 soap_get___ns3__FEDummy_(struct soap*, struct __ns3__FEDummy_ *, const char*, const char*);

inline int soap_read___ns3__FEDummy_(struct soap *soap, struct __ns3__FEDummy_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FEDummy_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEDummy_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEDummy_(struct soap *soap, const char *URL, struct __ns3__FEDummy_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEDummy_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEDummy_(struct soap *soap, struct __ns3__FEDummy_ *p)
{
	if (afip::soap_read___ns3__FEDummy_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECompTotXRequest__DEFINED
#define SOAP_TYPE_afip___ns3__FECompTotXRequest__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECompTotXRequest_(struct soap*, struct __ns3__FECompTotXRequest_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECompTotXRequest_(struct soap*, const struct __ns3__FECompTotXRequest_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECompTotXRequest_(struct soap*, const char*, int, const struct __ns3__FECompTotXRequest_ *, const char*);
SOAP_FMAC3 struct __ns3__FECompTotXRequest_ * SOAP_FMAC4 soap_in___ns3__FECompTotXRequest_(struct soap*, const char*, struct __ns3__FECompTotXRequest_ *, const char*);
SOAP_FMAC1 struct __ns3__FECompTotXRequest_ * SOAP_FMAC2 soap_instantiate___ns3__FECompTotXRequest_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECompTotXRequest_ * soap_new___ns3__FECompTotXRequest_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECompTotXRequest_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECompTotXRequest_ * soap_new_req___ns3__FECompTotXRequest_(
	struct soap *soap)
{
	struct __ns3__FECompTotXRequest_ *_p = afip::soap_new___ns3__FECompTotXRequest_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompTotXRequest_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECompTotXRequest_ * soap_new_set___ns3__FECompTotXRequest_(
	struct soap *soap,
	_ns3__FECompTotXRequest *ns3__FECompTotXRequest)
{
	struct __ns3__FECompTotXRequest_ *_p = afip::soap_new___ns3__FECompTotXRequest_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompTotXRequest_(soap, _p);
		_p->ns3__FECompTotXRequest = ns3__FECompTotXRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECompTotXRequest_(struct soap*, const struct __ns3__FECompTotXRequest_ *, const char*, const char*);

inline int soap_write___ns3__FECompTotXRequest_(struct soap *soap, struct __ns3__FECompTotXRequest_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECompTotXRequest_(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest_(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECompTotXRequest_(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompTotXRequest_(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest_(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECompTotXRequest_(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompTotXRequest_(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest_(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECompTotXRequest_(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompTotXRequest_(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest_(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECompTotXRequest_ * SOAP_FMAC4 soap_get___ns3__FECompTotXRequest_(struct soap*, struct __ns3__FECompTotXRequest_ *, const char*, const char*);

inline int soap_read___ns3__FECompTotXRequest_(struct soap *soap, struct __ns3__FECompTotXRequest_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECompTotXRequest_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECompTotXRequest_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECompTotXRequest_(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECompTotXRequest_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECompTotXRequest_(struct soap *soap, struct __ns3__FECompTotXRequest_ *p)
{
	if (afip::soap_read___ns3__FECompTotXRequest_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAESolicitar__DEFINED
#define SOAP_TYPE_afip___ns3__FECAESolicitar__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAESolicitar_(struct soap*, struct __ns3__FECAESolicitar_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAESolicitar_(struct soap*, const struct __ns3__FECAESolicitar_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAESolicitar_(struct soap*, const char*, int, const struct __ns3__FECAESolicitar_ *, const char*);
SOAP_FMAC3 struct __ns3__FECAESolicitar_ * SOAP_FMAC4 soap_in___ns3__FECAESolicitar_(struct soap*, const char*, struct __ns3__FECAESolicitar_ *, const char*);
SOAP_FMAC1 struct __ns3__FECAESolicitar_ * SOAP_FMAC2 soap_instantiate___ns3__FECAESolicitar_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAESolicitar_ * soap_new___ns3__FECAESolicitar_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAESolicitar_(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAESolicitar_ * soap_new_req___ns3__FECAESolicitar_(
	struct soap *soap)
{
	struct __ns3__FECAESolicitar_ *_p = afip::soap_new___ns3__FECAESolicitar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAESolicitar_(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAESolicitar_ * soap_new_set___ns3__FECAESolicitar_(
	struct soap *soap,
	_ns3__FECAESolicitar *ns3__FECAESolicitar)
{
	struct __ns3__FECAESolicitar_ *_p = afip::soap_new___ns3__FECAESolicitar_(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAESolicitar_(soap, _p);
		_p->ns3__FECAESolicitar = ns3__FECAESolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAESolicitar_(struct soap*, const struct __ns3__FECAESolicitar_ *, const char*, const char*);

inline int soap_write___ns3__FECAESolicitar_(struct soap *soap, struct __ns3__FECAESolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAESolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar_(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAESolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAESolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar_(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAESolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAESolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar_(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAESolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAESolicitar_(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar_(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAESolicitar_ * SOAP_FMAC4 soap_get___ns3__FECAESolicitar_(struct soap*, struct __ns3__FECAESolicitar_ *, const char*, const char*);

inline int soap_read___ns3__FECAESolicitar_(struct soap *soap, struct __ns3__FECAESolicitar_ *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAESolicitar_(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAESolicitar_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAESolicitar_(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar_ *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAESolicitar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAESolicitar_(struct soap *soap, struct __ns3__FECAESolicitar_ *p)
{
	if (afip::soap_read___ns3__FECAESolicitar_(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposPaises_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposPaises_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposPaises(struct soap*, struct __ns3__FEParamGetTiposPaises *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposPaises(struct soap*, const struct __ns3__FEParamGetTiposPaises *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposPaises(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposPaises *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposPaises * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposPaises(struct soap*, const char*, struct __ns3__FEParamGetTiposPaises *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposPaises * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposPaises(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposPaises * soap_new___ns3__FEParamGetTiposPaises(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposPaises(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposPaises * soap_new_req___ns3__FEParamGetTiposPaises(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposPaises *_p = afip::soap_new___ns3__FEParamGetTiposPaises(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposPaises(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposPaises * soap_new_set___ns3__FEParamGetTiposPaises(
	struct soap *soap,
	_ns3__FEParamGetTiposPaises *ns3__FEParamGetTiposPaises)
{
	struct __ns3__FEParamGetTiposPaises *_p = afip::soap_new___ns3__FEParamGetTiposPaises(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposPaises(soap, _p);
		_p->ns3__FEParamGetTiposPaises = ns3__FEParamGetTiposPaises;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposPaises(struct soap*, const struct __ns3__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposPaises(struct soap *soap, struct __ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposPaises(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposPaises(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposPaises(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposPaises(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposPaises(soap, p, "-ns3:FEParamGetTiposPaises", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposPaises * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposPaises(struct soap*, struct __ns3__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposPaises(struct soap *soap, struct __ns3__FEParamGetTiposPaises *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposPaises(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposPaises(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposPaises *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposPaises(struct soap *soap, struct __ns3__FEParamGetTiposPaises *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposDoc_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposDoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposDoc(struct soap*, struct __ns3__FEParamGetTiposDoc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposDoc(struct soap*, const struct __ns3__FEParamGetTiposDoc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposDoc(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposDoc *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposDoc * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposDoc(struct soap*, const char*, struct __ns3__FEParamGetTiposDoc *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposDoc * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposDoc(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposDoc * soap_new___ns3__FEParamGetTiposDoc(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposDoc(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposDoc * soap_new_req___ns3__FEParamGetTiposDoc(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposDoc *_p = afip::soap_new___ns3__FEParamGetTiposDoc(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposDoc(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposDoc * soap_new_set___ns3__FEParamGetTiposDoc(
	struct soap *soap,
	_ns3__FEParamGetTiposDoc *ns3__FEParamGetTiposDoc)
{
	struct __ns3__FEParamGetTiposDoc *_p = afip::soap_new___ns3__FEParamGetTiposDoc(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposDoc(soap, _p);
		_p->ns3__FEParamGetTiposDoc = ns3__FEParamGetTiposDoc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposDoc(struct soap*, const struct __ns3__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposDoc(struct soap *soap, struct __ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposDoc(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposDoc(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposDoc(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposDoc(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposDoc(soap, p, "-ns3:FEParamGetTiposDoc", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposDoc * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposDoc(struct soap*, struct __ns3__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposDoc(struct soap *soap, struct __ns3__FEParamGetTiposDoc *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposDoc(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposDoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposDoc *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposDoc(struct soap *soap, struct __ns3__FEParamGetTiposDoc *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposCbte_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposCbte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposCbte(struct soap*, struct __ns3__FEParamGetTiposCbte *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposCbte(struct soap*, const struct __ns3__FEParamGetTiposCbte *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposCbte(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposCbte *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposCbte * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposCbte(struct soap*, const char*, struct __ns3__FEParamGetTiposCbte *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposCbte * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposCbte(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposCbte * soap_new___ns3__FEParamGetTiposCbte(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposCbte(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposCbte * soap_new_req___ns3__FEParamGetTiposCbte(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposCbte *_p = afip::soap_new___ns3__FEParamGetTiposCbte(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposCbte(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposCbte * soap_new_set___ns3__FEParamGetTiposCbte(
	struct soap *soap,
	_ns3__FEParamGetTiposCbte *ns3__FEParamGetTiposCbte)
{
	struct __ns3__FEParamGetTiposCbte *_p = afip::soap_new___ns3__FEParamGetTiposCbte(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposCbte(soap, _p);
		_p->ns3__FEParamGetTiposCbte = ns3__FEParamGetTiposCbte;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposCbte(struct soap*, const struct __ns3__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposCbte(struct soap *soap, struct __ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposCbte(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposCbte(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposCbte(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposCbte(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposCbte(soap, p, "-ns3:FEParamGetTiposCbte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposCbte * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposCbte(struct soap*, struct __ns3__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposCbte(struct soap *soap, struct __ns3__FEParamGetTiposCbte *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposCbte(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposCbte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposCbte *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposCbte(struct soap *soap, struct __ns3__FEParamGetTiposCbte *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetPtosVenta_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetPtosVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetPtosVenta(struct soap*, struct __ns3__FEParamGetPtosVenta *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetPtosVenta(struct soap*, const struct __ns3__FEParamGetPtosVenta *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetPtosVenta(struct soap*, const char*, int, const struct __ns3__FEParamGetPtosVenta *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetPtosVenta * SOAP_FMAC4 soap_in___ns3__FEParamGetPtosVenta(struct soap*, const char*, struct __ns3__FEParamGetPtosVenta *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetPtosVenta * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetPtosVenta(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetPtosVenta * soap_new___ns3__FEParamGetPtosVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetPtosVenta(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetPtosVenta * soap_new_req___ns3__FEParamGetPtosVenta(
	struct soap *soap)
{
	struct __ns3__FEParamGetPtosVenta *_p = afip::soap_new___ns3__FEParamGetPtosVenta(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetPtosVenta(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetPtosVenta * soap_new_set___ns3__FEParamGetPtosVenta(
	struct soap *soap,
	_ns3__FEParamGetPtosVenta *ns3__FEParamGetPtosVenta)
{
	struct __ns3__FEParamGetPtosVenta *_p = afip::soap_new___ns3__FEParamGetPtosVenta(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetPtosVenta(soap, _p);
		_p->ns3__FEParamGetPtosVenta = ns3__FEParamGetPtosVenta;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetPtosVenta(struct soap*, const struct __ns3__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_write___ns3__FEParamGetPtosVenta(struct soap *soap, struct __ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetPtosVenta(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetPtosVenta(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetPtosVenta(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetPtosVenta(soap, p), 0) || afip::soap_put___ns3__FEParamGetPtosVenta(soap, p, "-ns3:FEParamGetPtosVenta", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetPtosVenta * SOAP_FMAC4 soap_get___ns3__FEParamGetPtosVenta(struct soap*, struct __ns3__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_read___ns3__FEParamGetPtosVenta(struct soap *soap, struct __ns3__FEParamGetPtosVenta *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetPtosVenta(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetPtosVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __ns3__FEParamGetPtosVenta *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetPtosVenta(struct soap *soap, struct __ns3__FEParamGetPtosVenta *p)
{
	if (afip::soap_read___ns3__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposConcepto_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposConcepto(struct soap*, struct __ns3__FEParamGetTiposConcepto *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposConcepto(struct soap*, const struct __ns3__FEParamGetTiposConcepto *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposConcepto(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposConcepto * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposConcepto(struct soap*, const char*, struct __ns3__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposConcepto * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposConcepto(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposConcepto * soap_new___ns3__FEParamGetTiposConcepto(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposConcepto(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposConcepto * soap_new_req___ns3__FEParamGetTiposConcepto(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposConcepto *_p = afip::soap_new___ns3__FEParamGetTiposConcepto(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposConcepto(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposConcepto * soap_new_set___ns3__FEParamGetTiposConcepto(
	struct soap *soap,
	_ns3__FEParamGetTiposConcepto *ns3__FEParamGetTiposConcepto)
{
	struct __ns3__FEParamGetTiposConcepto *_p = afip::soap_new___ns3__FEParamGetTiposConcepto(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposConcepto(soap, _p);
		_p->ns3__FEParamGetTiposConcepto = ns3__FEParamGetTiposConcepto;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposConcepto(struct soap*, const struct __ns3__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposConcepto(struct soap *soap, struct __ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposConcepto(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposConcepto(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposConcepto(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposConcepto(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposConcepto(soap, p, "-ns3:FEParamGetTiposConcepto", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposConcepto * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposConcepto(struct soap*, struct __ns3__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposConcepto(struct soap *soap, struct __ns3__FEParamGetTiposConcepto *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposConcepto(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposConcepto(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposConcepto *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposConcepto(struct soap *soap, struct __ns3__FEParamGetTiposConcepto *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposOpcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposOpcional(struct soap*, struct __ns3__FEParamGetTiposOpcional *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposOpcional(struct soap*, const struct __ns3__FEParamGetTiposOpcional *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposOpcional(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposOpcional * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposOpcional(struct soap*, const char*, struct __ns3__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposOpcional * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposOpcional(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposOpcional * soap_new___ns3__FEParamGetTiposOpcional(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposOpcional(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposOpcional * soap_new_req___ns3__FEParamGetTiposOpcional(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposOpcional *_p = afip::soap_new___ns3__FEParamGetTiposOpcional(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposOpcional(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposOpcional * soap_new_set___ns3__FEParamGetTiposOpcional(
	struct soap *soap,
	_ns3__FEParamGetTiposOpcional *ns3__FEParamGetTiposOpcional)
{
	struct __ns3__FEParamGetTiposOpcional *_p = afip::soap_new___ns3__FEParamGetTiposOpcional(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposOpcional(soap, _p);
		_p->ns3__FEParamGetTiposOpcional = ns3__FEParamGetTiposOpcional;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposOpcional(struct soap*, const struct __ns3__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposOpcional(struct soap *soap, struct __ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposOpcional(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposOpcional(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposOpcional(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposOpcional(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposOpcional(soap, p, "-ns3:FEParamGetTiposOpcional", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposOpcional * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposOpcional(struct soap*, struct __ns3__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposOpcional(struct soap *soap, struct __ns3__FEParamGetTiposOpcional *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposOpcional(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposOpcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposOpcional *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposOpcional(struct soap *soap, struct __ns3__FEParamGetTiposOpcional *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposIva_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposIva(struct soap*, struct __ns3__FEParamGetTiposIva *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposIva(struct soap*, const struct __ns3__FEParamGetTiposIva *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposIva(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposIva *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposIva * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposIva(struct soap*, const char*, struct __ns3__FEParamGetTiposIva *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposIva * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposIva(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposIva * soap_new___ns3__FEParamGetTiposIva(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposIva(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposIva * soap_new_req___ns3__FEParamGetTiposIva(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposIva *_p = afip::soap_new___ns3__FEParamGetTiposIva(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposIva(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposIva * soap_new_set___ns3__FEParamGetTiposIva(
	struct soap *soap,
	_ns3__FEParamGetTiposIva *ns3__FEParamGetTiposIva)
{
	struct __ns3__FEParamGetTiposIva *_p = afip::soap_new___ns3__FEParamGetTiposIva(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposIva(soap, _p);
		_p->ns3__FEParamGetTiposIva = ns3__FEParamGetTiposIva;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposIva(struct soap*, const struct __ns3__FEParamGetTiposIva *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposIva(struct soap *soap, struct __ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposIva(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposIva(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposIva(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposIva(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposIva(soap, p, "-ns3:FEParamGetTiposIva", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposIva * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposIva(struct soap*, struct __ns3__FEParamGetTiposIva *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposIva(struct soap *soap, struct __ns3__FEParamGetTiposIva *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposIva(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposIva *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposIva(struct soap *soap, struct __ns3__FEParamGetTiposIva *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposMonedas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposMonedas(struct soap*, struct __ns3__FEParamGetTiposMonedas *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposMonedas(struct soap*, const struct __ns3__FEParamGetTiposMonedas *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposMonedas(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposMonedas * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposMonedas(struct soap*, const char*, struct __ns3__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposMonedas * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposMonedas(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposMonedas * soap_new___ns3__FEParamGetTiposMonedas(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposMonedas(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposMonedas * soap_new_req___ns3__FEParamGetTiposMonedas(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposMonedas *_p = afip::soap_new___ns3__FEParamGetTiposMonedas(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposMonedas(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposMonedas * soap_new_set___ns3__FEParamGetTiposMonedas(
	struct soap *soap,
	_ns3__FEParamGetTiposMonedas *ns3__FEParamGetTiposMonedas)
{
	struct __ns3__FEParamGetTiposMonedas *_p = afip::soap_new___ns3__FEParamGetTiposMonedas(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposMonedas(soap, _p);
		_p->ns3__FEParamGetTiposMonedas = ns3__FEParamGetTiposMonedas;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposMonedas(struct soap*, const struct __ns3__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposMonedas(struct soap *soap, struct __ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposMonedas(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposMonedas(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposMonedas(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposMonedas(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposMonedas(soap, p, "-ns3:FEParamGetTiposMonedas", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposMonedas * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposMonedas(struct soap*, struct __ns3__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposMonedas(struct soap *soap, struct __ns3__FEParamGetTiposMonedas *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposMonedas(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposMonedas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposMonedas *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposMonedas(struct soap *soap, struct __ns3__FEParamGetTiposMonedas *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetTiposTributos_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetTiposTributos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetTiposTributos(struct soap*, struct __ns3__FEParamGetTiposTributos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetTiposTributos(struct soap*, const struct __ns3__FEParamGetTiposTributos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetTiposTributos(struct soap*, const char*, int, const struct __ns3__FEParamGetTiposTributos *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetTiposTributos * SOAP_FMAC4 soap_in___ns3__FEParamGetTiposTributos(struct soap*, const char*, struct __ns3__FEParamGetTiposTributos *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetTiposTributos * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetTiposTributos(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetTiposTributos * soap_new___ns3__FEParamGetTiposTributos(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetTiposTributos(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetTiposTributos * soap_new_req___ns3__FEParamGetTiposTributos(
	struct soap *soap)
{
	struct __ns3__FEParamGetTiposTributos *_p = afip::soap_new___ns3__FEParamGetTiposTributos(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposTributos(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetTiposTributos * soap_new_set___ns3__FEParamGetTiposTributos(
	struct soap *soap,
	_ns3__FEParamGetTiposTributos *ns3__FEParamGetTiposTributos)
{
	struct __ns3__FEParamGetTiposTributos *_p = afip::soap_new___ns3__FEParamGetTiposTributos(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetTiposTributos(soap, _p);
		_p->ns3__FEParamGetTiposTributos = ns3__FEParamGetTiposTributos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetTiposTributos(struct soap*, const struct __ns3__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_write___ns3__FEParamGetTiposTributos(struct soap *soap, struct __ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetTiposTributos(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposTributos(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposTributos(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetTiposTributos(soap, p), 0) || afip::soap_put___ns3__FEParamGetTiposTributos(soap, p, "-ns3:FEParamGetTiposTributos", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetTiposTributos * SOAP_FMAC4 soap_get___ns3__FEParamGetTiposTributos(struct soap*, struct __ns3__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_read___ns3__FEParamGetTiposTributos(struct soap *soap, struct __ns3__FEParamGetTiposTributos *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetTiposTributos(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetTiposTributos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __ns3__FEParamGetTiposTributos *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetTiposTributos(struct soap *soap, struct __ns3__FEParamGetTiposTributos *p)
{
	if (afip::soap_read___ns3__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEParamGetCotizacion_DEFINED
#define SOAP_TYPE_afip___ns3__FEParamGetCotizacion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEParamGetCotizacion(struct soap*, struct __ns3__FEParamGetCotizacion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEParamGetCotizacion(struct soap*, const struct __ns3__FEParamGetCotizacion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEParamGetCotizacion(struct soap*, const char*, int, const struct __ns3__FEParamGetCotizacion *, const char*);
SOAP_FMAC3 struct __ns3__FEParamGetCotizacion * SOAP_FMAC4 soap_in___ns3__FEParamGetCotizacion(struct soap*, const char*, struct __ns3__FEParamGetCotizacion *, const char*);
SOAP_FMAC1 struct __ns3__FEParamGetCotizacion * SOAP_FMAC2 soap_instantiate___ns3__FEParamGetCotizacion(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEParamGetCotizacion * soap_new___ns3__FEParamGetCotizacion(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEParamGetCotizacion(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEParamGetCotizacion * soap_new_req___ns3__FEParamGetCotizacion(
	struct soap *soap)
{
	struct __ns3__FEParamGetCotizacion *_p = afip::soap_new___ns3__FEParamGetCotizacion(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetCotizacion(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEParamGetCotizacion * soap_new_set___ns3__FEParamGetCotizacion(
	struct soap *soap,
	_ns3__FEParamGetCotizacion *ns3__FEParamGetCotizacion)
{
	struct __ns3__FEParamGetCotizacion *_p = afip::soap_new___ns3__FEParamGetCotizacion(soap);
	if (_p)
	{	afip::soap_default___ns3__FEParamGetCotizacion(soap, _p);
		_p->ns3__FEParamGetCotizacion = ns3__FEParamGetCotizacion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEParamGetCotizacion(struct soap*, const struct __ns3__FEParamGetCotizacion *, const char*, const char*);

inline int soap_write___ns3__FEParamGetCotizacion(struct soap *soap, struct __ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEParamGetCotizacion(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetCotizacion(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetCotizacion(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEParamGetCotizacion(soap, p), 0) || afip::soap_put___ns3__FEParamGetCotizacion(soap, p, "-ns3:FEParamGetCotizacion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEParamGetCotizacion * SOAP_FMAC4 soap_get___ns3__FEParamGetCotizacion(struct soap*, struct __ns3__FEParamGetCotizacion *, const char*, const char*);

inline int soap_read___ns3__FEParamGetCotizacion(struct soap *soap, struct __ns3__FEParamGetCotizacion *p)
{
	if (p)
	{	afip::soap_default___ns3__FEParamGetCotizacion(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEParamGetCotizacion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __ns3__FEParamGetCotizacion *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEParamGetCotizacion(struct soap *soap, struct __ns3__FEParamGetCotizacion *p)
{
	if (afip::soap_read___ns3__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEAConsultar_DEFINED
#define SOAP_TYPE_afip___ns3__FECAEAConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEAConsultar(struct soap*, struct __ns3__FECAEAConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEAConsultar(struct soap*, const struct __ns3__FECAEAConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEAConsultar(struct soap*, const char*, int, const struct __ns3__FECAEAConsultar *, const char*);
SOAP_FMAC3 struct __ns3__FECAEAConsultar * SOAP_FMAC4 soap_in___ns3__FECAEAConsultar(struct soap*, const char*, struct __ns3__FECAEAConsultar *, const char*);
SOAP_FMAC1 struct __ns3__FECAEAConsultar * SOAP_FMAC2 soap_instantiate___ns3__FECAEAConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEAConsultar * soap_new___ns3__FECAEAConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEAConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEAConsultar * soap_new_req___ns3__FECAEAConsultar(
	struct soap *soap)
{
	struct __ns3__FECAEAConsultar *_p = afip::soap_new___ns3__FECAEAConsultar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEAConsultar(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEAConsultar * soap_new_set___ns3__FECAEAConsultar(
	struct soap *soap,
	_ns3__FECAEAConsultar *ns3__FECAEAConsultar)
{
	struct __ns3__FECAEAConsultar *_p = afip::soap_new___ns3__FECAEAConsultar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEAConsultar(soap, _p);
		_p->ns3__FECAEAConsultar = ns3__FECAEAConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEAConsultar(struct soap*, const struct __ns3__FECAEAConsultar *, const char*, const char*);

inline int soap_write___ns3__FECAEAConsultar(struct soap *soap, struct __ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEAConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEAConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEAConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEAConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEAConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEAConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEAConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEAConsultar(soap, p, "-ns3:FECAEAConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEAConsultar * SOAP_FMAC4 soap_get___ns3__FECAEAConsultar(struct soap*, struct __ns3__FECAEAConsultar *, const char*, const char*);

inline int soap_read___ns3__FECAEAConsultar(struct soap *soap, struct __ns3__FECAEAConsultar *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEAConsultar(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEAConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEAConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEAConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEAConsultar(struct soap *soap, struct __ns3__FECAEAConsultar *p)
{
	if (afip::soap_read___ns3__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar_DEFINED
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoInformar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEASinMovimientoInformar(struct soap*, struct __ns3__FECAEASinMovimientoInformar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEASinMovimientoInformar(struct soap*, const struct __ns3__FECAEASinMovimientoInformar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEASinMovimientoInformar(struct soap*, const char*, int, const struct __ns3__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_in___ns3__FECAEASinMovimientoInformar(struct soap*, const char*, struct __ns3__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC1 struct __ns3__FECAEASinMovimientoInformar * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoInformar(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEASinMovimientoInformar * soap_new___ns3__FECAEASinMovimientoInformar(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEASinMovimientoInformar(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEASinMovimientoInformar * soap_new_req___ns3__FECAEASinMovimientoInformar(
	struct soap *soap)
{
	struct __ns3__FECAEASinMovimientoInformar *_p = afip::soap_new___ns3__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoInformar(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEASinMovimientoInformar * soap_new_set___ns3__FECAEASinMovimientoInformar(
	struct soap *soap,
	_ns3__FECAEASinMovimientoInformar *ns3__FECAEASinMovimientoInformar)
{
	struct __ns3__FECAEASinMovimientoInformar *_p = afip::soap_new___ns3__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoInformar(soap, _p);
		_p->ns3__FECAEASinMovimientoInformar = ns3__FECAEASinMovimientoInformar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEASinMovimientoInformar(struct soap*, const struct __ns3__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_write___ns3__FECAEASinMovimientoInformar(struct soap *soap, struct __ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoInformar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoInformar(soap, p, "-ns3:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_get___ns3__FECAEASinMovimientoInformar(struct soap*, struct __ns3__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_read___ns3__FECAEASinMovimientoInformar(struct soap *soap, struct __ns3__FECAEASinMovimientoInformar *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEASinMovimientoInformar(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEASinMovimientoInformar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoInformar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEASinMovimientoInformar(struct soap *soap, struct __ns3__FECAEASinMovimientoInformar *p)
{
	if (afip::soap_read___ns3__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar_DEFINED
#define SOAP_TYPE_afip___ns3__FECAEASinMovimientoConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEASinMovimientoConsultar(struct soap*, struct __ns3__FECAEASinMovimientoConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEASinMovimientoConsultar(struct soap*, const struct __ns3__FECAEASinMovimientoConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEASinMovimientoConsultar(struct soap*, const char*, int, const struct __ns3__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_in___ns3__FECAEASinMovimientoConsultar(struct soap*, const char*, struct __ns3__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC1 struct __ns3__FECAEASinMovimientoConsultar * SOAP_FMAC2 soap_instantiate___ns3__FECAEASinMovimientoConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEASinMovimientoConsultar * soap_new___ns3__FECAEASinMovimientoConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEASinMovimientoConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEASinMovimientoConsultar * soap_new_req___ns3__FECAEASinMovimientoConsultar(
	struct soap *soap)
{
	struct __ns3__FECAEASinMovimientoConsultar *_p = afip::soap_new___ns3__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoConsultar(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEASinMovimientoConsultar * soap_new_set___ns3__FECAEASinMovimientoConsultar(
	struct soap *soap,
	_ns3__FECAEASinMovimientoConsultar *ns3__FECAEASinMovimientoConsultar)
{
	struct __ns3__FECAEASinMovimientoConsultar *_p = afip::soap_new___ns3__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASinMovimientoConsultar(soap, _p);
		_p->ns3__FECAEASinMovimientoConsultar = ns3__FECAEASinMovimientoConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEASinMovimientoConsultar(struct soap*, const struct __ns3__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_write___ns3__FECAEASinMovimientoConsultar(struct soap *soap, struct __ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASinMovimientoConsultar(soap, p), 0) || afip::soap_put___ns3__FECAEASinMovimientoConsultar(soap, p, "-ns3:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_get___ns3__FECAEASinMovimientoConsultar(struct soap*, struct __ns3__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_read___ns3__FECAEASinMovimientoConsultar(struct soap *soap, struct __ns3__FECAEASinMovimientoConsultar *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEASinMovimientoConsultar(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEASinMovimientoConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __ns3__FECAEASinMovimientoConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEASinMovimientoConsultar(struct soap *soap, struct __ns3__FECAEASinMovimientoConsultar *p)
{
	if (afip::soap_read___ns3__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEASolicitar_DEFINED
#define SOAP_TYPE_afip___ns3__FECAEASolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEASolicitar(struct soap*, struct __ns3__FECAEASolicitar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEASolicitar(struct soap*, const struct __ns3__FECAEASolicitar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEASolicitar(struct soap*, const char*, int, const struct __ns3__FECAEASolicitar *, const char*);
SOAP_FMAC3 struct __ns3__FECAEASolicitar * SOAP_FMAC4 soap_in___ns3__FECAEASolicitar(struct soap*, const char*, struct __ns3__FECAEASolicitar *, const char*);
SOAP_FMAC1 struct __ns3__FECAEASolicitar * SOAP_FMAC2 soap_instantiate___ns3__FECAEASolicitar(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEASolicitar * soap_new___ns3__FECAEASolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEASolicitar(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEASolicitar * soap_new_req___ns3__FECAEASolicitar(
	struct soap *soap)
{
	struct __ns3__FECAEASolicitar *_p = afip::soap_new___ns3__FECAEASolicitar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASolicitar(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEASolicitar * soap_new_set___ns3__FECAEASolicitar(
	struct soap *soap,
	_ns3__FECAEASolicitar *ns3__FECAEASolicitar)
{
	struct __ns3__FECAEASolicitar *_p = afip::soap_new___ns3__FECAEASolicitar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEASolicitar(soap, _p);
		_p->ns3__FECAEASolicitar = ns3__FECAEASolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEASolicitar(struct soap*, const struct __ns3__FECAEASolicitar *, const char*, const char*);

inline int soap_write___ns3__FECAEASolicitar(struct soap *soap, struct __ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEASolicitar(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEASolicitar(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASolicitar(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEASolicitar(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASolicitar(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEASolicitar(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEASolicitar(soap, p), 0) || afip::soap_put___ns3__FECAEASolicitar(soap, p, "-ns3:FECAEASolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEASolicitar * SOAP_FMAC4 soap_get___ns3__FECAEASolicitar(struct soap*, struct __ns3__FECAEASolicitar *, const char*, const char*);

inline int soap_read___ns3__FECAEASolicitar(struct soap *soap, struct __ns3__FECAEASolicitar *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEASolicitar(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEASolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEASolicitar(struct soap *soap, const char *URL, struct __ns3__FECAEASolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEASolicitar(struct soap *soap, struct __ns3__FECAEASolicitar *p)
{
	if (afip::soap_read___ns3__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAEARegInformativo_DEFINED
#define SOAP_TYPE_afip___ns3__FECAEARegInformativo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAEARegInformativo(struct soap*, struct __ns3__FECAEARegInformativo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAEARegInformativo(struct soap*, const struct __ns3__FECAEARegInformativo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAEARegInformativo(struct soap*, const char*, int, const struct __ns3__FECAEARegInformativo *, const char*);
SOAP_FMAC3 struct __ns3__FECAEARegInformativo * SOAP_FMAC4 soap_in___ns3__FECAEARegInformativo(struct soap*, const char*, struct __ns3__FECAEARegInformativo *, const char*);
SOAP_FMAC1 struct __ns3__FECAEARegInformativo * SOAP_FMAC2 soap_instantiate___ns3__FECAEARegInformativo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAEARegInformativo * soap_new___ns3__FECAEARegInformativo(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAEARegInformativo(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAEARegInformativo * soap_new_req___ns3__FECAEARegInformativo(
	struct soap *soap)
{
	struct __ns3__FECAEARegInformativo *_p = afip::soap_new___ns3__FECAEARegInformativo(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEARegInformativo(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAEARegInformativo * soap_new_set___ns3__FECAEARegInformativo(
	struct soap *soap,
	_ns3__FECAEARegInformativo *ns3__FECAEARegInformativo)
{
	struct __ns3__FECAEARegInformativo *_p = afip::soap_new___ns3__FECAEARegInformativo(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAEARegInformativo(soap, _p);
		_p->ns3__FECAEARegInformativo = ns3__FECAEARegInformativo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAEARegInformativo(struct soap*, const struct __ns3__FECAEARegInformativo *, const char*, const char*);

inline int soap_write___ns3__FECAEARegInformativo(struct soap *soap, struct __ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAEARegInformativo(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAEARegInformativo(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEARegInformativo(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAEARegInformativo(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEARegInformativo(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAEARegInformativo(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAEARegInformativo(soap, p), 0) || afip::soap_put___ns3__FECAEARegInformativo(soap, p, "-ns3:FECAEARegInformativo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAEARegInformativo * SOAP_FMAC4 soap_get___ns3__FECAEARegInformativo(struct soap*, struct __ns3__FECAEARegInformativo *, const char*, const char*);

inline int soap_read___ns3__FECAEARegInformativo(struct soap *soap, struct __ns3__FECAEARegInformativo *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAEARegInformativo(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAEARegInformativo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAEARegInformativo(struct soap *soap, const char *URL, struct __ns3__FECAEARegInformativo *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAEARegInformativo(struct soap *soap, struct __ns3__FECAEARegInformativo *p)
{
	if (afip::soap_read___ns3__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECompConsultar_DEFINED
#define SOAP_TYPE_afip___ns3__FECompConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECompConsultar(struct soap*, struct __ns3__FECompConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECompConsultar(struct soap*, const struct __ns3__FECompConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECompConsultar(struct soap*, const char*, int, const struct __ns3__FECompConsultar *, const char*);
SOAP_FMAC3 struct __ns3__FECompConsultar * SOAP_FMAC4 soap_in___ns3__FECompConsultar(struct soap*, const char*, struct __ns3__FECompConsultar *, const char*);
SOAP_FMAC1 struct __ns3__FECompConsultar * SOAP_FMAC2 soap_instantiate___ns3__FECompConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECompConsultar * soap_new___ns3__FECompConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECompConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECompConsultar * soap_new_req___ns3__FECompConsultar(
	struct soap *soap)
{
	struct __ns3__FECompConsultar *_p = afip::soap_new___ns3__FECompConsultar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompConsultar(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECompConsultar * soap_new_set___ns3__FECompConsultar(
	struct soap *soap,
	_ns3__FECompConsultar *ns3__FECompConsultar)
{
	struct __ns3__FECompConsultar *_p = afip::soap_new___ns3__FECompConsultar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompConsultar(soap, _p);
		_p->ns3__FECompConsultar = ns3__FECompConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECompConsultar(struct soap*, const struct __ns3__FECompConsultar *, const char*, const char*);

inline int soap_write___ns3__FECompConsultar(struct soap *soap, struct __ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECompConsultar(soap, p), 0) || afip::soap_put___ns3__FECompConsultar(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECompConsultar(struct soap *soap, const char *URL, struct __ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompConsultar(soap, p), 0) || afip::soap_put___ns3__FECompConsultar(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECompConsultar(struct soap *soap, const char *URL, struct __ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompConsultar(soap, p), 0) || afip::soap_put___ns3__FECompConsultar(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECompConsultar(struct soap *soap, const char *URL, struct __ns3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompConsultar(soap, p), 0) || afip::soap_put___ns3__FECompConsultar(soap, p, "-ns3:FECompConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECompConsultar * SOAP_FMAC4 soap_get___ns3__FECompConsultar(struct soap*, struct __ns3__FECompConsultar *, const char*, const char*);

inline int soap_read___ns3__FECompConsultar(struct soap *soap, struct __ns3__FECompConsultar *p)
{
	if (p)
	{	afip::soap_default___ns3__FECompConsultar(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECompConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECompConsultar(struct soap *soap, const char *URL, struct __ns3__FECompConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECompConsultar(struct soap *soap, struct __ns3__FECompConsultar *p)
{
	if (afip::soap_read___ns3__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECompUltimoAutorizado_DEFINED
#define SOAP_TYPE_afip___ns3__FECompUltimoAutorizado_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECompUltimoAutorizado(struct soap*, struct __ns3__FECompUltimoAutorizado *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECompUltimoAutorizado(struct soap*, const struct __ns3__FECompUltimoAutorizado *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECompUltimoAutorizado(struct soap*, const char*, int, const struct __ns3__FECompUltimoAutorizado *, const char*);
SOAP_FMAC3 struct __ns3__FECompUltimoAutorizado * SOAP_FMAC4 soap_in___ns3__FECompUltimoAutorizado(struct soap*, const char*, struct __ns3__FECompUltimoAutorizado *, const char*);
SOAP_FMAC1 struct __ns3__FECompUltimoAutorizado * SOAP_FMAC2 soap_instantiate___ns3__FECompUltimoAutorizado(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECompUltimoAutorizado * soap_new___ns3__FECompUltimoAutorizado(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECompUltimoAutorizado(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECompUltimoAutorizado * soap_new_req___ns3__FECompUltimoAutorizado(
	struct soap *soap)
{
	struct __ns3__FECompUltimoAutorizado *_p = afip::soap_new___ns3__FECompUltimoAutorizado(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompUltimoAutorizado(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECompUltimoAutorizado * soap_new_set___ns3__FECompUltimoAutorizado(
	struct soap *soap,
	_ns3__FECompUltimoAutorizado *ns3__FECompUltimoAutorizado)
{
	struct __ns3__FECompUltimoAutorizado *_p = afip::soap_new___ns3__FECompUltimoAutorizado(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompUltimoAutorizado(soap, _p);
		_p->ns3__FECompUltimoAutorizado = ns3__FECompUltimoAutorizado;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECompUltimoAutorizado(struct soap*, const struct __ns3__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_write___ns3__FECompUltimoAutorizado(struct soap *soap, struct __ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECompUltimoAutorizado(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompUltimoAutorizado(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompUltimoAutorizado(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompUltimoAutorizado(soap, p), 0) || afip::soap_put___ns3__FECompUltimoAutorizado(soap, p, "-ns3:FECompUltimoAutorizado", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECompUltimoAutorizado * SOAP_FMAC4 soap_get___ns3__FECompUltimoAutorizado(struct soap*, struct __ns3__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_read___ns3__FECompUltimoAutorizado(struct soap *soap, struct __ns3__FECompUltimoAutorizado *p)
{
	if (p)
	{	afip::soap_default___ns3__FECompUltimoAutorizado(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECompUltimoAutorizado(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __ns3__FECompUltimoAutorizado *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECompUltimoAutorizado(struct soap *soap, struct __ns3__FECompUltimoAutorizado *p)
{
	if (afip::soap_read___ns3__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FEDummy_DEFINED
#define SOAP_TYPE_afip___ns3__FEDummy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FEDummy(struct soap*, struct __ns3__FEDummy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FEDummy(struct soap*, const struct __ns3__FEDummy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FEDummy(struct soap*, const char*, int, const struct __ns3__FEDummy *, const char*);
SOAP_FMAC3 struct __ns3__FEDummy * SOAP_FMAC4 soap_in___ns3__FEDummy(struct soap*, const char*, struct __ns3__FEDummy *, const char*);
SOAP_FMAC1 struct __ns3__FEDummy * SOAP_FMAC2 soap_instantiate___ns3__FEDummy(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FEDummy * soap_new___ns3__FEDummy(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FEDummy(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FEDummy * soap_new_req___ns3__FEDummy(
	struct soap *soap)
{
	struct __ns3__FEDummy *_p = afip::soap_new___ns3__FEDummy(soap);
	if (_p)
	{	afip::soap_default___ns3__FEDummy(soap, _p);
	}
	return _p;
}

inline struct __ns3__FEDummy * soap_new_set___ns3__FEDummy(
	struct soap *soap,
	_ns3__FEDummy *ns3__FEDummy)
{
	struct __ns3__FEDummy *_p = afip::soap_new___ns3__FEDummy(soap);
	if (_p)
	{	afip::soap_default___ns3__FEDummy(soap, _p);
		_p->ns3__FEDummy = ns3__FEDummy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FEDummy(struct soap*, const struct __ns3__FEDummy *, const char*, const char*);

inline int soap_write___ns3__FEDummy(struct soap *soap, struct __ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FEDummy(soap, p), 0) || afip::soap_put___ns3__FEDummy(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FEDummy(struct soap *soap, const char *URL, struct __ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEDummy(soap, p), 0) || afip::soap_put___ns3__FEDummy(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FEDummy(struct soap *soap, const char *URL, struct __ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEDummy(soap, p), 0) || afip::soap_put___ns3__FEDummy(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FEDummy(struct soap *soap, const char *URL, struct __ns3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FEDummy(soap, p), 0) || afip::soap_put___ns3__FEDummy(soap, p, "-ns3:FEDummy", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FEDummy * SOAP_FMAC4 soap_get___ns3__FEDummy(struct soap*, struct __ns3__FEDummy *, const char*, const char*);

inline int soap_read___ns3__FEDummy(struct soap *soap, struct __ns3__FEDummy *p)
{
	if (p)
	{	afip::soap_default___ns3__FEDummy(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FEDummy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FEDummy(struct soap *soap, const char *URL, struct __ns3__FEDummy *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FEDummy(struct soap *soap, struct __ns3__FEDummy *p)
{
	if (afip::soap_read___ns3__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECompTotXRequest_DEFINED
#define SOAP_TYPE_afip___ns3__FECompTotXRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECompTotXRequest(struct soap*, struct __ns3__FECompTotXRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECompTotXRequest(struct soap*, const struct __ns3__FECompTotXRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECompTotXRequest(struct soap*, const char*, int, const struct __ns3__FECompTotXRequest *, const char*);
SOAP_FMAC3 struct __ns3__FECompTotXRequest * SOAP_FMAC4 soap_in___ns3__FECompTotXRequest(struct soap*, const char*, struct __ns3__FECompTotXRequest *, const char*);
SOAP_FMAC1 struct __ns3__FECompTotXRequest * SOAP_FMAC2 soap_instantiate___ns3__FECompTotXRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECompTotXRequest * soap_new___ns3__FECompTotXRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECompTotXRequest(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECompTotXRequest * soap_new_req___ns3__FECompTotXRequest(
	struct soap *soap)
{
	struct __ns3__FECompTotXRequest *_p = afip::soap_new___ns3__FECompTotXRequest(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompTotXRequest(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECompTotXRequest * soap_new_set___ns3__FECompTotXRequest(
	struct soap *soap,
	_ns3__FECompTotXRequest *ns3__FECompTotXRequest)
{
	struct __ns3__FECompTotXRequest *_p = afip::soap_new___ns3__FECompTotXRequest(soap);
	if (_p)
	{	afip::soap_default___ns3__FECompTotXRequest(soap, _p);
		_p->ns3__FECompTotXRequest = ns3__FECompTotXRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECompTotXRequest(struct soap*, const struct __ns3__FECompTotXRequest *, const char*, const char*);

inline int soap_write___ns3__FECompTotXRequest(struct soap *soap, struct __ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECompTotXRequest(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECompTotXRequest(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompTotXRequest(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECompTotXRequest(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompTotXRequest(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECompTotXRequest(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECompTotXRequest(soap, p), 0) || afip::soap_put___ns3__FECompTotXRequest(soap, p, "-ns3:FECompTotXRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECompTotXRequest * SOAP_FMAC4 soap_get___ns3__FECompTotXRequest(struct soap*, struct __ns3__FECompTotXRequest *, const char*, const char*);

inline int soap_read___ns3__FECompTotXRequest(struct soap *soap, struct __ns3__FECompTotXRequest *p)
{
	if (p)
	{	afip::soap_default___ns3__FECompTotXRequest(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECompTotXRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECompTotXRequest(struct soap *soap, const char *URL, struct __ns3__FECompTotXRequest *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECompTotXRequest(struct soap *soap, struct __ns3__FECompTotXRequest *p)
{
	if (afip::soap_read___ns3__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns3__FECAESolicitar_DEFINED
#define SOAP_TYPE_afip___ns3__FECAESolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__FECAESolicitar(struct soap*, struct __ns3__FECAESolicitar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__FECAESolicitar(struct soap*, const struct __ns3__FECAESolicitar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__FECAESolicitar(struct soap*, const char*, int, const struct __ns3__FECAESolicitar *, const char*);
SOAP_FMAC3 struct __ns3__FECAESolicitar * SOAP_FMAC4 soap_in___ns3__FECAESolicitar(struct soap*, const char*, struct __ns3__FECAESolicitar *, const char*);
SOAP_FMAC1 struct __ns3__FECAESolicitar * SOAP_FMAC2 soap_instantiate___ns3__FECAESolicitar(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns3__FECAESolicitar * soap_new___ns3__FECAESolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns3__FECAESolicitar(soap, n, NULL, NULL, NULL);
}

inline struct __ns3__FECAESolicitar * soap_new_req___ns3__FECAESolicitar(
	struct soap *soap)
{
	struct __ns3__FECAESolicitar *_p = afip::soap_new___ns3__FECAESolicitar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAESolicitar(soap, _p);
	}
	return _p;
}

inline struct __ns3__FECAESolicitar * soap_new_set___ns3__FECAESolicitar(
	struct soap *soap,
	_ns3__FECAESolicitar *ns3__FECAESolicitar)
{
	struct __ns3__FECAESolicitar *_p = afip::soap_new___ns3__FECAESolicitar(soap);
	if (_p)
	{	afip::soap_default___ns3__FECAESolicitar(soap, _p);
		_p->ns3__FECAESolicitar = ns3__FECAESolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__FECAESolicitar(struct soap*, const struct __ns3__FECAESolicitar *, const char*, const char*);

inline int soap_write___ns3__FECAESolicitar(struct soap *soap, struct __ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns3__FECAESolicitar(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns3__FECAESolicitar(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAESolicitar(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns3__FECAESolicitar(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAESolicitar(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns3__FECAESolicitar(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns3__FECAESolicitar(soap, p), 0) || afip::soap_put___ns3__FECAESolicitar(soap, p, "-ns3:FECAESolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns3__FECAESolicitar * SOAP_FMAC4 soap_get___ns3__FECAESolicitar(struct soap*, struct __ns3__FECAESolicitar *, const char*, const char*);

inline int soap_read___ns3__FECAESolicitar(struct soap *soap, struct __ns3__FECAESolicitar *p)
{
	if (p)
	{	afip::soap_default___ns3__FECAESolicitar(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns3__FECAESolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns3__FECAESolicitar(struct soap *soap, const char *URL, struct __ns3__FECAESolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns3__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns3__FECAESolicitar(struct soap *soap, struct __ns3__FECAESolicitar *p)
{
	if (afip::soap_read___ns3__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip___ns2__loginCms_DEFINED
#define SOAP_TYPE_afip___ns2__loginCms_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__loginCms(struct soap*, struct __ns2__loginCms *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__loginCms(struct soap*, const struct __ns2__loginCms *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__loginCms(struct soap*, const char*, int, const struct __ns2__loginCms *, const char*);
SOAP_FMAC3 struct __ns2__loginCms * SOAP_FMAC4 soap_in___ns2__loginCms(struct soap*, const char*, struct __ns2__loginCms *, const char*);
SOAP_FMAC1 struct __ns2__loginCms * SOAP_FMAC2 soap_instantiate___ns2__loginCms(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns2__loginCms * soap_new___ns2__loginCms(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns2__loginCms(soap, n, NULL, NULL, NULL);
}

inline struct __ns2__loginCms * soap_new_req___ns2__loginCms(
	struct soap *soap)
{
	struct __ns2__loginCms *_p = afip::soap_new___ns2__loginCms(soap);
	if (_p)
	{	afip::soap_default___ns2__loginCms(soap, _p);
	}
	return _p;
}

inline struct __ns2__loginCms * soap_new_set___ns2__loginCms(
	struct soap *soap,
	_ns1__loginCms *ns1__loginCms)
{
	struct __ns2__loginCms *_p = afip::soap_new___ns2__loginCms(soap);
	if (_p)
	{	afip::soap_default___ns2__loginCms(soap, _p);
		_p->ns1__loginCms = ns1__loginCms;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__loginCms(struct soap*, const struct __ns2__loginCms *, const char*, const char*);

inline int soap_write___ns2__loginCms(struct soap *soap, struct __ns2__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize___ns2__loginCms(soap, p), 0) || afip::soap_put___ns2__loginCms(soap, p, "-ns2:loginCms", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns2__loginCms(struct soap *soap, const char *URL, struct __ns2__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns2__loginCms(soap, p), 0) || afip::soap_put___ns2__loginCms(soap, p, "-ns2:loginCms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns2__loginCms(struct soap *soap, const char *URL, struct __ns2__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns2__loginCms(soap, p), 0) || afip::soap_put___ns2__loginCms(soap, p, "-ns2:loginCms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns2__loginCms(struct soap *soap, const char *URL, struct __ns2__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize___ns2__loginCms(soap, p), 0) || afip::soap_put___ns2__loginCms(soap, p, "-ns2:loginCms", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns2__loginCms * SOAP_FMAC4 soap_get___ns2__loginCms(struct soap*, struct __ns2__loginCms *, const char*, const char*);

inline int soap_read___ns2__loginCms(struct soap *soap, struct __ns2__loginCms *p)
{
	if (p)
	{	afip::soap_default___ns2__loginCms(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get___ns2__loginCms(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns2__loginCms(struct soap *soap, const char *URL, struct __ns2__loginCms *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read___ns2__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___ns2__loginCms(struct soap *soap, struct __ns2__loginCms *p)
{
	if (afip::soap_read___ns2__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_afip_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = afip::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	ns2__LoginFault *ns2__fault,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = afip::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	afip::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->ns2__fault = ns2__fault;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (afip::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || afip::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || afip::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || afip::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (afip::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || afip::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	afip::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || afip::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (afip::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_afip_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_afip_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_afip_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_afip_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposPaises_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposPaises_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposPaises(struct soap*, _ns3__FEParamGetTiposPaises *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposPaises(struct soap*, const char *, int, _ns3__FEParamGetTiposPaises *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposPaises ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposPaises(struct soap*, const char*, _ns3__FEParamGetTiposPaises **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposPaises(struct soap*, _ns3__FEParamGetTiposPaises *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposPaises ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposPaises(struct soap*, _ns3__FEParamGetTiposPaises **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposDoc_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposDoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposDoc(struct soap*, _ns3__FEParamGetTiposDoc *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposDoc(struct soap*, const char *, int, _ns3__FEParamGetTiposDoc *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposDoc ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposDoc(struct soap*, const char*, _ns3__FEParamGetTiposDoc **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposDoc(struct soap*, _ns3__FEParamGetTiposDoc *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposDoc ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposDoc(struct soap*, _ns3__FEParamGetTiposDoc **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposCbte_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposCbte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposCbte(struct soap*, _ns3__FEParamGetTiposCbte *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposCbte(struct soap*, const char *, int, _ns3__FEParamGetTiposCbte *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposCbte ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposCbte(struct soap*, const char*, _ns3__FEParamGetTiposCbte **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposCbte(struct soap*, _ns3__FEParamGetTiposCbte *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposCbte ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposCbte(struct soap*, _ns3__FEParamGetTiposCbte **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetPtosVenta_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetPtosVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetPtosVenta(struct soap*, _ns3__FEParamGetPtosVenta *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetPtosVenta(struct soap*, const char *, int, _ns3__FEParamGetPtosVenta *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetPtosVenta ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetPtosVenta(struct soap*, const char*, _ns3__FEParamGetPtosVenta **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetPtosVenta(struct soap*, _ns3__FEParamGetPtosVenta *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetPtosVenta ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetPtosVenta(struct soap*, _ns3__FEParamGetPtosVenta **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposConcepto_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposConcepto_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposConcepto(struct soap*, _ns3__FEParamGetTiposConcepto *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposConcepto(struct soap*, const char *, int, _ns3__FEParamGetTiposConcepto *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposConcepto ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposConcepto(struct soap*, const char*, _ns3__FEParamGetTiposConcepto **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposConcepto(struct soap*, _ns3__FEParamGetTiposConcepto *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposConcepto ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposConcepto(struct soap*, _ns3__FEParamGetTiposConcepto **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposOpcional_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposOpcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposOpcional(struct soap*, _ns3__FEParamGetTiposOpcional *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposOpcional(struct soap*, const char *, int, _ns3__FEParamGetTiposOpcional *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposOpcional ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposOpcional(struct soap*, const char*, _ns3__FEParamGetTiposOpcional **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposOpcional(struct soap*, _ns3__FEParamGetTiposOpcional *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposOpcional ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposOpcional(struct soap*, _ns3__FEParamGetTiposOpcional **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposIva_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposIva(struct soap*, _ns3__FEParamGetTiposIva *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposIva(struct soap*, const char *, int, _ns3__FEParamGetTiposIva *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposIva ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposIva(struct soap*, const char*, _ns3__FEParamGetTiposIva **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposIva(struct soap*, _ns3__FEParamGetTiposIva *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposIva ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposIva(struct soap*, _ns3__FEParamGetTiposIva **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposMonedas_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposMonedas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposMonedas(struct soap*, _ns3__FEParamGetTiposMonedas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposMonedas(struct soap*, const char *, int, _ns3__FEParamGetTiposMonedas *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposMonedas ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposMonedas(struct soap*, const char*, _ns3__FEParamGetTiposMonedas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposMonedas(struct soap*, _ns3__FEParamGetTiposMonedas *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposMonedas ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposMonedas(struct soap*, _ns3__FEParamGetTiposMonedas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposTributos_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetTiposTributos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetTiposTributos(struct soap*, _ns3__FEParamGetTiposTributos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetTiposTributos(struct soap*, const char *, int, _ns3__FEParamGetTiposTributos *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetTiposTributos ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetTiposTributos(struct soap*, const char*, _ns3__FEParamGetTiposTributos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetTiposTributos(struct soap*, _ns3__FEParamGetTiposTributos *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetTiposTributos ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetTiposTributos(struct soap*, _ns3__FEParamGetTiposTributos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEParamGetCotizacion_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEParamGetCotizacion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEParamGetCotizacion(struct soap*, _ns3__FEParamGetCotizacion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEParamGetCotizacion(struct soap*, const char *, int, _ns3__FEParamGetCotizacion *const*, const char *);
SOAP_FMAC3 _ns3__FEParamGetCotizacion ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEParamGetCotizacion(struct soap*, const char*, _ns3__FEParamGetCotizacion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEParamGetCotizacion(struct soap*, _ns3__FEParamGetCotizacion *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEParamGetCotizacion ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEParamGetCotizacion(struct soap*, _ns3__FEParamGetCotizacion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEAConsultar_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEAConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECAEAConsultar(struct soap*, _ns3__FECAEAConsultar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECAEAConsultar(struct soap*, const char *, int, _ns3__FECAEAConsultar *const*, const char *);
SOAP_FMAC3 _ns3__FECAEAConsultar ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECAEAConsultar(struct soap*, const char*, _ns3__FECAEAConsultar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECAEAConsultar(struct soap*, _ns3__FECAEAConsultar *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECAEAConsultar ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECAEAConsultar(struct soap*, _ns3__FECAEAConsultar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoInformar_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoInformar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECAEASinMovimientoInformar(struct soap*, _ns3__FECAEASinMovimientoInformar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECAEASinMovimientoInformar(struct soap*, const char *, int, _ns3__FECAEASinMovimientoInformar *const*, const char *);
SOAP_FMAC3 _ns3__FECAEASinMovimientoInformar ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECAEASinMovimientoInformar(struct soap*, const char*, _ns3__FECAEASinMovimientoInformar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECAEASinMovimientoInformar(struct soap*, _ns3__FECAEASinMovimientoInformar *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECAEASinMovimientoInformar ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECAEASinMovimientoInformar(struct soap*, _ns3__FECAEASinMovimientoInformar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoConsultar_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEASinMovimientoConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECAEASinMovimientoConsultar(struct soap*, _ns3__FECAEASinMovimientoConsultar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECAEASinMovimientoConsultar(struct soap*, const char *, int, _ns3__FECAEASinMovimientoConsultar *const*, const char *);
SOAP_FMAC3 _ns3__FECAEASinMovimientoConsultar ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECAEASinMovimientoConsultar(struct soap*, const char*, _ns3__FECAEASinMovimientoConsultar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECAEASinMovimientoConsultar(struct soap*, _ns3__FECAEASinMovimientoConsultar *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECAEASinMovimientoConsultar ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECAEASinMovimientoConsultar(struct soap*, _ns3__FECAEASinMovimientoConsultar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEASolicitar_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEASolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECAEASolicitar(struct soap*, _ns3__FECAEASolicitar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECAEASolicitar(struct soap*, const char *, int, _ns3__FECAEASolicitar *const*, const char *);
SOAP_FMAC3 _ns3__FECAEASolicitar ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECAEASolicitar(struct soap*, const char*, _ns3__FECAEASolicitar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECAEASolicitar(struct soap*, _ns3__FECAEASolicitar *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECAEASolicitar ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECAEASolicitar(struct soap*, _ns3__FECAEASolicitar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAEARegInformativo_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECAEARegInformativo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECAEARegInformativo(struct soap*, _ns3__FECAEARegInformativo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECAEARegInformativo(struct soap*, const char *, int, _ns3__FECAEARegInformativo *const*, const char *);
SOAP_FMAC3 _ns3__FECAEARegInformativo ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECAEARegInformativo(struct soap*, const char*, _ns3__FECAEARegInformativo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECAEARegInformativo(struct soap*, _ns3__FECAEARegInformativo *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECAEARegInformativo ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECAEARegInformativo(struct soap*, _ns3__FECAEARegInformativo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECompConsultar_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECompConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECompConsultar(struct soap*, _ns3__FECompConsultar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECompConsultar(struct soap*, const char *, int, _ns3__FECompConsultar *const*, const char *);
SOAP_FMAC3 _ns3__FECompConsultar ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECompConsultar(struct soap*, const char*, _ns3__FECompConsultar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECompConsultar(struct soap*, _ns3__FECompConsultar *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECompConsultar ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECompConsultar(struct soap*, _ns3__FECompConsultar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECompUltimoAutorizado_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECompUltimoAutorizado_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECompUltimoAutorizado(struct soap*, _ns3__FECompUltimoAutorizado *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECompUltimoAutorizado(struct soap*, const char *, int, _ns3__FECompUltimoAutorizado *const*, const char *);
SOAP_FMAC3 _ns3__FECompUltimoAutorizado ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECompUltimoAutorizado(struct soap*, const char*, _ns3__FECompUltimoAutorizado **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECompUltimoAutorizado(struct soap*, _ns3__FECompUltimoAutorizado *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECompUltimoAutorizado ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECompUltimoAutorizado(struct soap*, _ns3__FECompUltimoAutorizado **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FEDummy_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FEDummy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FEDummy(struct soap*, _ns3__FEDummy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FEDummy(struct soap*, const char *, int, _ns3__FEDummy *const*, const char *);
SOAP_FMAC3 _ns3__FEDummy ** SOAP_FMAC4 soap_in_PointerTo_ns3__FEDummy(struct soap*, const char*, _ns3__FEDummy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FEDummy(struct soap*, _ns3__FEDummy *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FEDummy ** SOAP_FMAC4 soap_get_PointerTo_ns3__FEDummy(struct soap*, _ns3__FEDummy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECompTotXRequest_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECompTotXRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECompTotXRequest(struct soap*, _ns3__FECompTotXRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECompTotXRequest(struct soap*, const char *, int, _ns3__FECompTotXRequest *const*, const char *);
SOAP_FMAC3 _ns3__FECompTotXRequest ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECompTotXRequest(struct soap*, const char*, _ns3__FECompTotXRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECompTotXRequest(struct soap*, _ns3__FECompTotXRequest *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECompTotXRequest ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECompTotXRequest(struct soap*, _ns3__FECompTotXRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns3__FECAESolicitar_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns3__FECAESolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__FECAESolicitar(struct soap*, _ns3__FECAESolicitar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__FECAESolicitar(struct soap*, const char *, int, _ns3__FECAESolicitar *const*, const char *);
SOAP_FMAC3 _ns3__FECAESolicitar ** SOAP_FMAC4 soap_in_PointerTo_ns3__FECAESolicitar(struct soap*, const char*, _ns3__FECAESolicitar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__FECAESolicitar(struct soap*, _ns3__FECAESolicitar *const*, const char*, const char*);
SOAP_FMAC3 _ns3__FECAESolicitar ** SOAP_FMAC4 soap_get_PointerTo_ns3__FECAESolicitar(struct soap*, _ns3__FECAESolicitar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTo_ns1__loginCms_DEFINED
#define SOAP_TYPE_afip_PointerTo_ns1__loginCms_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__loginCms(struct soap*, _ns1__loginCms *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__loginCms(struct soap*, const char *, int, _ns1__loginCms *const*, const char *);
SOAP_FMAC3 _ns1__loginCms ** SOAP_FMAC4 soap_in_PointerTo_ns1__loginCms(struct soap*, const char*, _ns1__loginCms **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__loginCms(struct soap*, _ns1__loginCms *const*, const char*, const char*);
SOAP_FMAC3 _ns1__loginCms ** SOAP_FMAC4 soap_get_PointerTo_ns1__loginCms(struct soap*, _ns1__loginCms **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons2__LoginFault_DEFINED
#define SOAP_TYPE_afip_PointerTons2__LoginFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__LoginFault(struct soap*, ns2__LoginFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__LoginFault(struct soap*, const char *, int, ns2__LoginFault *const*, const char *);
SOAP_FMAC3 ns2__LoginFault ** SOAP_FMAC4 soap_in_PointerTons2__LoginFault(struct soap*, const char*, ns2__LoginFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__LoginFault(struct soap*, ns2__LoginFault *const*, const char*, const char*);
SOAP_FMAC3 ns2__LoginFault ** SOAP_FMAC4 soap_get_PointerTons2__LoginFault(struct soap*, ns2__LoginFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FEPaisResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FEPaisResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FEPaisResponse(struct soap*, ns3__FEPaisResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FEPaisResponse(struct soap*, const char *, int, ns3__FEPaisResponse *const*, const char *);
SOAP_FMAC3 ns3__FEPaisResponse ** SOAP_FMAC4 soap_in_PointerTons3__FEPaisResponse(struct soap*, const char*, ns3__FEPaisResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FEPaisResponse(struct soap*, ns3__FEPaisResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FEPaisResponse ** SOAP_FMAC4 soap_get_PointerTons3__FEPaisResponse(struct soap*, ns3__FEPaisResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__DocTipoResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__DocTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DocTipoResponse(struct soap*, ns3__DocTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DocTipoResponse(struct soap*, const char *, int, ns3__DocTipoResponse *const*, const char *);
SOAP_FMAC3 ns3__DocTipoResponse ** SOAP_FMAC4 soap_in_PointerTons3__DocTipoResponse(struct soap*, const char*, ns3__DocTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DocTipoResponse(struct soap*, ns3__DocTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__DocTipoResponse ** SOAP_FMAC4 soap_get_PointerTons3__DocTipoResponse(struct soap*, ns3__DocTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__CbteTipoResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__CbteTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CbteTipoResponse(struct soap*, ns3__CbteTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CbteTipoResponse(struct soap*, const char *, int, ns3__CbteTipoResponse *const*, const char *);
SOAP_FMAC3 ns3__CbteTipoResponse ** SOAP_FMAC4 soap_in_PointerTons3__CbteTipoResponse(struct soap*, const char*, ns3__CbteTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CbteTipoResponse(struct soap*, ns3__CbteTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__CbteTipoResponse ** SOAP_FMAC4 soap_get_PointerTons3__CbteTipoResponse(struct soap*, ns3__CbteTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FEPtoVentaResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FEPtoVentaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FEPtoVentaResponse(struct soap*, ns3__FEPtoVentaResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FEPtoVentaResponse(struct soap*, const char *, int, ns3__FEPtoVentaResponse *const*, const char *);
SOAP_FMAC3 ns3__FEPtoVentaResponse ** SOAP_FMAC4 soap_in_PointerTons3__FEPtoVentaResponse(struct soap*, const char*, ns3__FEPtoVentaResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FEPtoVentaResponse(struct soap*, ns3__FEPtoVentaResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FEPtoVentaResponse ** SOAP_FMAC4 soap_get_PointerTons3__FEPtoVentaResponse(struct soap*, ns3__FEPtoVentaResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ConceptoTipoResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ConceptoTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ConceptoTipoResponse(struct soap*, ns3__ConceptoTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ConceptoTipoResponse(struct soap*, const char *, int, ns3__ConceptoTipoResponse *const*, const char *);
SOAP_FMAC3 ns3__ConceptoTipoResponse ** SOAP_FMAC4 soap_in_PointerTons3__ConceptoTipoResponse(struct soap*, const char*, ns3__ConceptoTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ConceptoTipoResponse(struct soap*, ns3__ConceptoTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__ConceptoTipoResponse ** SOAP_FMAC4 soap_get_PointerTons3__ConceptoTipoResponse(struct soap*, ns3__ConceptoTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__OpcionalTipoResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__OpcionalTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OpcionalTipoResponse(struct soap*, ns3__OpcionalTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OpcionalTipoResponse(struct soap*, const char *, int, ns3__OpcionalTipoResponse *const*, const char *);
SOAP_FMAC3 ns3__OpcionalTipoResponse ** SOAP_FMAC4 soap_in_PointerTons3__OpcionalTipoResponse(struct soap*, const char*, ns3__OpcionalTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OpcionalTipoResponse(struct soap*, ns3__OpcionalTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__OpcionalTipoResponse ** SOAP_FMAC4 soap_get_PointerTons3__OpcionalTipoResponse(struct soap*, ns3__OpcionalTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__IvaTipoResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__IvaTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IvaTipoResponse(struct soap*, ns3__IvaTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IvaTipoResponse(struct soap*, const char *, int, ns3__IvaTipoResponse *const*, const char *);
SOAP_FMAC3 ns3__IvaTipoResponse ** SOAP_FMAC4 soap_in_PointerTons3__IvaTipoResponse(struct soap*, const char*, ns3__IvaTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IvaTipoResponse(struct soap*, ns3__IvaTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__IvaTipoResponse ** SOAP_FMAC4 soap_get_PointerTons3__IvaTipoResponse(struct soap*, ns3__IvaTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__MonedaResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__MonedaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__MonedaResponse(struct soap*, ns3__MonedaResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__MonedaResponse(struct soap*, const char *, int, ns3__MonedaResponse *const*, const char *);
SOAP_FMAC3 ns3__MonedaResponse ** SOAP_FMAC4 soap_in_PointerTons3__MonedaResponse(struct soap*, const char*, ns3__MonedaResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__MonedaResponse(struct soap*, ns3__MonedaResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__MonedaResponse ** SOAP_FMAC4 soap_get_PointerTons3__MonedaResponse(struct soap*, ns3__MonedaResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FETributoResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FETributoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FETributoResponse(struct soap*, ns3__FETributoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FETributoResponse(struct soap*, const char *, int, ns3__FETributoResponse *const*, const char *);
SOAP_FMAC3 ns3__FETributoResponse ** SOAP_FMAC4 soap_in_PointerTons3__FETributoResponse(struct soap*, const char*, ns3__FETributoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FETributoResponse(struct soap*, ns3__FETributoResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FETributoResponse ** SOAP_FMAC4 soap_get_PointerTons3__FETributoResponse(struct soap*, ns3__FETributoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECotizacionResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECotizacionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECotizacionResponse(struct soap*, ns3__FECotizacionResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECotizacionResponse(struct soap*, const char *, int, ns3__FECotizacionResponse *const*, const char *);
SOAP_FMAC3 ns3__FECotizacionResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECotizacionResponse(struct soap*, const char*, ns3__FECotizacionResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECotizacionResponse(struct soap*, ns3__FECotizacionResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECotizacionResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECotizacionResponse(struct soap*, ns3__FECotizacionResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEASinMovResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEASinMovResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEASinMovResponse(struct soap*, ns3__FECAEASinMovResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEASinMovResponse(struct soap*, const char *, int, ns3__FECAEASinMovResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEASinMovResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEASinMovResponse(struct soap*, const char*, ns3__FECAEASinMovResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEASinMovResponse(struct soap*, ns3__FECAEASinMovResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEASinMovResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEASinMovResponse(struct soap*, ns3__FECAEASinMovResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEASinMovConsResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEASinMovConsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEASinMovConsResponse(struct soap*, ns3__FECAEASinMovConsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEASinMovConsResponse(struct soap*, const char *, int, ns3__FECAEASinMovConsResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEASinMovConsResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEASinMovConsResponse(struct soap*, const char*, ns3__FECAEASinMovConsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEASinMovConsResponse(struct soap*, ns3__FECAEASinMovConsResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEASinMovConsResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEASinMovConsResponse(struct soap*, ns3__FECAEASinMovConsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEAGetResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEAGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEAGetResponse(struct soap*, ns3__FECAEAGetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEAGetResponse(struct soap*, const char *, int, ns3__FECAEAGetResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEAGetResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEAGetResponse(struct soap*, const char*, ns3__FECAEAGetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEAGetResponse(struct soap*, ns3__FECAEAGetResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEAGetResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEAGetResponse(struct soap*, ns3__FECAEAGetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEAResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEAResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEAResponse(struct soap*, ns3__FECAEAResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEAResponse(struct soap*, const char *, int, ns3__FECAEAResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEAResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEAResponse(struct soap*, const char*, ns3__FECAEAResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEAResponse(struct soap*, ns3__FECAEAResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEAResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEAResponse(struct soap*, ns3__FECAEAResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEARequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEARequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEARequest(struct soap*, ns3__FECAEARequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEARequest(struct soap*, const char *, int, ns3__FECAEARequest *const*, const char *);
SOAP_FMAC3 ns3__FECAEARequest ** SOAP_FMAC4 soap_in_PointerTons3__FECAEARequest(struct soap*, const char*, ns3__FECAEARequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEARequest(struct soap*, ns3__FECAEARequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEARequest ** SOAP_FMAC4 soap_get_PointerTons3__FECAEARequest(struct soap*, ns3__FECAEARequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECompConsultaResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECompConsultaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECompConsultaResponse(struct soap*, ns3__FECompConsultaResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECompConsultaResponse(struct soap*, const char *, int, ns3__FECompConsultaResponse *const*, const char *);
SOAP_FMAC3 ns3__FECompConsultaResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECompConsultaResponse(struct soap*, const char*, ns3__FECompConsultaResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECompConsultaResponse(struct soap*, ns3__FECompConsultaResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECompConsultaResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECompConsultaResponse(struct soap*, ns3__FECompConsultaResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECompConsultaReq_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECompConsultaReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECompConsultaReq(struct soap*, ns3__FECompConsultaReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECompConsultaReq(struct soap*, const char *, int, ns3__FECompConsultaReq *const*, const char *);
SOAP_FMAC3 ns3__FECompConsultaReq ** SOAP_FMAC4 soap_in_PointerTons3__FECompConsultaReq(struct soap*, const char*, ns3__FECompConsultaReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECompConsultaReq(struct soap*, ns3__FECompConsultaReq *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECompConsultaReq ** SOAP_FMAC4 soap_get_PointerTons3__FECompConsultaReq(struct soap*, ns3__FECompConsultaReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FERecuperaLastCbteResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FERecuperaLastCbteResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FERecuperaLastCbteResponse(struct soap*, ns3__FERecuperaLastCbteResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FERecuperaLastCbteResponse(struct soap*, const char *, int, ns3__FERecuperaLastCbteResponse *const*, const char *);
SOAP_FMAC3 ns3__FERecuperaLastCbteResponse ** SOAP_FMAC4 soap_in_PointerTons3__FERecuperaLastCbteResponse(struct soap*, const char*, ns3__FERecuperaLastCbteResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FERecuperaLastCbteResponse(struct soap*, ns3__FERecuperaLastCbteResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FERecuperaLastCbteResponse ** SOAP_FMAC4 soap_get_PointerTons3__FERecuperaLastCbteResponse(struct soap*, ns3__FERecuperaLastCbteResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__DummyResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__DummyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DummyResponse(struct soap*, ns3__DummyResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DummyResponse(struct soap*, const char *, int, ns3__DummyResponse *const*, const char *);
SOAP_FMAC3 ns3__DummyResponse ** SOAP_FMAC4 soap_in_PointerTons3__DummyResponse(struct soap*, const char*, ns3__DummyResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DummyResponse(struct soap*, ns3__DummyResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__DummyResponse ** SOAP_FMAC4 soap_get_PointerTons3__DummyResponse(struct soap*, ns3__DummyResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FERegXReqResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FERegXReqResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FERegXReqResponse(struct soap*, ns3__FERegXReqResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FERegXReqResponse(struct soap*, const char *, int, ns3__FERegXReqResponse *const*, const char *);
SOAP_FMAC3 ns3__FERegXReqResponse ** SOAP_FMAC4 soap_in_PointerTons3__FERegXReqResponse(struct soap*, const char*, ns3__FERegXReqResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FERegXReqResponse(struct soap*, ns3__FERegXReqResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FERegXReqResponse ** SOAP_FMAC4 soap_get_PointerTons3__FERegXReqResponse(struct soap*, ns3__FERegXReqResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEResponse(struct soap*, ns3__FECAEResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEResponse(struct soap*, const char *, int, ns3__FECAEResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEResponse(struct soap*, const char*, ns3__FECAEResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEResponse(struct soap*, ns3__FECAEResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEResponse(struct soap*, ns3__FECAEResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAERequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAERequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAERequest(struct soap*, ns3__FECAERequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAERequest(struct soap*, const char *, int, ns3__FECAERequest *const*, const char *);
SOAP_FMAC3 ns3__FECAERequest ** SOAP_FMAC4 soap_in_PointerTons3__FECAERequest(struct soap*, const char*, ns3__FECAERequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAERequest(struct soap*, ns3__FECAERequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAERequest ** SOAP_FMAC4 soap_get_PointerTons3__FECAERequest(struct soap*, ns3__FECAERequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FEAuthRequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FEAuthRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FEAuthRequest(struct soap*, ns3__FEAuthRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FEAuthRequest(struct soap*, const char *, int, ns3__FEAuthRequest *const*, const char *);
SOAP_FMAC3 ns3__FEAuthRequest ** SOAP_FMAC4 soap_in_PointerTons3__FEAuthRequest(struct soap*, const char*, ns3__FEAuthRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FEAuthRequest(struct soap*, ns3__FEAuthRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__FEAuthRequest ** SOAP_FMAC4 soap_get_PointerTons3__FEAuthRequest(struct soap*, ns3__FEAuthRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__PaisTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__PaisTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PaisTipo(struct soap*, ns3__PaisTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PaisTipo(struct soap*, const char *, int, ns3__PaisTipo *const*, const char *);
SOAP_FMAC3 ns3__PaisTipo ** SOAP_FMAC4 soap_in_PointerTons3__PaisTipo(struct soap*, const char*, ns3__PaisTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PaisTipo(struct soap*, ns3__PaisTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__PaisTipo ** SOAP_FMAC4 soap_get_PointerTons3__PaisTipo(struct soap*, ns3__PaisTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfPaisTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfPaisTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfPaisTipo(struct soap*, ns3__ArrayOfPaisTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfPaisTipo(struct soap*, const char *, int, ns3__ArrayOfPaisTipo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfPaisTipo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfPaisTipo(struct soap*, const char*, ns3__ArrayOfPaisTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfPaisTipo(struct soap*, ns3__ArrayOfPaisTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfPaisTipo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfPaisTipo(struct soap*, ns3__ArrayOfPaisTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__DocTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__DocTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__DocTipo(struct soap*, ns3__DocTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__DocTipo(struct soap*, const char *, int, ns3__DocTipo *const*, const char *);
SOAP_FMAC3 ns3__DocTipo ** SOAP_FMAC4 soap_in_PointerTons3__DocTipo(struct soap*, const char*, ns3__DocTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__DocTipo(struct soap*, ns3__DocTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__DocTipo ** SOAP_FMAC4 soap_get_PointerTons3__DocTipo(struct soap*, ns3__DocTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfDocTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfDocTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfDocTipo(struct soap*, ns3__ArrayOfDocTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfDocTipo(struct soap*, const char *, int, ns3__ArrayOfDocTipo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfDocTipo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfDocTipo(struct soap*, const char*, ns3__ArrayOfDocTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfDocTipo(struct soap*, ns3__ArrayOfDocTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfDocTipo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfDocTipo(struct soap*, ns3__ArrayOfDocTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__CbteTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__CbteTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CbteTipo(struct soap*, ns3__CbteTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CbteTipo(struct soap*, const char *, int, ns3__CbteTipo *const*, const char *);
SOAP_FMAC3 ns3__CbteTipo ** SOAP_FMAC4 soap_in_PointerTons3__CbteTipo(struct soap*, const char*, ns3__CbteTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CbteTipo(struct soap*, ns3__CbteTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__CbteTipo ** SOAP_FMAC4 soap_get_PointerTons3__CbteTipo(struct soap*, ns3__CbteTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfCbteTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfCbteTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfCbteTipo(struct soap*, ns3__ArrayOfCbteTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfCbteTipo(struct soap*, const char *, int, ns3__ArrayOfCbteTipo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfCbteTipo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfCbteTipo(struct soap*, const char*, ns3__ArrayOfCbteTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfCbteTipo(struct soap*, ns3__ArrayOfCbteTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfCbteTipo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfCbteTipo(struct soap*, ns3__ArrayOfCbteTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__PtoVenta_DEFINED
#define SOAP_TYPE_afip_PointerTons3__PtoVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__PtoVenta(struct soap*, ns3__PtoVenta *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__PtoVenta(struct soap*, const char *, int, ns3__PtoVenta *const*, const char *);
SOAP_FMAC3 ns3__PtoVenta ** SOAP_FMAC4 soap_in_PointerTons3__PtoVenta(struct soap*, const char*, ns3__PtoVenta **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__PtoVenta(struct soap*, ns3__PtoVenta *const*, const char*, const char*);
SOAP_FMAC3 ns3__PtoVenta ** SOAP_FMAC4 soap_get_PointerTons3__PtoVenta(struct soap*, ns3__PtoVenta **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfPtoVenta_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfPtoVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfPtoVenta(struct soap*, ns3__ArrayOfPtoVenta *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfPtoVenta(struct soap*, const char *, int, ns3__ArrayOfPtoVenta *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfPtoVenta ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfPtoVenta(struct soap*, const char*, ns3__ArrayOfPtoVenta **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfPtoVenta(struct soap*, ns3__ArrayOfPtoVenta *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfPtoVenta ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfPtoVenta(struct soap*, ns3__ArrayOfPtoVenta **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ConceptoTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ConceptoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ConceptoTipo(struct soap*, ns3__ConceptoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ConceptoTipo(struct soap*, const char *, int, ns3__ConceptoTipo *const*, const char *);
SOAP_FMAC3 ns3__ConceptoTipo ** SOAP_FMAC4 soap_in_PointerTons3__ConceptoTipo(struct soap*, const char*, ns3__ConceptoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ConceptoTipo(struct soap*, ns3__ConceptoTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ConceptoTipo ** SOAP_FMAC4 soap_get_PointerTons3__ConceptoTipo(struct soap*, ns3__ConceptoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfConceptoTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfConceptoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfConceptoTipo(struct soap*, ns3__ArrayOfConceptoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfConceptoTipo(struct soap*, const char *, int, ns3__ArrayOfConceptoTipo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfConceptoTipo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfConceptoTipo(struct soap*, const char*, ns3__ArrayOfConceptoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfConceptoTipo(struct soap*, ns3__ArrayOfConceptoTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfConceptoTipo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfConceptoTipo(struct soap*, ns3__ArrayOfConceptoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__OpcionalTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__OpcionalTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__OpcionalTipo(struct soap*, ns3__OpcionalTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__OpcionalTipo(struct soap*, const char *, int, ns3__OpcionalTipo *const*, const char *);
SOAP_FMAC3 ns3__OpcionalTipo ** SOAP_FMAC4 soap_in_PointerTons3__OpcionalTipo(struct soap*, const char*, ns3__OpcionalTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__OpcionalTipo(struct soap*, ns3__OpcionalTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__OpcionalTipo ** SOAP_FMAC4 soap_get_PointerTons3__OpcionalTipo(struct soap*, ns3__OpcionalTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfOpcionalTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfOpcionalTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfOpcionalTipo(struct soap*, ns3__ArrayOfOpcionalTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfOpcionalTipo(struct soap*, const char *, int, ns3__ArrayOfOpcionalTipo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfOpcionalTipo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfOpcionalTipo(struct soap*, const char*, ns3__ArrayOfOpcionalTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfOpcionalTipo(struct soap*, ns3__ArrayOfOpcionalTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfOpcionalTipo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfOpcionalTipo(struct soap*, ns3__ArrayOfOpcionalTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__IvaTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__IvaTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__IvaTipo(struct soap*, ns3__IvaTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__IvaTipo(struct soap*, const char *, int, ns3__IvaTipo *const*, const char *);
SOAP_FMAC3 ns3__IvaTipo ** SOAP_FMAC4 soap_in_PointerTons3__IvaTipo(struct soap*, const char*, ns3__IvaTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__IvaTipo(struct soap*, ns3__IvaTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__IvaTipo ** SOAP_FMAC4 soap_get_PointerTons3__IvaTipo(struct soap*, ns3__IvaTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfIvaTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfIvaTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfIvaTipo(struct soap*, ns3__ArrayOfIvaTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfIvaTipo(struct soap*, const char *, int, ns3__ArrayOfIvaTipo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfIvaTipo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfIvaTipo(struct soap*, const char*, ns3__ArrayOfIvaTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfIvaTipo(struct soap*, ns3__ArrayOfIvaTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfIvaTipo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfIvaTipo(struct soap*, ns3__ArrayOfIvaTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Moneda_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Moneda_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Moneda(struct soap*, ns3__Moneda *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Moneda(struct soap*, const char *, int, ns3__Moneda *const*, const char *);
SOAP_FMAC3 ns3__Moneda ** SOAP_FMAC4 soap_in_PointerTons3__Moneda(struct soap*, const char*, ns3__Moneda **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Moneda(struct soap*, ns3__Moneda *const*, const char*, const char*);
SOAP_FMAC3 ns3__Moneda ** SOAP_FMAC4 soap_get_PointerTons3__Moneda(struct soap*, ns3__Moneda **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfMoneda_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfMoneda_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfMoneda(struct soap*, ns3__ArrayOfMoneda *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfMoneda(struct soap*, const char *, int, ns3__ArrayOfMoneda *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfMoneda ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfMoneda(struct soap*, const char*, ns3__ArrayOfMoneda **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfMoneda(struct soap*, ns3__ArrayOfMoneda *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfMoneda ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfMoneda(struct soap*, ns3__ArrayOfMoneda **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__TributoTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__TributoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__TributoTipo(struct soap*, ns3__TributoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__TributoTipo(struct soap*, const char *, int, ns3__TributoTipo *const*, const char *);
SOAP_FMAC3 ns3__TributoTipo ** SOAP_FMAC4 soap_in_PointerTons3__TributoTipo(struct soap*, const char*, ns3__TributoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__TributoTipo(struct soap*, ns3__TributoTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__TributoTipo ** SOAP_FMAC4 soap_get_PointerTons3__TributoTipo(struct soap*, ns3__TributoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfTributoTipo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfTributoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfTributoTipo(struct soap*, ns3__ArrayOfTributoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfTributoTipo(struct soap*, const char *, int, ns3__ArrayOfTributoTipo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfTributoTipo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfTributoTipo(struct soap*, const char*, ns3__ArrayOfTributoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfTributoTipo(struct soap*, ns3__ArrayOfTributoTipo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfTributoTipo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfTributoTipo(struct soap*, ns3__ArrayOfTributoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Cotizacion_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Cotizacion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Cotizacion(struct soap*, ns3__Cotizacion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Cotizacion(struct soap*, const char *, int, ns3__Cotizacion *const*, const char *);
SOAP_FMAC3 ns3__Cotizacion ** SOAP_FMAC4 soap_in_PointerTons3__Cotizacion(struct soap*, const char*, ns3__Cotizacion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Cotizacion(struct soap*, ns3__Cotizacion *const*, const char*, const char*);
SOAP_FMAC3 ns3__Cotizacion ** SOAP_FMAC4 soap_get_PointerTons3__Cotizacion(struct soap*, ns3__Cotizacion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEASinMov_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEASinMov_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEASinMov(struct soap*, ns3__FECAEASinMov *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEASinMov(struct soap*, const char *, int, ns3__FECAEASinMov *const*, const char *);
SOAP_FMAC3 ns3__FECAEASinMov ** SOAP_FMAC4 soap_in_PointerTons3__FECAEASinMov(struct soap*, const char*, ns3__FECAEASinMov **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEASinMov(struct soap*, ns3__FECAEASinMov *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEASinMov ** SOAP_FMAC4 soap_get_PointerTons3__FECAEASinMov(struct soap*, ns3__FECAEASinMov **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEASinMov_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEASinMov_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfFECAEASinMov(struct soap*, ns3__ArrayOfFECAEASinMov *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfFECAEASinMov(struct soap*, const char *, int, ns3__ArrayOfFECAEASinMov *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfFECAEASinMov ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfFECAEASinMov(struct soap*, const char*, ns3__ArrayOfFECAEASinMov **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfFECAEASinMov(struct soap*, ns3__ArrayOfFECAEASinMov *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEASinMov ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfFECAEASinMov(struct soap*, ns3__ArrayOfFECAEASinMov **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEAGet_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEAGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEAGet(struct soap*, ns3__FECAEAGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEAGet(struct soap*, const char *, int, ns3__FECAEAGet *const*, const char *);
SOAP_FMAC3 ns3__FECAEAGet ** SOAP_FMAC4 soap_in_PointerTons3__FECAEAGet(struct soap*, const char*, ns3__FECAEAGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEAGet(struct soap*, ns3__FECAEAGet *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEAGet ** SOAP_FMAC4 soap_get_PointerTons3__FECAEAGet(struct soap*, ns3__FECAEAGet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEADetResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEADetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEADetResponse(struct soap*, ns3__FECAEADetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEADetResponse(struct soap*, const char *, int, ns3__FECAEADetResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEADetResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEADetResponse(struct soap*, const char*, ns3__FECAEADetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEADetResponse(struct soap*, ns3__FECAEADetResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEADetResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEADetResponse(struct soap*, ns3__FECAEADetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfFECAEADetResponse(struct soap*, ns3__ArrayOfFECAEADetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfFECAEADetResponse(struct soap*, const char *, int, ns3__ArrayOfFECAEADetResponse *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfFECAEADetResponse ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfFECAEADetResponse(struct soap*, const char*, ns3__ArrayOfFECAEADetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfFECAEADetResponse(struct soap*, ns3__ArrayOfFECAEADetResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEADetResponse ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfFECAEADetResponse(struct soap*, ns3__ArrayOfFECAEADetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEACabResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEACabResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEACabResponse(struct soap*, ns3__FECAEACabResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEACabResponse(struct soap*, const char *, int, ns3__FECAEACabResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEACabResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEACabResponse(struct soap*, const char*, ns3__FECAEACabResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEACabResponse(struct soap*, ns3__FECAEACabResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEACabResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEACabResponse(struct soap*, ns3__FECAEACabResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEADetRequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEADetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEADetRequest(struct soap*, ns3__FECAEADetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEADetRequest(struct soap*, const char *, int, ns3__FECAEADetRequest *const*, const char *);
SOAP_FMAC3 ns3__FECAEADetRequest ** SOAP_FMAC4 soap_in_PointerTons3__FECAEADetRequest(struct soap*, const char*, ns3__FECAEADetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEADetRequest(struct soap*, ns3__FECAEADetRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEADetRequest ** SOAP_FMAC4 soap_get_PointerTons3__FECAEADetRequest(struct soap*, ns3__FECAEADetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetRequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEADetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfFECAEADetRequest(struct soap*, ns3__ArrayOfFECAEADetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfFECAEADetRequest(struct soap*, const char *, int, ns3__ArrayOfFECAEADetRequest *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfFECAEADetRequest ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfFECAEADetRequest(struct soap*, const char*, ns3__ArrayOfFECAEADetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfFECAEADetRequest(struct soap*, ns3__ArrayOfFECAEADetRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEADetRequest ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfFECAEADetRequest(struct soap*, ns3__ArrayOfFECAEADetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEACabRequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEACabRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEACabRequest(struct soap*, ns3__FECAEACabRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEACabRequest(struct soap*, const char *, int, ns3__FECAEACabRequest *const*, const char *);
SOAP_FMAC3 ns3__FECAEACabRequest ** SOAP_FMAC4 soap_in_PointerTons3__FECAEACabRequest(struct soap*, const char*, ns3__FECAEACabRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEACabRequest(struct soap*, ns3__FECAEACabRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEACabRequest ** SOAP_FMAC4 soap_get_PointerTons3__FECAEACabRequest(struct soap*, ns3__FECAEACabRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECompConsResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECompConsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECompConsResponse(struct soap*, ns3__FECompConsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECompConsResponse(struct soap*, const char *, int, ns3__FECompConsResponse *const*, const char *);
SOAP_FMAC3 ns3__FECompConsResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECompConsResponse(struct soap*, const char*, ns3__FECompConsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECompConsResponse(struct soap*, ns3__FECompConsResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECompConsResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECompConsResponse(struct soap*, ns3__FECompConsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Err_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Err_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Err(struct soap*, ns3__Err *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Err(struct soap*, const char *, int, ns3__Err *const*, const char *);
SOAP_FMAC3 ns3__Err ** SOAP_FMAC4 soap_in_PointerTons3__Err(struct soap*, const char*, ns3__Err **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Err(struct soap*, ns3__Err *const*, const char*, const char*);
SOAP_FMAC3 ns3__Err ** SOAP_FMAC4 soap_get_PointerTons3__Err(struct soap*, ns3__Err **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Evt_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Evt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Evt(struct soap*, ns3__Evt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Evt(struct soap*, const char *, int, ns3__Evt *const*, const char *);
SOAP_FMAC3 ns3__Evt ** SOAP_FMAC4 soap_in_PointerTons3__Evt(struct soap*, const char*, ns3__Evt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Evt(struct soap*, ns3__Evt *const*, const char*, const char*);
SOAP_FMAC3 ns3__Evt ** SOAP_FMAC4 soap_get_PointerTons3__Evt(struct soap*, ns3__Evt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Obs_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Obs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Obs(struct soap*, ns3__Obs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Obs(struct soap*, const char *, int, ns3__Obs *const*, const char *);
SOAP_FMAC3 ns3__Obs ** SOAP_FMAC4 soap_in_PointerTons3__Obs(struct soap*, const char*, ns3__Obs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Obs(struct soap*, ns3__Obs *const*, const char*, const char*);
SOAP_FMAC3 ns3__Obs ** SOAP_FMAC4 soap_get_PointerTons3__Obs(struct soap*, ns3__Obs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfObs_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfObs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfObs(struct soap*, ns3__ArrayOfObs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfObs(struct soap*, const char *, int, ns3__ArrayOfObs *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfObs ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfObs(struct soap*, const char*, ns3__ArrayOfObs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfObs(struct soap*, ns3__ArrayOfObs *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfObs ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfObs(struct soap*, ns3__ArrayOfObs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEDetResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEDetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEDetResponse(struct soap*, ns3__FECAEDetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEDetResponse(struct soap*, const char *, int, ns3__FECAEDetResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAEDetResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAEDetResponse(struct soap*, const char*, ns3__FECAEDetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEDetResponse(struct soap*, ns3__FECAEDetResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEDetResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAEDetResponse(struct soap*, ns3__FECAEDetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfErr_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfErr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfErr(struct soap*, ns3__ArrayOfErr *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfErr(struct soap*, const char *, int, ns3__ArrayOfErr *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfErr ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfErr(struct soap*, const char*, ns3__ArrayOfErr **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfErr(struct soap*, ns3__ArrayOfErr *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfErr ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfErr(struct soap*, ns3__ArrayOfErr **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfEvt_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfEvt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfEvt(struct soap*, ns3__ArrayOfEvt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfEvt(struct soap*, const char *, int, ns3__ArrayOfEvt *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfEvt ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfEvt(struct soap*, const char*, ns3__ArrayOfEvt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfEvt(struct soap*, ns3__ArrayOfEvt *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfEvt ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfEvt(struct soap*, ns3__ArrayOfEvt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfFECAEDetResponse(struct soap*, ns3__ArrayOfFECAEDetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfFECAEDetResponse(struct soap*, const char *, int, ns3__ArrayOfFECAEDetResponse *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfFECAEDetResponse ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfFECAEDetResponse(struct soap*, const char*, ns3__ArrayOfFECAEDetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfFECAEDetResponse(struct soap*, ns3__ArrayOfFECAEDetResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEDetResponse ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfFECAEDetResponse(struct soap*, ns3__ArrayOfFECAEDetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAECabResponse_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAECabResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAECabResponse(struct soap*, ns3__FECAECabResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAECabResponse(struct soap*, const char *, int, ns3__FECAECabResponse *const*, const char *);
SOAP_FMAC3 ns3__FECAECabResponse ** SOAP_FMAC4 soap_in_PointerTons3__FECAECabResponse(struct soap*, const char*, ns3__FECAECabResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAECabResponse(struct soap*, ns3__FECAECabResponse *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAECabResponse ** SOAP_FMAC4 soap_get_PointerTons3__FECAECabResponse(struct soap*, ns3__FECAECabResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Comprador_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Comprador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Comprador(struct soap*, ns3__Comprador *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Comprador(struct soap*, const char *, int, ns3__Comprador *const*, const char *);
SOAP_FMAC3 ns3__Comprador ** SOAP_FMAC4 soap_in_PointerTons3__Comprador(struct soap*, const char*, ns3__Comprador **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Comprador(struct soap*, ns3__Comprador *const*, const char*, const char*);
SOAP_FMAC3 ns3__Comprador ** SOAP_FMAC4 soap_get_PointerTons3__Comprador(struct soap*, ns3__Comprador **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Opcional_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Opcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Opcional(struct soap*, ns3__Opcional *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Opcional(struct soap*, const char *, int, ns3__Opcional *const*, const char *);
SOAP_FMAC3 ns3__Opcional ** SOAP_FMAC4 soap_in_PointerTons3__Opcional(struct soap*, const char*, ns3__Opcional **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Opcional(struct soap*, ns3__Opcional *const*, const char*, const char*);
SOAP_FMAC3 ns3__Opcional ** SOAP_FMAC4 soap_get_PointerTons3__Opcional(struct soap*, ns3__Opcional **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__AlicIva_DEFINED
#define SOAP_TYPE_afip_PointerTons3__AlicIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__AlicIva(struct soap*, ns3__AlicIva *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__AlicIva(struct soap*, const char *, int, ns3__AlicIva *const*, const char *);
SOAP_FMAC3 ns3__AlicIva ** SOAP_FMAC4 soap_in_PointerTons3__AlicIva(struct soap*, const char*, ns3__AlicIva **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__AlicIva(struct soap*, ns3__AlicIva *const*, const char*, const char*);
SOAP_FMAC3 ns3__AlicIva ** SOAP_FMAC4 soap_get_PointerTons3__AlicIva(struct soap*, ns3__AlicIva **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__Tributo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__Tributo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__Tributo(struct soap*, ns3__Tributo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__Tributo(struct soap*, const char *, int, ns3__Tributo *const*, const char *);
SOAP_FMAC3 ns3__Tributo ** SOAP_FMAC4 soap_in_PointerTons3__Tributo(struct soap*, const char*, ns3__Tributo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__Tributo(struct soap*, ns3__Tributo *const*, const char*, const char*);
SOAP_FMAC3 ns3__Tributo ** SOAP_FMAC4 soap_get_PointerTons3__Tributo(struct soap*, ns3__Tributo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__CbteAsoc_DEFINED
#define SOAP_TYPE_afip_PointerTons3__CbteAsoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__CbteAsoc(struct soap*, ns3__CbteAsoc *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__CbteAsoc(struct soap*, const char *, int, ns3__CbteAsoc *const*, const char *);
SOAP_FMAC3 ns3__CbteAsoc ** SOAP_FMAC4 soap_in_PointerTons3__CbteAsoc(struct soap*, const char*, ns3__CbteAsoc **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__CbteAsoc(struct soap*, ns3__CbteAsoc *const*, const char*, const char*);
SOAP_FMAC3 ns3__CbteAsoc ** SOAP_FMAC4 soap_get_PointerTons3__CbteAsoc(struct soap*, ns3__CbteAsoc **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfComprador_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfComprador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfComprador(struct soap*, ns3__ArrayOfComprador *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfComprador(struct soap*, const char *, int, ns3__ArrayOfComprador *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfComprador ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfComprador(struct soap*, const char*, ns3__ArrayOfComprador **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfComprador(struct soap*, ns3__ArrayOfComprador *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfComprador ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfComprador(struct soap*, ns3__ArrayOfComprador **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfOpcional_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfOpcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfOpcional(struct soap*, ns3__ArrayOfOpcional *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfOpcional(struct soap*, const char *, int, ns3__ArrayOfOpcional *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfOpcional ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfOpcional(struct soap*, const char*, ns3__ArrayOfOpcional **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfOpcional(struct soap*, ns3__ArrayOfOpcional *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfOpcional ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfOpcional(struct soap*, ns3__ArrayOfOpcional **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfAlicIva_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfAlicIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfAlicIva(struct soap*, ns3__ArrayOfAlicIva *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfAlicIva(struct soap*, const char *, int, ns3__ArrayOfAlicIva *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfAlicIva ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfAlicIva(struct soap*, const char*, ns3__ArrayOfAlicIva **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfAlicIva(struct soap*, ns3__ArrayOfAlicIva *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfAlicIva ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfAlicIva(struct soap*, ns3__ArrayOfAlicIva **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfTributo_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfTributo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfTributo(struct soap*, ns3__ArrayOfTributo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfTributo(struct soap*, const char *, int, ns3__ArrayOfTributo *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfTributo ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfTributo(struct soap*, const char*, ns3__ArrayOfTributo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfTributo(struct soap*, ns3__ArrayOfTributo *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfTributo ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfTributo(struct soap*, ns3__ArrayOfTributo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfCbteAsoc_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfCbteAsoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfCbteAsoc(struct soap*, ns3__ArrayOfCbteAsoc *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfCbteAsoc(struct soap*, const char *, int, ns3__ArrayOfCbteAsoc *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfCbteAsoc ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfCbteAsoc(struct soap*, const char*, ns3__ArrayOfCbteAsoc **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfCbteAsoc(struct soap*, ns3__ArrayOfCbteAsoc *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfCbteAsoc ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfCbteAsoc(struct soap*, ns3__ArrayOfCbteAsoc **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAEDetRequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAEDetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAEDetRequest(struct soap*, ns3__FECAEDetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAEDetRequest(struct soap*, const char *, int, ns3__FECAEDetRequest *const*, const char *);
SOAP_FMAC3 ns3__FECAEDetRequest ** SOAP_FMAC4 soap_in_PointerTons3__FECAEDetRequest(struct soap*, const char*, ns3__FECAEDetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAEDetRequest(struct soap*, ns3__FECAEDetRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAEDetRequest ** SOAP_FMAC4 soap_get_PointerTons3__FECAEDetRequest(struct soap*, ns3__FECAEDetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetRequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__ArrayOfFECAEDetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__ArrayOfFECAEDetRequest(struct soap*, ns3__ArrayOfFECAEDetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__ArrayOfFECAEDetRequest(struct soap*, const char *, int, ns3__ArrayOfFECAEDetRequest *const*, const char *);
SOAP_FMAC3 ns3__ArrayOfFECAEDetRequest ** SOAP_FMAC4 soap_in_PointerTons3__ArrayOfFECAEDetRequest(struct soap*, const char*, ns3__ArrayOfFECAEDetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__ArrayOfFECAEDetRequest(struct soap*, ns3__ArrayOfFECAEDetRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__ArrayOfFECAEDetRequest ** SOAP_FMAC4 soap_get_PointerTons3__ArrayOfFECAEDetRequest(struct soap*, ns3__ArrayOfFECAEDetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTons3__FECAECabRequest_DEFINED
#define SOAP_TYPE_afip_PointerTons3__FECAECabRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons3__FECAECabRequest(struct soap*, ns3__FECAECabRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons3__FECAECabRequest(struct soap*, const char *, int, ns3__FECAECabRequest *const*, const char *);
SOAP_FMAC3 ns3__FECAECabRequest ** SOAP_FMAC4 soap_in_PointerTons3__FECAECabRequest(struct soap*, const char*, ns3__FECAECabRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons3__FECAECabRequest(struct soap*, ns3__FECAECabRequest *const*, const char*, const char*);
SOAP_FMAC3 ns3__FECAECabRequest ** SOAP_FMAC4 soap_get_PointerTons3__FECAECabRequest(struct soap*, ns3__FECAECabRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip_PointerTostd__string_DEFINED
#define SOAP_TYPE_afip_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_afip__QName_DEFINED
#define SOAP_TYPE_afip__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (afip::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip__XML_DEFINED
#define SOAP_TYPE_afip__XML_DEFINED
#endif

#ifndef SOAP_TYPE_afip_string_DEFINED
#define SOAP_TYPE_afip_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || afip::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || afip::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || afip::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || afip::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (afip::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PaisTipo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PaisTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PaisTipo(struct soap*, std::vector<ns3__PaisTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PaisTipo(struct soap*, const std::vector<ns3__PaisTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PaisTipo(struct soap*, const char*, int, const std::vector<ns3__PaisTipo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PaisTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PaisTipo(struct soap*, const char*, std::vector<ns3__PaisTipo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PaisTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PaisTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PaisTipo *>  * soap_new_std__vectorTemplateOfPointerTons3__PaisTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PaisTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__DocTipo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__DocTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__DocTipo(struct soap*, std::vector<ns3__DocTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__DocTipo(struct soap*, const std::vector<ns3__DocTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__DocTipo(struct soap*, const char*, int, const std::vector<ns3__DocTipo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__DocTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__DocTipo(struct soap*, const char*, std::vector<ns3__DocTipo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__DocTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__DocTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__DocTipo *>  * soap_new_std__vectorTemplateOfPointerTons3__DocTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__DocTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteTipo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__CbteTipo(struct soap*, std::vector<ns3__CbteTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__CbteTipo(struct soap*, const std::vector<ns3__CbteTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__CbteTipo(struct soap*, const char*, int, const std::vector<ns3__CbteTipo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__CbteTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__CbteTipo(struct soap*, const char*, std::vector<ns3__CbteTipo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__CbteTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__CbteTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__CbteTipo *>  * soap_new_std__vectorTemplateOfPointerTons3__CbteTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__CbteTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PtoVenta_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__PtoVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__PtoVenta(struct soap*, std::vector<ns3__PtoVenta *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__PtoVenta(struct soap*, const std::vector<ns3__PtoVenta *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__PtoVenta(struct soap*, const char*, int, const std::vector<ns3__PtoVenta *> *, const char*);
SOAP_FMAC3 std::vector<ns3__PtoVenta *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__PtoVenta(struct soap*, const char*, std::vector<ns3__PtoVenta *> *, const char*);
SOAP_FMAC1 std::vector<ns3__PtoVenta *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__PtoVenta(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__PtoVenta *>  * soap_new_std__vectorTemplateOfPointerTons3__PtoVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__PtoVenta(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__ConceptoTipo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__ConceptoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__ConceptoTipo(struct soap*, std::vector<ns3__ConceptoTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__ConceptoTipo(struct soap*, const std::vector<ns3__ConceptoTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__ConceptoTipo(struct soap*, const char*, int, const std::vector<ns3__ConceptoTipo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__ConceptoTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__ConceptoTipo(struct soap*, const char*, std::vector<ns3__ConceptoTipo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__ConceptoTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__ConceptoTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__ConceptoTipo *>  * soap_new_std__vectorTemplateOfPointerTons3__ConceptoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__ConceptoTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__OpcionalTipo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__OpcionalTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__OpcionalTipo(struct soap*, std::vector<ns3__OpcionalTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__OpcionalTipo(struct soap*, const std::vector<ns3__OpcionalTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__OpcionalTipo(struct soap*, const char*, int, const std::vector<ns3__OpcionalTipo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__OpcionalTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__OpcionalTipo(struct soap*, const char*, std::vector<ns3__OpcionalTipo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__OpcionalTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__OpcionalTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__OpcionalTipo *>  * soap_new_std__vectorTemplateOfPointerTons3__OpcionalTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__OpcionalTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__IvaTipo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__IvaTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__IvaTipo(struct soap*, std::vector<ns3__IvaTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__IvaTipo(struct soap*, const std::vector<ns3__IvaTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__IvaTipo(struct soap*, const char*, int, const std::vector<ns3__IvaTipo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__IvaTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__IvaTipo(struct soap*, const char*, std::vector<ns3__IvaTipo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__IvaTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__IvaTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__IvaTipo *>  * soap_new_std__vectorTemplateOfPointerTons3__IvaTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__IvaTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Moneda_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Moneda_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__Moneda(struct soap*, std::vector<ns3__Moneda *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__Moneda(struct soap*, const std::vector<ns3__Moneda *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__Moneda(struct soap*, const char*, int, const std::vector<ns3__Moneda *> *, const char*);
SOAP_FMAC3 std::vector<ns3__Moneda *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__Moneda(struct soap*, const char*, std::vector<ns3__Moneda *> *, const char*);
SOAP_FMAC1 std::vector<ns3__Moneda *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__Moneda(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__Moneda *>  * soap_new_std__vectorTemplateOfPointerTons3__Moneda(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__Moneda(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__TributoTipo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__TributoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__TributoTipo(struct soap*, std::vector<ns3__TributoTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__TributoTipo(struct soap*, const std::vector<ns3__TributoTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__TributoTipo(struct soap*, const char*, int, const std::vector<ns3__TributoTipo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__TributoTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__TributoTipo(struct soap*, const char*, std::vector<ns3__TributoTipo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__TributoTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__TributoTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__TributoTipo *>  * soap_new_std__vectorTemplateOfPointerTons3__TributoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__TributoTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEASinMov_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEASinMov_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FECAEASinMov(struct soap*, std::vector<ns3__FECAEASinMov *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FECAEASinMov(struct soap*, const std::vector<ns3__FECAEASinMov *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FECAEASinMov(struct soap*, const char*, int, const std::vector<ns3__FECAEASinMov *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FECAEASinMov *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FECAEASinMov(struct soap*, const char*, std::vector<ns3__FECAEASinMov *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FECAEASinMov *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEASinMov(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FECAEASinMov *>  * soap_new_std__vectorTemplateOfPointerTons3__FECAEASinMov(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEASinMov(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetResponse_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FECAEADetResponse(struct soap*, std::vector<ns3__FECAEADetResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FECAEADetResponse(struct soap*, const std::vector<ns3__FECAEADetResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FECAEADetResponse(struct soap*, const char*, int, const std::vector<ns3__FECAEADetResponse *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FECAEADetResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FECAEADetResponse(struct soap*, const char*, std::vector<ns3__FECAEADetResponse *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FECAEADetResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FECAEADetResponse *>  * soap_new_std__vectorTemplateOfPointerTons3__FECAEADetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEADetResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetRequest_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEADetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FECAEADetRequest(struct soap*, std::vector<ns3__FECAEADetRequest *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FECAEADetRequest(struct soap*, const std::vector<ns3__FECAEADetRequest *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FECAEADetRequest(struct soap*, const char*, int, const std::vector<ns3__FECAEADetRequest *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FECAEADetRequest *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FECAEADetRequest(struct soap*, const char*, std::vector<ns3__FECAEADetRequest *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FECAEADetRequest *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FECAEADetRequest *>  * soap_new_std__vectorTemplateOfPointerTons3__FECAEADetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEADetRequest(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Err_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Err_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__Err(struct soap*, std::vector<ns3__Err *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__Err(struct soap*, const std::vector<ns3__Err *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__Err(struct soap*, const char*, int, const std::vector<ns3__Err *> *, const char*);
SOAP_FMAC3 std::vector<ns3__Err *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__Err(struct soap*, const char*, std::vector<ns3__Err *> *, const char*);
SOAP_FMAC1 std::vector<ns3__Err *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__Err(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__Err *>  * soap_new_std__vectorTemplateOfPointerTons3__Err(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__Err(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Evt_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Evt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__Evt(struct soap*, std::vector<ns3__Evt *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__Evt(struct soap*, const std::vector<ns3__Evt *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__Evt(struct soap*, const char*, int, const std::vector<ns3__Evt *> *, const char*);
SOAP_FMAC3 std::vector<ns3__Evt *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__Evt(struct soap*, const char*, std::vector<ns3__Evt *> *, const char*);
SOAP_FMAC1 std::vector<ns3__Evt *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__Evt(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__Evt *>  * soap_new_std__vectorTemplateOfPointerTons3__Evt(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__Evt(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Obs_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Obs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__Obs(struct soap*, std::vector<ns3__Obs *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__Obs(struct soap*, const std::vector<ns3__Obs *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__Obs(struct soap*, const char*, int, const std::vector<ns3__Obs *> *, const char*);
SOAP_FMAC3 std::vector<ns3__Obs *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__Obs(struct soap*, const char*, std::vector<ns3__Obs *> *, const char*);
SOAP_FMAC1 std::vector<ns3__Obs *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__Obs(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__Obs *>  * soap_new_std__vectorTemplateOfPointerTons3__Obs(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__Obs(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetResponse_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FECAEDetResponse(struct soap*, std::vector<ns3__FECAEDetResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FECAEDetResponse(struct soap*, const std::vector<ns3__FECAEDetResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FECAEDetResponse(struct soap*, const char*, int, const std::vector<ns3__FECAEDetResponse *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FECAEDetResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FECAEDetResponse(struct soap*, const char*, std::vector<ns3__FECAEDetResponse *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FECAEDetResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FECAEDetResponse *>  * soap_new_std__vectorTemplateOfPointerTons3__FECAEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEDetResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Comprador_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Comprador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__Comprador(struct soap*, std::vector<ns3__Comprador *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__Comprador(struct soap*, const std::vector<ns3__Comprador *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__Comprador(struct soap*, const char*, int, const std::vector<ns3__Comprador *> *, const char*);
SOAP_FMAC3 std::vector<ns3__Comprador *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__Comprador(struct soap*, const char*, std::vector<ns3__Comprador *> *, const char*);
SOAP_FMAC1 std::vector<ns3__Comprador *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__Comprador(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__Comprador *>  * soap_new_std__vectorTemplateOfPointerTons3__Comprador(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__Comprador(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Opcional_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Opcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__Opcional(struct soap*, std::vector<ns3__Opcional *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__Opcional(struct soap*, const std::vector<ns3__Opcional *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__Opcional(struct soap*, const char*, int, const std::vector<ns3__Opcional *> *, const char*);
SOAP_FMAC3 std::vector<ns3__Opcional *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__Opcional(struct soap*, const char*, std::vector<ns3__Opcional *> *, const char*);
SOAP_FMAC1 std::vector<ns3__Opcional *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__Opcional(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__Opcional *>  * soap_new_std__vectorTemplateOfPointerTons3__Opcional(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__Opcional(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__AlicIva_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__AlicIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__AlicIva(struct soap*, std::vector<ns3__AlicIva *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__AlicIva(struct soap*, const std::vector<ns3__AlicIva *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__AlicIva(struct soap*, const char*, int, const std::vector<ns3__AlicIva *> *, const char*);
SOAP_FMAC3 std::vector<ns3__AlicIva *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__AlicIva(struct soap*, const char*, std::vector<ns3__AlicIva *> *, const char*);
SOAP_FMAC1 std::vector<ns3__AlicIva *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__AlicIva(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__AlicIva *>  * soap_new_std__vectorTemplateOfPointerTons3__AlicIva(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__AlicIva(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Tributo_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__Tributo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__Tributo(struct soap*, std::vector<ns3__Tributo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__Tributo(struct soap*, const std::vector<ns3__Tributo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__Tributo(struct soap*, const char*, int, const std::vector<ns3__Tributo *> *, const char*);
SOAP_FMAC3 std::vector<ns3__Tributo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__Tributo(struct soap*, const char*, std::vector<ns3__Tributo *> *, const char*);
SOAP_FMAC1 std::vector<ns3__Tributo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__Tributo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__Tributo *>  * soap_new_std__vectorTemplateOfPointerTons3__Tributo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__Tributo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteAsoc_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__CbteAsoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__CbteAsoc(struct soap*, std::vector<ns3__CbteAsoc *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__CbteAsoc(struct soap*, const std::vector<ns3__CbteAsoc *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__CbteAsoc(struct soap*, const char*, int, const std::vector<ns3__CbteAsoc *> *, const char*);
SOAP_FMAC3 std::vector<ns3__CbteAsoc *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__CbteAsoc(struct soap*, const char*, std::vector<ns3__CbteAsoc *> *, const char*);
SOAP_FMAC1 std::vector<ns3__CbteAsoc *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__CbteAsoc(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__CbteAsoc *>  * soap_new_std__vectorTemplateOfPointerTons3__CbteAsoc(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__CbteAsoc(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetRequest_DEFINED
#define SOAP_TYPE_afip_std__vectorTemplateOfPointerTons3__FECAEDetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons3__FECAEDetRequest(struct soap*, std::vector<ns3__FECAEDetRequest *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons3__FECAEDetRequest(struct soap*, const std::vector<ns3__FECAEDetRequest *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons3__FECAEDetRequest(struct soap*, const char*, int, const std::vector<ns3__FECAEDetRequest *> *, const char*);
SOAP_FMAC3 std::vector<ns3__FECAEDetRequest *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons3__FECAEDetRequest(struct soap*, const char*, std::vector<ns3__FECAEDetRequest *> *, const char*);
SOAP_FMAC1 std::vector<ns3__FECAEDetRequest *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns3__FECAEDetRequest *>  * soap_new_std__vectorTemplateOfPointerTons3__FECAEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerTons3__FECAEDetRequest(soap, n, NULL, NULL, NULL);
}
#endif

} // namespace afip


#endif

/* End of afipH.h */
