/* soapH.h
   Generated by gSOAP 2.8.89 for soap/afip_soap.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, const char*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_short_DEFINED
#define SOAP_TYPE_short_DEFINED

inline void soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

inline int soap_write_short(struct soap *soap, short const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_short(struct soap *soap, const char *URL, short const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_short(soap, p, "short", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

inline int soap_read_short(struct soap *soap, short *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_short(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_short(struct soap *soap, const char *URL, short *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_short(struct soap *soap, short *p)
{
	if (::soap_read_short(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_LONG64_DEFINED
#define SOAP_TYPE_LONG64_DEFINED

inline void soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

inline int soap_write_LONG64(struct soap *soap, LONG64 const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_LONG64(struct soap *soap, const char *URL, LONG64 const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_LONG64(soap, p, "long", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

inline int soap_read_LONG64(struct soap *soap, LONG64 *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_LONG64(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_LONG64(struct soap *soap, const char *URL, LONG64 *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_LONG64(struct soap *soap, LONG64 *p)
{
	if (::soap_read_LONG64(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_double_DEFINED
#define SOAP_TYPE_double_DEFINED

inline void soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

inline int soap_write_double(struct soap *soap, double const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_double(struct soap *soap, const char *URL, double const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_double(soap, p, "double", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

inline int soap_read_double(struct soap *soap, double *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_double(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_double(struct soap *soap, const char *URL, double *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_double(struct soap *soap, double *p)
{
	if (::soap_read_double(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposPaisesResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposPaisesResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposPaisesResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposPaisesResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposPaisesResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposPaisesResponse(struct soap*, const char*, _afip3__FEParamGetTiposPaisesResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposPaisesResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposPaisesResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposPaisesResponse * soap_new__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposPaisesResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposPaisesResponse * soap_new_req__afip3__FEParamGetTiposPaisesResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposPaisesResponse *_p = ::soap_new__afip3__FEParamGetTiposPaisesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposPaisesResponse * soap_new_set__afip3__FEParamGetTiposPaisesResponse(
	struct soap *soap,
	afip3__FEPaisResponse *FEParamGetTiposPaisesResult)
{
	_afip3__FEParamGetTiposPaisesResponse *_p = ::soap_new__afip3__FEParamGetTiposPaisesResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposPaisesResponse::FEParamGetTiposPaisesResult = FEParamGetTiposPaisesResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, _afip3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaisesResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaisesResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaisesResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposPaisesResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposPaisesResponse(struct soap*, _afip3__FEParamGetTiposPaisesResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, _afip3__FEParamGetTiposPaisesResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposPaisesResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaisesResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposPaisesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposPaisesResponse(struct soap *soap, _afip3__FEParamGetTiposPaisesResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposPaisesResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposPaises_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposPaises_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposPaises(struct soap*, const char*, int, const _afip3__FEParamGetTiposPaises *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposPaises * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposPaises(struct soap*, const char*, _afip3__FEParamGetTiposPaises *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposPaises * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposPaises(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposPaises * soap_new__afip3__FEParamGetTiposPaises(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposPaises(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposPaises * soap_new_req__afip3__FEParamGetTiposPaises(
	struct soap *soap)
{
	_afip3__FEParamGetTiposPaises *_p = ::soap_new__afip3__FEParamGetTiposPaises(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposPaises * soap_new_set__afip3__FEParamGetTiposPaises(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposPaises *_p = ::soap_new__afip3__FEParamGetTiposPaises(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposPaises::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposPaises(struct soap *soap, _afip3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposPaises", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposPaises ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposPaises * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposPaises(struct soap*, _afip3__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposPaises(struct soap *soap, _afip3__FEParamGetTiposPaises *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposPaises(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposPaises(struct soap *soap, const char *URL, _afip3__FEParamGetTiposPaises *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposPaises(struct soap *soap, _afip3__FEParamGetTiposPaises *p)
{
	if (::soap_read__afip3__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposDocResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposDocResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposDocResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposDocResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposDocResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposDocResponse(struct soap*, const char*, _afip3__FEParamGetTiposDocResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposDocResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposDocResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposDocResponse * soap_new__afip3__FEParamGetTiposDocResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposDocResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposDocResponse * soap_new_req__afip3__FEParamGetTiposDocResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposDocResponse *_p = ::soap_new__afip3__FEParamGetTiposDocResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposDocResponse * soap_new_set__afip3__FEParamGetTiposDocResponse(
	struct soap *soap,
	afip3__DocTipoResponse *FEParamGetTiposDocResult)
{
	_afip3__FEParamGetTiposDocResponse *_p = ::soap_new__afip3__FEParamGetTiposDocResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposDocResponse::FEParamGetTiposDocResult = FEParamGetTiposDocResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposDocResponse(struct soap *soap, _afip3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDocResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDocResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDocResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposDocResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposDocResponse(struct soap*, _afip3__FEParamGetTiposDocResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposDocResponse(struct soap *soap, _afip3__FEParamGetTiposDocResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposDocResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposDocResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDocResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposDocResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposDocResponse(struct soap *soap, _afip3__FEParamGetTiposDocResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposDocResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposDoc_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposDoc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposDoc(struct soap*, const char*, int, const _afip3__FEParamGetTiposDoc *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposDoc * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposDoc(struct soap*, const char*, _afip3__FEParamGetTiposDoc *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposDoc * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposDoc(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposDoc * soap_new__afip3__FEParamGetTiposDoc(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposDoc(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposDoc * soap_new_req__afip3__FEParamGetTiposDoc(
	struct soap *soap)
{
	_afip3__FEParamGetTiposDoc *_p = ::soap_new__afip3__FEParamGetTiposDoc(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposDoc * soap_new_set__afip3__FEParamGetTiposDoc(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposDoc *_p = ::soap_new__afip3__FEParamGetTiposDoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposDoc::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposDoc(struct soap *soap, _afip3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposDoc", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposDoc ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposDoc * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposDoc(struct soap*, _afip3__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposDoc(struct soap *soap, _afip3__FEParamGetTiposDoc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposDoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposDoc(struct soap *soap, const char *URL, _afip3__FEParamGetTiposDoc *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposDoc(struct soap *soap, _afip3__FEParamGetTiposDoc *p)
{
	if (::soap_read__afip3__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposCbteResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposCbteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposCbteResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposCbteResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposCbteResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposCbteResponse(struct soap*, const char*, _afip3__FEParamGetTiposCbteResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposCbteResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposCbteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposCbteResponse * soap_new__afip3__FEParamGetTiposCbteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposCbteResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposCbteResponse * soap_new_req__afip3__FEParamGetTiposCbteResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposCbteResponse *_p = ::soap_new__afip3__FEParamGetTiposCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposCbteResponse * soap_new_set__afip3__FEParamGetTiposCbteResponse(
	struct soap *soap,
	afip3__CbteTipoResponse *FEParamGetTiposCbteResult)
{
	_afip3__FEParamGetTiposCbteResponse *_p = ::soap_new__afip3__FEParamGetTiposCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposCbteResponse::FEParamGetTiposCbteResult = FEParamGetTiposCbteResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposCbteResponse(struct soap *soap, _afip3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbteResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbteResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposCbteResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposCbteResponse(struct soap*, _afip3__FEParamGetTiposCbteResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposCbteResponse(struct soap *soap, _afip3__FEParamGetTiposCbteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposCbteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposCbteResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposCbteResponse(struct soap *soap, _afip3__FEParamGetTiposCbteResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposCbte_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposCbte_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposCbte(struct soap*, const char*, int, const _afip3__FEParamGetTiposCbte *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposCbte * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposCbte(struct soap*, const char*, _afip3__FEParamGetTiposCbte *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposCbte * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposCbte(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposCbte * soap_new__afip3__FEParamGetTiposCbte(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposCbte(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposCbte * soap_new_req__afip3__FEParamGetTiposCbte(
	struct soap *soap)
{
	_afip3__FEParamGetTiposCbte *_p = ::soap_new__afip3__FEParamGetTiposCbte(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposCbte * soap_new_set__afip3__FEParamGetTiposCbte(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposCbte *_p = ::soap_new__afip3__FEParamGetTiposCbte(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposCbte::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposCbte(struct soap *soap, _afip3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposCbte", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposCbte ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposCbte * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposCbte(struct soap*, _afip3__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposCbte(struct soap *soap, _afip3__FEParamGetTiposCbte *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposCbte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposCbte(struct soap *soap, const char *URL, _afip3__FEParamGetTiposCbte *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposCbte(struct soap *soap, _afip3__FEParamGetTiposCbte *p)
{
	if (::soap_read__afip3__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetPtosVentaResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetPtosVentaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetPtosVentaResponse(struct soap*, const char*, int, const _afip3__FEParamGetPtosVentaResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetPtosVentaResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetPtosVentaResponse(struct soap*, const char*, _afip3__FEParamGetPtosVentaResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetPtosVentaResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetPtosVentaResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetPtosVentaResponse * soap_new__afip3__FEParamGetPtosVentaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetPtosVentaResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetPtosVentaResponse * soap_new_req__afip3__FEParamGetPtosVentaResponse(
	struct soap *soap)
{
	_afip3__FEParamGetPtosVentaResponse *_p = ::soap_new__afip3__FEParamGetPtosVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetPtosVentaResponse * soap_new_set__afip3__FEParamGetPtosVentaResponse(
	struct soap *soap,
	afip3__FEPtoVentaResponse *FEParamGetPtosVentaResult)
{
	_afip3__FEParamGetPtosVentaResponse *_p = ::soap_new__afip3__FEParamGetPtosVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetPtosVentaResponse::FEParamGetPtosVentaResult = FEParamGetPtosVentaResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetPtosVentaResponse(struct soap *soap, _afip3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVentaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetPtosVentaResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetPtosVentaResponse(struct soap*, _afip3__FEParamGetPtosVentaResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetPtosVentaResponse(struct soap *soap, _afip3__FEParamGetPtosVentaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetPtosVentaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetPtosVentaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVentaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetPtosVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetPtosVentaResponse(struct soap *soap, _afip3__FEParamGetPtosVentaResponse *p)
{
	if (::soap_read__afip3__FEParamGetPtosVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetPtosVenta_DEFINED
#define SOAP_TYPE__afip3__FEParamGetPtosVenta_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetPtosVenta(struct soap*, const char*, int, const _afip3__FEParamGetPtosVenta *, const char*);
SOAP_FMAC3 _afip3__FEParamGetPtosVenta * SOAP_FMAC4 soap_in__afip3__FEParamGetPtosVenta(struct soap*, const char*, _afip3__FEParamGetPtosVenta *, const char*);
SOAP_FMAC1 _afip3__FEParamGetPtosVenta * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetPtosVenta(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetPtosVenta * soap_new__afip3__FEParamGetPtosVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetPtosVenta(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetPtosVenta * soap_new_req__afip3__FEParamGetPtosVenta(
	struct soap *soap)
{
	_afip3__FEParamGetPtosVenta *_p = ::soap_new__afip3__FEParamGetPtosVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetPtosVenta * soap_new_set__afip3__FEParamGetPtosVenta(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetPtosVenta *_p = ::soap_new__afip3__FEParamGetPtosVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetPtosVenta::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetPtosVenta(struct soap *soap, _afip3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetPtosVenta", p->soap_type() == SOAP_TYPE__afip3__FEParamGetPtosVenta ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetPtosVenta * SOAP_FMAC4 soap_get__afip3__FEParamGetPtosVenta(struct soap*, _afip3__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_read__afip3__FEParamGetPtosVenta(struct soap *soap, _afip3__FEParamGetPtosVenta *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetPtosVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetPtosVenta(struct soap *soap, const char *URL, _afip3__FEParamGetPtosVenta *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetPtosVenta(struct soap *soap, _afip3__FEParamGetPtosVenta *p)
{
	if (::soap_read__afip3__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposConceptoResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposConceptoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposConceptoResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposConceptoResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposConceptoResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposConceptoResponse(struct soap*, const char*, _afip3__FEParamGetTiposConceptoResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposConceptoResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposConceptoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposConceptoResponse * soap_new__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposConceptoResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposConceptoResponse * soap_new_req__afip3__FEParamGetTiposConceptoResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposConceptoResponse *_p = ::soap_new__afip3__FEParamGetTiposConceptoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposConceptoResponse * soap_new_set__afip3__FEParamGetTiposConceptoResponse(
	struct soap *soap,
	afip3__ConceptoTipoResponse *FEParamGetTiposConceptoResult)
{
	_afip3__FEParamGetTiposConceptoResponse *_p = ::soap_new__afip3__FEParamGetTiposConceptoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposConceptoResponse::FEParamGetTiposConceptoResult = FEParamGetTiposConceptoResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, _afip3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConceptoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConceptoResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConceptoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposConceptoResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposConceptoResponse(struct soap*, _afip3__FEParamGetTiposConceptoResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, _afip3__FEParamGetTiposConceptoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposConceptoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConceptoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposConceptoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposConceptoResponse(struct soap *soap, _afip3__FEParamGetTiposConceptoResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposConceptoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposConcepto_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposConcepto_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposConcepto(struct soap*, const char*, int, const _afip3__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposConcepto * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposConcepto(struct soap*, const char*, _afip3__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposConcepto * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposConcepto(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposConcepto * soap_new__afip3__FEParamGetTiposConcepto(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposConcepto(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposConcepto * soap_new_req__afip3__FEParamGetTiposConcepto(
	struct soap *soap)
{
	_afip3__FEParamGetTiposConcepto *_p = ::soap_new__afip3__FEParamGetTiposConcepto(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposConcepto * soap_new_set__afip3__FEParamGetTiposConcepto(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposConcepto *_p = ::soap_new__afip3__FEParamGetTiposConcepto(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposConcepto::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposConcepto(struct soap *soap, _afip3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposConcepto", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposConcepto ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposConcepto * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposConcepto(struct soap*, _afip3__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposConcepto(struct soap *soap, _afip3__FEParamGetTiposConcepto *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposConcepto(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposConcepto(struct soap *soap, const char *URL, _afip3__FEParamGetTiposConcepto *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposConcepto(struct soap *soap, _afip3__FEParamGetTiposConcepto *p)
{
	if (::soap_read__afip3__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposOpcionalResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposOpcionalResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposOpcionalResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposOpcionalResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposOpcionalResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposOpcionalResponse(struct soap*, const char*, _afip3__FEParamGetTiposOpcionalResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposOpcionalResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposOpcionalResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposOpcionalResponse * soap_new__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposOpcionalResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposOpcionalResponse * soap_new_req__afip3__FEParamGetTiposOpcionalResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposOpcionalResponse *_p = ::soap_new__afip3__FEParamGetTiposOpcionalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposOpcionalResponse * soap_new_set__afip3__FEParamGetTiposOpcionalResponse(
	struct soap *soap,
	afip3__OpcionalTipoResponse *FEParamGetTiposOpcionalResult)
{
	_afip3__FEParamGetTiposOpcionalResponse *_p = ::soap_new__afip3__FEParamGetTiposOpcionalResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposOpcionalResponse::FEParamGetTiposOpcionalResult = FEParamGetTiposOpcionalResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, _afip3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcionalResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcionalResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcionalResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposOpcionalResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposOpcionalResponse(struct soap*, _afip3__FEParamGetTiposOpcionalResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, _afip3__FEParamGetTiposOpcionalResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposOpcionalResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcionalResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposOpcionalResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposOpcionalResponse(struct soap *soap, _afip3__FEParamGetTiposOpcionalResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposOpcionalResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposOpcional_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposOpcional_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposOpcional(struct soap*, const char*, int, const _afip3__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposOpcional * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposOpcional(struct soap*, const char*, _afip3__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposOpcional * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposOpcional(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposOpcional * soap_new__afip3__FEParamGetTiposOpcional(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposOpcional(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposOpcional * soap_new_req__afip3__FEParamGetTiposOpcional(
	struct soap *soap)
{
	_afip3__FEParamGetTiposOpcional *_p = ::soap_new__afip3__FEParamGetTiposOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposOpcional * soap_new_set__afip3__FEParamGetTiposOpcional(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposOpcional *_p = ::soap_new__afip3__FEParamGetTiposOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposOpcional::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposOpcional(struct soap *soap, _afip3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposOpcional", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposOpcional ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposOpcional * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposOpcional(struct soap*, _afip3__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposOpcional(struct soap *soap, _afip3__FEParamGetTiposOpcional *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposOpcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposOpcional(struct soap *soap, const char *URL, _afip3__FEParamGetTiposOpcional *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposOpcional(struct soap *soap, _afip3__FEParamGetTiposOpcional *p)
{
	if (::soap_read__afip3__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposIvaResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposIvaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposIvaResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposIvaResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposIvaResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposIvaResponse(struct soap*, const char*, _afip3__FEParamGetTiposIvaResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposIvaResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposIvaResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposIvaResponse * soap_new__afip3__FEParamGetTiposIvaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposIvaResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposIvaResponse * soap_new_req__afip3__FEParamGetTiposIvaResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposIvaResponse *_p = ::soap_new__afip3__FEParamGetTiposIvaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposIvaResponse * soap_new_set__afip3__FEParamGetTiposIvaResponse(
	struct soap *soap,
	afip3__IvaTipoResponse *FEParamGetTiposIvaResult)
{
	_afip3__FEParamGetTiposIvaResponse *_p = ::soap_new__afip3__FEParamGetTiposIvaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposIvaResponse::FEParamGetTiposIvaResult = FEParamGetTiposIvaResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposIvaResponse(struct soap *soap, _afip3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIvaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIvaResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIvaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposIvaResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposIvaResponse(struct soap*, _afip3__FEParamGetTiposIvaResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposIvaResponse(struct soap *soap, _afip3__FEParamGetTiposIvaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposIvaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposIvaResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIvaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposIvaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposIvaResponse(struct soap *soap, _afip3__FEParamGetTiposIvaResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposIvaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposIva_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposIva_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposIva(struct soap*, const char*, int, const _afip3__FEParamGetTiposIva *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposIva * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposIva(struct soap*, const char*, _afip3__FEParamGetTiposIva *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposIva * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposIva(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposIva * soap_new__afip3__FEParamGetTiposIva(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposIva(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposIva * soap_new_req__afip3__FEParamGetTiposIva(
	struct soap *soap)
{
	_afip3__FEParamGetTiposIva *_p = ::soap_new__afip3__FEParamGetTiposIva(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposIva * soap_new_set__afip3__FEParamGetTiposIva(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposIva *_p = ::soap_new__afip3__FEParamGetTiposIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposIva::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposIva(struct soap *soap, _afip3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposIva(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposIva(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposIva(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposIva", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposIva ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposIva * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposIva(struct soap*, _afip3__FEParamGetTiposIva *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposIva(struct soap *soap, _afip3__FEParamGetTiposIva *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposIva(struct soap *soap, const char *URL, _afip3__FEParamGetTiposIva *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposIva(struct soap *soap, _afip3__FEParamGetTiposIva *p)
{
	if (::soap_read__afip3__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposMonedasResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposMonedasResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposMonedasResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposMonedasResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposMonedasResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposMonedasResponse(struct soap*, const char*, _afip3__FEParamGetTiposMonedasResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposMonedasResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposMonedasResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposMonedasResponse * soap_new__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposMonedasResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposMonedasResponse * soap_new_req__afip3__FEParamGetTiposMonedasResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposMonedasResponse *_p = ::soap_new__afip3__FEParamGetTiposMonedasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposMonedasResponse * soap_new_set__afip3__FEParamGetTiposMonedasResponse(
	struct soap *soap,
	afip3__MonedaResponse *FEParamGetTiposMonedasResult)
{
	_afip3__FEParamGetTiposMonedasResponse *_p = ::soap_new__afip3__FEParamGetTiposMonedasResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposMonedasResponse::FEParamGetTiposMonedasResult = FEParamGetTiposMonedasResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, _afip3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedasResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedasResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedasResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposMonedasResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposMonedasResponse(struct soap*, _afip3__FEParamGetTiposMonedasResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, _afip3__FEParamGetTiposMonedasResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposMonedasResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedasResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposMonedasResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposMonedasResponse(struct soap *soap, _afip3__FEParamGetTiposMonedasResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposMonedasResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposMonedas_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposMonedas_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposMonedas(struct soap*, const char*, int, const _afip3__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposMonedas * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposMonedas(struct soap*, const char*, _afip3__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposMonedas * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposMonedas(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposMonedas * soap_new__afip3__FEParamGetTiposMonedas(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposMonedas(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposMonedas * soap_new_req__afip3__FEParamGetTiposMonedas(
	struct soap *soap)
{
	_afip3__FEParamGetTiposMonedas *_p = ::soap_new__afip3__FEParamGetTiposMonedas(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposMonedas * soap_new_set__afip3__FEParamGetTiposMonedas(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposMonedas *_p = ::soap_new__afip3__FEParamGetTiposMonedas(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposMonedas::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposMonedas(struct soap *soap, _afip3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposMonedas", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposMonedas ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposMonedas * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposMonedas(struct soap*, _afip3__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposMonedas(struct soap *soap, _afip3__FEParamGetTiposMonedas *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposMonedas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposMonedas(struct soap *soap, const char *URL, _afip3__FEParamGetTiposMonedas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposMonedas(struct soap *soap, _afip3__FEParamGetTiposMonedas *p)
{
	if (::soap_read__afip3__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposTributosResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposTributosResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposTributosResponse(struct soap*, const char*, int, const _afip3__FEParamGetTiposTributosResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposTributosResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposTributosResponse(struct soap*, const char*, _afip3__FEParamGetTiposTributosResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposTributosResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposTributosResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposTributosResponse * soap_new__afip3__FEParamGetTiposTributosResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposTributosResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposTributosResponse * soap_new_req__afip3__FEParamGetTiposTributosResponse(
	struct soap *soap)
{
	_afip3__FEParamGetTiposTributosResponse *_p = ::soap_new__afip3__FEParamGetTiposTributosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposTributosResponse * soap_new_set__afip3__FEParamGetTiposTributosResponse(
	struct soap *soap,
	afip3__FETributoResponse *FEParamGetTiposTributosResult)
{
	_afip3__FEParamGetTiposTributosResponse *_p = ::soap_new__afip3__FEParamGetTiposTributosResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposTributosResponse::FEParamGetTiposTributosResult = FEParamGetTiposTributosResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposTributosResponse(struct soap *soap, _afip3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributosResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributosResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributosResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposTributosResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposTributosResponse(struct soap*, _afip3__FEParamGetTiposTributosResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposTributosResponse(struct soap *soap, _afip3__FEParamGetTiposTributosResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposTributosResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposTributosResponse(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributosResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposTributosResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposTributosResponse(struct soap *soap, _afip3__FEParamGetTiposTributosResponse *p)
{
	if (::soap_read__afip3__FEParamGetTiposTributosResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetTiposTributos_DEFINED
#define SOAP_TYPE__afip3__FEParamGetTiposTributos_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetTiposTributos(struct soap*, const char*, int, const _afip3__FEParamGetTiposTributos *, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposTributos * SOAP_FMAC4 soap_in__afip3__FEParamGetTiposTributos(struct soap*, const char*, _afip3__FEParamGetTiposTributos *, const char*);
SOAP_FMAC1 _afip3__FEParamGetTiposTributos * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetTiposTributos(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetTiposTributos * soap_new__afip3__FEParamGetTiposTributos(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetTiposTributos(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetTiposTributos * soap_new_req__afip3__FEParamGetTiposTributos(
	struct soap *soap)
{
	_afip3__FEParamGetTiposTributos *_p = ::soap_new__afip3__FEParamGetTiposTributos(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetTiposTributos * soap_new_set__afip3__FEParamGetTiposTributos(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FEParamGetTiposTributos *_p = ::soap_new__afip3__FEParamGetTiposTributos(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetTiposTributos::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetTiposTributos(struct soap *soap, _afip3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetTiposTributos", p->soap_type() == SOAP_TYPE__afip3__FEParamGetTiposTributos ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetTiposTributos * SOAP_FMAC4 soap_get__afip3__FEParamGetTiposTributos(struct soap*, _afip3__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_read__afip3__FEParamGetTiposTributos(struct soap *soap, _afip3__FEParamGetTiposTributos *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetTiposTributos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetTiposTributos(struct soap *soap, const char *URL, _afip3__FEParamGetTiposTributos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetTiposTributos(struct soap *soap, _afip3__FEParamGetTiposTributos *p)
{
	if (::soap_read__afip3__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetCotizacionResponse_DEFINED
#define SOAP_TYPE__afip3__FEParamGetCotizacionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetCotizacionResponse(struct soap*, const char*, int, const _afip3__FEParamGetCotizacionResponse *, const char*);
SOAP_FMAC3 _afip3__FEParamGetCotizacionResponse * SOAP_FMAC4 soap_in__afip3__FEParamGetCotizacionResponse(struct soap*, const char*, _afip3__FEParamGetCotizacionResponse *, const char*);
SOAP_FMAC1 _afip3__FEParamGetCotizacionResponse * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetCotizacionResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetCotizacionResponse * soap_new__afip3__FEParamGetCotizacionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetCotizacionResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetCotizacionResponse * soap_new_req__afip3__FEParamGetCotizacionResponse(
	struct soap *soap)
{
	_afip3__FEParamGetCotizacionResponse *_p = ::soap_new__afip3__FEParamGetCotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetCotizacionResponse * soap_new_set__afip3__FEParamGetCotizacionResponse(
	struct soap *soap,
	afip3__FECotizacionResponse *FEParamGetCotizacionResult)
{
	_afip3__FEParamGetCotizacionResponse *_p = ::soap_new__afip3__FEParamGetCotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetCotizacionResponse::FEParamGetCotizacionResult = FEParamGetCotizacionResult;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetCotizacionResponse(struct soap *soap, _afip3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacionResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacionResponse", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetCotizacionResponse * SOAP_FMAC4 soap_get__afip3__FEParamGetCotizacionResponse(struct soap*, _afip3__FEParamGetCotizacionResponse *, const char*, const char*);

inline int soap_read__afip3__FEParamGetCotizacionResponse(struct soap *soap, _afip3__FEParamGetCotizacionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetCotizacionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetCotizacionResponse(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetCotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetCotizacionResponse(struct soap *soap, _afip3__FEParamGetCotizacionResponse *p)
{
	if (::soap_read__afip3__FEParamGetCotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEParamGetCotizacion_DEFINED
#define SOAP_TYPE__afip3__FEParamGetCotizacion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEParamGetCotizacion(struct soap*, const char*, int, const _afip3__FEParamGetCotizacion *, const char*);
SOAP_FMAC3 _afip3__FEParamGetCotizacion * SOAP_FMAC4 soap_in__afip3__FEParamGetCotizacion(struct soap*, const char*, _afip3__FEParamGetCotizacion *, const char*);
SOAP_FMAC1 _afip3__FEParamGetCotizacion * SOAP_FMAC2 soap_instantiate__afip3__FEParamGetCotizacion(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEParamGetCotizacion * soap_new__afip3__FEParamGetCotizacion(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEParamGetCotizacion(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEParamGetCotizacion * soap_new_req__afip3__FEParamGetCotizacion(
	struct soap *soap)
{
	_afip3__FEParamGetCotizacion *_p = ::soap_new__afip3__FEParamGetCotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEParamGetCotizacion * soap_new_set__afip3__FEParamGetCotizacion(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	std::string *MonId)
{
	_afip3__FEParamGetCotizacion *_p = ::soap_new__afip3__FEParamGetCotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEParamGetCotizacion::Auth = Auth;
		_p->_afip3__FEParamGetCotizacion::MonId = MonId;
	}
	return _p;
}

inline int soap_write__afip3__FEParamGetCotizacion(struct soap *soap, _afip3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEParamGetCotizacion(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEParamGetCotizacion(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEParamGetCotizacion(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEParamGetCotizacion", p->soap_type() == SOAP_TYPE__afip3__FEParamGetCotizacion ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEParamGetCotizacion * SOAP_FMAC4 soap_get__afip3__FEParamGetCotizacion(struct soap*, _afip3__FEParamGetCotizacion *, const char*, const char*);

inline int soap_read__afip3__FEParamGetCotizacion(struct soap *soap, _afip3__FEParamGetCotizacion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEParamGetCotizacion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEParamGetCotizacion(struct soap *soap, const char *URL, _afip3__FEParamGetCotizacion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEParamGetCotizacion(struct soap *soap, _afip3__FEParamGetCotizacion *p)
{
	if (::soap_read__afip3__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEAConsultarResponse_DEFINED
#define SOAP_TYPE__afip3__FECAEAConsultarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEAConsultarResponse(struct soap*, const char*, int, const _afip3__FECAEAConsultarResponse *, const char*);
SOAP_FMAC3 _afip3__FECAEAConsultarResponse * SOAP_FMAC4 soap_in__afip3__FECAEAConsultarResponse(struct soap*, const char*, _afip3__FECAEAConsultarResponse *, const char*);
SOAP_FMAC1 _afip3__FECAEAConsultarResponse * SOAP_FMAC2 soap_instantiate__afip3__FECAEAConsultarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEAConsultarResponse * soap_new__afip3__FECAEAConsultarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEAConsultarResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEAConsultarResponse * soap_new_req__afip3__FECAEAConsultarResponse(
	struct soap *soap)
{
	_afip3__FECAEAConsultarResponse *_p = ::soap_new__afip3__FECAEAConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAEAConsultarResponse * soap_new_set__afip3__FECAEAConsultarResponse(
	struct soap *soap,
	afip3__FECAEAGetResponse *FECAEAConsultarResult)
{
	_afip3__FECAEAConsultarResponse *_p = ::soap_new__afip3__FECAEAConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEAConsultarResponse::FECAEAConsultarResult = FECAEAConsultarResult;
	}
	return _p;
}

inline int soap_write__afip3__FECAEAConsultarResponse(struct soap *soap, _afip3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEAConsultarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEAConsultarResponse * SOAP_FMAC4 soap_get__afip3__FECAEAConsultarResponse(struct soap*, _afip3__FECAEAConsultarResponse *, const char*, const char*);

inline int soap_read__afip3__FECAEAConsultarResponse(struct soap *soap, _afip3__FECAEAConsultarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEAConsultarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEAConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEAConsultarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEAConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEAConsultarResponse(struct soap *soap, _afip3__FECAEAConsultarResponse *p)
{
	if (::soap_read__afip3__FECAEAConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEAConsultar_DEFINED
#define SOAP_TYPE__afip3__FECAEAConsultar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEAConsultar(struct soap*, const char*, int, const _afip3__FECAEAConsultar *, const char*);
SOAP_FMAC3 _afip3__FECAEAConsultar * SOAP_FMAC4 soap_in__afip3__FECAEAConsultar(struct soap*, const char*, _afip3__FECAEAConsultar *, const char*);
SOAP_FMAC1 _afip3__FECAEAConsultar * SOAP_FMAC2 soap_instantiate__afip3__FECAEAConsultar(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEAConsultar * soap_new__afip3__FECAEAConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEAConsultar(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEAConsultar * soap_new_req__afip3__FECAEAConsultar(
	struct soap *soap,
	int Periodo,
	short Orden)
{
	_afip3__FECAEAConsultar *_p = ::soap_new__afip3__FECAEAConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEAConsultar::Periodo = Periodo;
		_p->_afip3__FECAEAConsultar::Orden = Orden;
	}
	return _p;
}

inline _afip3__FECAEAConsultar * soap_new_set__afip3__FECAEAConsultar(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	int Periodo,
	short Orden)
{
	_afip3__FECAEAConsultar *_p = ::soap_new__afip3__FECAEAConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEAConsultar::Auth = Auth;
		_p->_afip3__FECAEAConsultar::Periodo = Periodo;
		_p->_afip3__FECAEAConsultar::Orden = Orden;
	}
	return _p;
}

inline int soap_write__afip3__FECAEAConsultar(struct soap *soap, _afip3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEAConsultar(struct soap *soap, const char *URL, _afip3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEAConsultar(struct soap *soap, const char *URL, _afip3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEAConsultar(struct soap *soap, const char *URL, _afip3__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEAConsultar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEAConsultar * SOAP_FMAC4 soap_get__afip3__FECAEAConsultar(struct soap*, _afip3__FECAEAConsultar *, const char*, const char*);

inline int soap_read__afip3__FECAEAConsultar(struct soap *soap, _afip3__FECAEAConsultar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEAConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEAConsultar(struct soap *soap, const char *URL, _afip3__FECAEAConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEAConsultar(struct soap *soap, _afip3__FECAEAConsultar *p)
{
	if (::soap_read__afip3__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEASinMovimientoInformarResponse_DEFINED
#define SOAP_TYPE__afip3__FECAEASinMovimientoInformarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEASinMovimientoInformarResponse(struct soap*, const char*, int, const _afip3__FECAEASinMovimientoInformarResponse *, const char*);
SOAP_FMAC3 _afip3__FECAEASinMovimientoInformarResponse * SOAP_FMAC4 soap_in__afip3__FECAEASinMovimientoInformarResponse(struct soap*, const char*, _afip3__FECAEASinMovimientoInformarResponse *, const char*);
SOAP_FMAC1 _afip3__FECAEASinMovimientoInformarResponse * SOAP_FMAC2 soap_instantiate__afip3__FECAEASinMovimientoInformarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEASinMovimientoInformarResponse * soap_new__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEASinMovimientoInformarResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEASinMovimientoInformarResponse * soap_new_req__afip3__FECAEASinMovimientoInformarResponse(
	struct soap *soap)
{
	_afip3__FECAEASinMovimientoInformarResponse *_p = ::soap_new__afip3__FECAEASinMovimientoInformarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAEASinMovimientoInformarResponse * soap_new_set__afip3__FECAEASinMovimientoInformarResponse(
	struct soap *soap,
	afip3__FECAEASinMovResponse *FECAEASinMovimientoInformarResult)
{
	_afip3__FECAEASinMovimientoInformarResponse *_p = ::soap_new__afip3__FECAEASinMovimientoInformarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASinMovimientoInformarResponse::FECAEASinMovimientoInformarResult = FECAEASinMovimientoInformarResult;
	}
	return _p;
}

inline int soap_write__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, _afip3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEASinMovimientoInformarResponse * SOAP_FMAC4 soap_get__afip3__FECAEASinMovimientoInformarResponse(struct soap*, _afip3__FECAEASinMovimientoInformarResponse *, const char*, const char*);

inline int soap_read__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, _afip3__FECAEASinMovimientoInformarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEASinMovimientoInformarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEASinMovimientoInformarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEASinMovimientoInformarResponse(struct soap *soap, _afip3__FECAEASinMovimientoInformarResponse *p)
{
	if (::soap_read__afip3__FECAEASinMovimientoInformarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEASinMovimientoInformar_DEFINED
#define SOAP_TYPE__afip3__FECAEASinMovimientoInformar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEASinMovimientoInformar(struct soap*, const char*, int, const _afip3__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC3 _afip3__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_in__afip3__FECAEASinMovimientoInformar(struct soap*, const char*, _afip3__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC1 _afip3__FECAEASinMovimientoInformar * SOAP_FMAC2 soap_instantiate__afip3__FECAEASinMovimientoInformar(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEASinMovimientoInformar * soap_new__afip3__FECAEASinMovimientoInformar(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEASinMovimientoInformar(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEASinMovimientoInformar * soap_new_req__afip3__FECAEASinMovimientoInformar(
	struct soap *soap,
	int PtoVta)
{
	_afip3__FECAEASinMovimientoInformar *_p = ::soap_new__afip3__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASinMovimientoInformar::PtoVta = PtoVta;
	}
	return _p;
}

inline _afip3__FECAEASinMovimientoInformar * soap_new_set__afip3__FECAEASinMovimientoInformar(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	int PtoVta,
	std::string *CAEA)
{
	_afip3__FECAEASinMovimientoInformar *_p = ::soap_new__afip3__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASinMovimientoInformar::Auth = Auth;
		_p->_afip3__FECAEASinMovimientoInformar::PtoVta = PtoVta;
		_p->_afip3__FECAEASinMovimientoInformar::CAEA = CAEA;
	}
	return _p;
}

inline int soap_write__afip3__FECAEASinMovimientoInformar(struct soap *soap, _afip3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoInformar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoInformar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_get__afip3__FECAEASinMovimientoInformar(struct soap*, _afip3__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_read__afip3__FECAEASinMovimientoInformar(struct soap *soap, _afip3__FECAEASinMovimientoInformar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEASinMovimientoInformar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoInformar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEASinMovimientoInformar(struct soap *soap, _afip3__FECAEASinMovimientoInformar *p)
{
	if (::soap_read__afip3__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEASinMovimientoConsultarResponse_DEFINED
#define SOAP_TYPE__afip3__FECAEASinMovimientoConsultarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEASinMovimientoConsultarResponse(struct soap*, const char*, int, const _afip3__FECAEASinMovimientoConsultarResponse *, const char*);
SOAP_FMAC3 _afip3__FECAEASinMovimientoConsultarResponse * SOAP_FMAC4 soap_in__afip3__FECAEASinMovimientoConsultarResponse(struct soap*, const char*, _afip3__FECAEASinMovimientoConsultarResponse *, const char*);
SOAP_FMAC1 _afip3__FECAEASinMovimientoConsultarResponse * SOAP_FMAC2 soap_instantiate__afip3__FECAEASinMovimientoConsultarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEASinMovimientoConsultarResponse * soap_new__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEASinMovimientoConsultarResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEASinMovimientoConsultarResponse * soap_new_req__afip3__FECAEASinMovimientoConsultarResponse(
	struct soap *soap)
{
	_afip3__FECAEASinMovimientoConsultarResponse *_p = ::soap_new__afip3__FECAEASinMovimientoConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAEASinMovimientoConsultarResponse * soap_new_set__afip3__FECAEASinMovimientoConsultarResponse(
	struct soap *soap,
	afip3__FECAEASinMovConsResponse *FECAEASinMovimientoConsultarResult)
{
	_afip3__FECAEASinMovimientoConsultarResponse *_p = ::soap_new__afip3__FECAEASinMovimientoConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASinMovimientoConsultarResponse::FECAEASinMovimientoConsultarResult = FECAEASinMovimientoConsultarResult;
	}
	return _p;
}

inline int soap_write__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, _afip3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEASinMovimientoConsultarResponse * SOAP_FMAC4 soap_get__afip3__FECAEASinMovimientoConsultarResponse(struct soap*, _afip3__FECAEASinMovimientoConsultarResponse *, const char*, const char*);

inline int soap_read__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, _afip3__FECAEASinMovimientoConsultarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEASinMovimientoConsultarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEASinMovimientoConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEASinMovimientoConsultarResponse(struct soap *soap, _afip3__FECAEASinMovimientoConsultarResponse *p)
{
	if (::soap_read__afip3__FECAEASinMovimientoConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEASinMovimientoConsultar_DEFINED
#define SOAP_TYPE__afip3__FECAEASinMovimientoConsultar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEASinMovimientoConsultar(struct soap*, const char*, int, const _afip3__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC3 _afip3__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_in__afip3__FECAEASinMovimientoConsultar(struct soap*, const char*, _afip3__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC1 _afip3__FECAEASinMovimientoConsultar * SOAP_FMAC2 soap_instantiate__afip3__FECAEASinMovimientoConsultar(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEASinMovimientoConsultar * soap_new__afip3__FECAEASinMovimientoConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEASinMovimientoConsultar(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEASinMovimientoConsultar * soap_new_req__afip3__FECAEASinMovimientoConsultar(
	struct soap *soap,
	int PtoVta)
{
	_afip3__FECAEASinMovimientoConsultar *_p = ::soap_new__afip3__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASinMovimientoConsultar::PtoVta = PtoVta;
	}
	return _p;
}

inline _afip3__FECAEASinMovimientoConsultar * soap_new_set__afip3__FECAEASinMovimientoConsultar(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	std::string *CAEA,
	int PtoVta)
{
	_afip3__FECAEASinMovimientoConsultar *_p = ::soap_new__afip3__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASinMovimientoConsultar::Auth = Auth;
		_p->_afip3__FECAEASinMovimientoConsultar::CAEA = CAEA;
		_p->_afip3__FECAEASinMovimientoConsultar::PtoVta = PtoVta;
	}
	return _p;
}

inline int soap_write__afip3__FECAEASinMovimientoConsultar(struct soap *soap, _afip3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovimientoConsultar", p->soap_type() == SOAP_TYPE__afip3__FECAEASinMovimientoConsultar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_get__afip3__FECAEASinMovimientoConsultar(struct soap*, _afip3__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_read__afip3__FECAEASinMovimientoConsultar(struct soap *soap, _afip3__FECAEASinMovimientoConsultar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEASinMovimientoConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, _afip3__FECAEASinMovimientoConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEASinMovimientoConsultar(struct soap *soap, _afip3__FECAEASinMovimientoConsultar *p)
{
	if (::soap_read__afip3__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEASolicitarResponse_DEFINED
#define SOAP_TYPE__afip3__FECAEASolicitarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEASolicitarResponse(struct soap*, const char*, int, const _afip3__FECAEASolicitarResponse *, const char*);
SOAP_FMAC3 _afip3__FECAEASolicitarResponse * SOAP_FMAC4 soap_in__afip3__FECAEASolicitarResponse(struct soap*, const char*, _afip3__FECAEASolicitarResponse *, const char*);
SOAP_FMAC1 _afip3__FECAEASolicitarResponse * SOAP_FMAC2 soap_instantiate__afip3__FECAEASolicitarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEASolicitarResponse * soap_new__afip3__FECAEASolicitarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEASolicitarResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEASolicitarResponse * soap_new_req__afip3__FECAEASolicitarResponse(
	struct soap *soap)
{
	_afip3__FECAEASolicitarResponse *_p = ::soap_new__afip3__FECAEASolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAEASolicitarResponse * soap_new_set__afip3__FECAEASolicitarResponse(
	struct soap *soap,
	afip3__FECAEAGetResponse *FECAEASolicitarResult)
{
	_afip3__FECAEASolicitarResponse *_p = ::soap_new__afip3__FECAEASolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASolicitarResponse::FECAEASolicitarResult = FECAEASolicitarResult;
	}
	return _p;
}

inline int soap_write__afip3__FECAEASolicitarResponse(struct soap *soap, _afip3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAEASolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEASolicitarResponse * SOAP_FMAC4 soap_get__afip3__FECAEASolicitarResponse(struct soap*, _afip3__FECAEASolicitarResponse *, const char*, const char*);

inline int soap_read__afip3__FECAEASolicitarResponse(struct soap *soap, _afip3__FECAEASolicitarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEASolicitarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEASolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAEASolicitarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEASolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEASolicitarResponse(struct soap *soap, _afip3__FECAEASolicitarResponse *p)
{
	if (::soap_read__afip3__FECAEASolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEASolicitar_DEFINED
#define SOAP_TYPE__afip3__FECAEASolicitar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEASolicitar(struct soap*, const char*, int, const _afip3__FECAEASolicitar *, const char*);
SOAP_FMAC3 _afip3__FECAEASolicitar * SOAP_FMAC4 soap_in__afip3__FECAEASolicitar(struct soap*, const char*, _afip3__FECAEASolicitar *, const char*);
SOAP_FMAC1 _afip3__FECAEASolicitar * SOAP_FMAC2 soap_instantiate__afip3__FECAEASolicitar(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEASolicitar * soap_new__afip3__FECAEASolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEASolicitar(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEASolicitar * soap_new_req__afip3__FECAEASolicitar(
	struct soap *soap,
	int Periodo,
	short Orden)
{
	_afip3__FECAEASolicitar *_p = ::soap_new__afip3__FECAEASolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASolicitar::Periodo = Periodo;
		_p->_afip3__FECAEASolicitar::Orden = Orden;
	}
	return _p;
}

inline _afip3__FECAEASolicitar * soap_new_set__afip3__FECAEASolicitar(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	int Periodo,
	short Orden)
{
	_afip3__FECAEASolicitar *_p = ::soap_new__afip3__FECAEASolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEASolicitar::Auth = Auth;
		_p->_afip3__FECAEASolicitar::Periodo = Periodo;
		_p->_afip3__FECAEASolicitar::Orden = Orden;
	}
	return _p;
}

inline int soap_write__afip3__FECAEASolicitar(struct soap *soap, _afip3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEASolicitar(struct soap *soap, const char *URL, _afip3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEASolicitar(struct soap *soap, const char *URL, _afip3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEASolicitar(struct soap *soap, const char *URL, _afip3__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAEASolicitar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEASolicitar * SOAP_FMAC4 soap_get__afip3__FECAEASolicitar(struct soap*, _afip3__FECAEASolicitar *, const char*, const char*);

inline int soap_read__afip3__FECAEASolicitar(struct soap *soap, _afip3__FECAEASolicitar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEASolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEASolicitar(struct soap *soap, const char *URL, _afip3__FECAEASolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEASolicitar(struct soap *soap, _afip3__FECAEASolicitar *p)
{
	if (::soap_read__afip3__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEARegInformativoResponse_DEFINED
#define SOAP_TYPE__afip3__FECAEARegInformativoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEARegInformativoResponse(struct soap*, const char*, int, const _afip3__FECAEARegInformativoResponse *, const char*);
SOAP_FMAC3 _afip3__FECAEARegInformativoResponse * SOAP_FMAC4 soap_in__afip3__FECAEARegInformativoResponse(struct soap*, const char*, _afip3__FECAEARegInformativoResponse *, const char*);
SOAP_FMAC1 _afip3__FECAEARegInformativoResponse * SOAP_FMAC2 soap_instantiate__afip3__FECAEARegInformativoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEARegInformativoResponse * soap_new__afip3__FECAEARegInformativoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEARegInformativoResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEARegInformativoResponse * soap_new_req__afip3__FECAEARegInformativoResponse(
	struct soap *soap)
{
	_afip3__FECAEARegInformativoResponse *_p = ::soap_new__afip3__FECAEARegInformativoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAEARegInformativoResponse * soap_new_set__afip3__FECAEARegInformativoResponse(
	struct soap *soap,
	afip3__FECAEAResponse *FECAEARegInformativoResult)
{
	_afip3__FECAEARegInformativoResponse *_p = ::soap_new__afip3__FECAEARegInformativoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEARegInformativoResponse::FECAEARegInformativoResult = FECAEARegInformativoResult;
	}
	return _p;
}

inline int soap_write__afip3__FECAEARegInformativoResponse(struct soap *soap, _afip3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _afip3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _afip3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _afip3__FECAEARegInformativoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARegInformativoResponse", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEARegInformativoResponse * SOAP_FMAC4 soap_get__afip3__FECAEARegInformativoResponse(struct soap*, _afip3__FECAEARegInformativoResponse *, const char*, const char*);

inline int soap_read__afip3__FECAEARegInformativoResponse(struct soap *soap, _afip3__FECAEARegInformativoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEARegInformativoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEARegInformativoResponse(struct soap *soap, const char *URL, _afip3__FECAEARegInformativoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEARegInformativoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEARegInformativoResponse(struct soap *soap, _afip3__FECAEARegInformativoResponse *p)
{
	if (::soap_read__afip3__FECAEARegInformativoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAEARegInformativo_DEFINED
#define SOAP_TYPE__afip3__FECAEARegInformativo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAEARegInformativo(struct soap*, const char*, int, const _afip3__FECAEARegInformativo *, const char*);
SOAP_FMAC3 _afip3__FECAEARegInformativo * SOAP_FMAC4 soap_in__afip3__FECAEARegInformativo(struct soap*, const char*, _afip3__FECAEARegInformativo *, const char*);
SOAP_FMAC1 _afip3__FECAEARegInformativo * SOAP_FMAC2 soap_instantiate__afip3__FECAEARegInformativo(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAEARegInformativo * soap_new__afip3__FECAEARegInformativo(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAEARegInformativo(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAEARegInformativo * soap_new_req__afip3__FECAEARegInformativo(
	struct soap *soap)
{
	_afip3__FECAEARegInformativo *_p = ::soap_new__afip3__FECAEARegInformativo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAEARegInformativo * soap_new_set__afip3__FECAEARegInformativo(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	afip3__FECAEARequest *FeCAEARegInfReq)
{
	_afip3__FECAEARegInformativo *_p = ::soap_new__afip3__FECAEARegInformativo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAEARegInformativo::Auth = Auth;
		_p->_afip3__FECAEARegInformativo::FeCAEARegInfReq = FeCAEARegInfReq;
	}
	return _p;
}

inline int soap_write__afip3__FECAEARegInformativo(struct soap *soap, _afip3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAEARegInformativo(struct soap *soap, const char *URL, _afip3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAEARegInformativo(struct soap *soap, const char *URL, _afip3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAEARegInformativo(struct soap *soap, const char *URL, _afip3__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEARegInformativo", p->soap_type() == SOAP_TYPE__afip3__FECAEARegInformativo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAEARegInformativo * SOAP_FMAC4 soap_get__afip3__FECAEARegInformativo(struct soap*, _afip3__FECAEARegInformativo *, const char*, const char*);

inline int soap_read__afip3__FECAEARegInformativo(struct soap *soap, _afip3__FECAEARegInformativo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAEARegInformativo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAEARegInformativo(struct soap *soap, const char *URL, _afip3__FECAEARegInformativo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAEARegInformativo(struct soap *soap, _afip3__FECAEARegInformativo *p)
{
	if (::soap_read__afip3__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECompConsultarResponse_DEFINED
#define SOAP_TYPE__afip3__FECompConsultarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECompConsultarResponse(struct soap*, const char*, int, const _afip3__FECompConsultarResponse *, const char*);
SOAP_FMAC3 _afip3__FECompConsultarResponse * SOAP_FMAC4 soap_in__afip3__FECompConsultarResponse(struct soap*, const char*, _afip3__FECompConsultarResponse *, const char*);
SOAP_FMAC1 _afip3__FECompConsultarResponse * SOAP_FMAC2 soap_instantiate__afip3__FECompConsultarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECompConsultarResponse * soap_new__afip3__FECompConsultarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECompConsultarResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECompConsultarResponse * soap_new_req__afip3__FECompConsultarResponse(
	struct soap *soap)
{
	_afip3__FECompConsultarResponse *_p = ::soap_new__afip3__FECompConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECompConsultarResponse * soap_new_set__afip3__FECompConsultarResponse(
	struct soap *soap,
	afip3__FECompConsultaResponse *FECompConsultarResult)
{
	_afip3__FECompConsultarResponse *_p = ::soap_new__afip3__FECompConsultarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECompConsultarResponse::FECompConsultarResult = FECompConsultarResult;
	}
	return _p;
}

inline int soap_write__afip3__FECompConsultarResponse(struct soap *soap, _afip3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECompConsultarResponse(struct soap *soap, const char *URL, _afip3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECompConsultarResponse(struct soap *soap, const char *URL, _afip3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECompConsultarResponse(struct soap *soap, const char *URL, _afip3__FECompConsultarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsultarResponse", p->soap_type() == SOAP_TYPE__afip3__FECompConsultarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECompConsultarResponse * SOAP_FMAC4 soap_get__afip3__FECompConsultarResponse(struct soap*, _afip3__FECompConsultarResponse *, const char*, const char*);

inline int soap_read__afip3__FECompConsultarResponse(struct soap *soap, _afip3__FECompConsultarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECompConsultarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECompConsultarResponse(struct soap *soap, const char *URL, _afip3__FECompConsultarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECompConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECompConsultarResponse(struct soap *soap, _afip3__FECompConsultarResponse *p)
{
	if (::soap_read__afip3__FECompConsultarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECompConsultar_DEFINED
#define SOAP_TYPE__afip3__FECompConsultar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECompConsultar(struct soap*, const char*, int, const _afip3__FECompConsultar *, const char*);
SOAP_FMAC3 _afip3__FECompConsultar * SOAP_FMAC4 soap_in__afip3__FECompConsultar(struct soap*, const char*, _afip3__FECompConsultar *, const char*);
SOAP_FMAC1 _afip3__FECompConsultar * SOAP_FMAC2 soap_instantiate__afip3__FECompConsultar(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECompConsultar * soap_new__afip3__FECompConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECompConsultar(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECompConsultar * soap_new_req__afip3__FECompConsultar(
	struct soap *soap)
{
	_afip3__FECompConsultar *_p = ::soap_new__afip3__FECompConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECompConsultar * soap_new_set__afip3__FECompConsultar(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	afip3__FECompConsultaReq *FeCompConsReq)
{
	_afip3__FECompConsultar *_p = ::soap_new__afip3__FECompConsultar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECompConsultar::Auth = Auth;
		_p->_afip3__FECompConsultar::FeCompConsReq = FeCompConsReq;
	}
	return _p;
}

inline int soap_write__afip3__FECompConsultar(struct soap *soap, _afip3__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultar", p->soap_type() == SOAP_TYPE__afip3__FECompConsultar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECompConsultar(struct soap *soap, const char *URL, _afip3__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultar", p->soap_type() == SOAP_TYPE__afip3__FECompConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECompConsultar(struct soap *soap, const char *URL, _afip3__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsultar", p->soap_type() == SOAP_TYPE__afip3__FECompConsultar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECompConsultar(struct soap *soap, const char *URL, _afip3__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultar", p->soap_type() == SOAP_TYPE__afip3__FECompConsultar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECompConsultar * SOAP_FMAC4 soap_get__afip3__FECompConsultar(struct soap*, _afip3__FECompConsultar *, const char*, const char*);

inline int soap_read__afip3__FECompConsultar(struct soap *soap, _afip3__FECompConsultar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECompConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECompConsultar(struct soap *soap, const char *URL, _afip3__FECompConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECompConsultar(struct soap *soap, _afip3__FECompConsultar *p)
{
	if (::soap_read__afip3__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECompUltimoAutorizadoResponse_DEFINED
#define SOAP_TYPE__afip3__FECompUltimoAutorizadoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECompUltimoAutorizadoResponse(struct soap*, const char*, int, const _afip3__FECompUltimoAutorizadoResponse *, const char*);
SOAP_FMAC3 _afip3__FECompUltimoAutorizadoResponse * SOAP_FMAC4 soap_in__afip3__FECompUltimoAutorizadoResponse(struct soap*, const char*, _afip3__FECompUltimoAutorizadoResponse *, const char*);
SOAP_FMAC1 _afip3__FECompUltimoAutorizadoResponse * SOAP_FMAC2 soap_instantiate__afip3__FECompUltimoAutorizadoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECompUltimoAutorizadoResponse * soap_new__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECompUltimoAutorizadoResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECompUltimoAutorizadoResponse * soap_new_req__afip3__FECompUltimoAutorizadoResponse(
	struct soap *soap)
{
	_afip3__FECompUltimoAutorizadoResponse *_p = ::soap_new__afip3__FECompUltimoAutorizadoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECompUltimoAutorizadoResponse * soap_new_set__afip3__FECompUltimoAutorizadoResponse(
	struct soap *soap,
	afip3__FERecuperaLastCbteResponse *FECompUltimoAutorizadoResult)
{
	_afip3__FECompUltimoAutorizadoResponse *_p = ::soap_new__afip3__FECompUltimoAutorizadoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECompUltimoAutorizadoResponse::FECompUltimoAutorizadoResult = FECompUltimoAutorizadoResult;
	}
	return _p;
}

inline int soap_write__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, _afip3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizadoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizadoResponse", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizadoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECompUltimoAutorizadoResponse * SOAP_FMAC4 soap_get__afip3__FECompUltimoAutorizadoResponse(struct soap*, _afip3__FECompUltimoAutorizadoResponse *, const char*, const char*);

inline int soap_read__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, _afip3__FECompUltimoAutorizadoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECompUltimoAutorizadoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizadoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECompUltimoAutorizadoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECompUltimoAutorizadoResponse(struct soap *soap, _afip3__FECompUltimoAutorizadoResponse *p)
{
	if (::soap_read__afip3__FECompUltimoAutorizadoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECompUltimoAutorizado_DEFINED
#define SOAP_TYPE__afip3__FECompUltimoAutorizado_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECompUltimoAutorizado(struct soap*, const char*, int, const _afip3__FECompUltimoAutorizado *, const char*);
SOAP_FMAC3 _afip3__FECompUltimoAutorizado * SOAP_FMAC4 soap_in__afip3__FECompUltimoAutorizado(struct soap*, const char*, _afip3__FECompUltimoAutorizado *, const char*);
SOAP_FMAC1 _afip3__FECompUltimoAutorizado * SOAP_FMAC2 soap_instantiate__afip3__FECompUltimoAutorizado(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECompUltimoAutorizado * soap_new__afip3__FECompUltimoAutorizado(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECompUltimoAutorizado(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECompUltimoAutorizado * soap_new_req__afip3__FECompUltimoAutorizado(
	struct soap *soap,
	int PtoVta,
	int CbteTipo)
{
	_afip3__FECompUltimoAutorizado *_p = ::soap_new__afip3__FECompUltimoAutorizado(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECompUltimoAutorizado::PtoVta = PtoVta;
		_p->_afip3__FECompUltimoAutorizado::CbteTipo = CbteTipo;
	}
	return _p;
}

inline _afip3__FECompUltimoAutorizado * soap_new_set__afip3__FECompUltimoAutorizado(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	int PtoVta,
	int CbteTipo)
{
	_afip3__FECompUltimoAutorizado *_p = ::soap_new__afip3__FECompUltimoAutorizado(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECompUltimoAutorizado::Auth = Auth;
		_p->_afip3__FECompUltimoAutorizado::PtoVta = PtoVta;
		_p->_afip3__FECompUltimoAutorizado::CbteTipo = CbteTipo;
	}
	return _p;
}

inline int soap_write__afip3__FECompUltimoAutorizado(struct soap *soap, _afip3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompUltimoAutorizado", p->soap_type() == SOAP_TYPE__afip3__FECompUltimoAutorizado ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECompUltimoAutorizado * SOAP_FMAC4 soap_get__afip3__FECompUltimoAutorizado(struct soap*, _afip3__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_read__afip3__FECompUltimoAutorizado(struct soap *soap, _afip3__FECompUltimoAutorizado *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECompUltimoAutorizado(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECompUltimoAutorizado(struct soap *soap, const char *URL, _afip3__FECompUltimoAutorizado *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECompUltimoAutorizado(struct soap *soap, _afip3__FECompUltimoAutorizado *p)
{
	if (::soap_read__afip3__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEDummyResponse_DEFINED
#define SOAP_TYPE__afip3__FEDummyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEDummyResponse(struct soap*, const char*, int, const _afip3__FEDummyResponse *, const char*);
SOAP_FMAC3 _afip3__FEDummyResponse * SOAP_FMAC4 soap_in__afip3__FEDummyResponse(struct soap*, const char*, _afip3__FEDummyResponse *, const char*);
SOAP_FMAC1 _afip3__FEDummyResponse * SOAP_FMAC2 soap_instantiate__afip3__FEDummyResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEDummyResponse * soap_new__afip3__FEDummyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEDummyResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEDummyResponse * soap_new_req__afip3__FEDummyResponse(
	struct soap *soap)
{
	_afip3__FEDummyResponse *_p = ::soap_new__afip3__FEDummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEDummyResponse * soap_new_set__afip3__FEDummyResponse(
	struct soap *soap,
	afip3__DummyResponse *FEDummyResult)
{
	_afip3__FEDummyResponse *_p = ::soap_new__afip3__FEDummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FEDummyResponse::FEDummyResult = FEDummyResult;
	}
	return _p;
}

inline int soap_write__afip3__FEDummyResponse(struct soap *soap, _afip3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDummyResponse", p->soap_type() == SOAP_TYPE__afip3__FEDummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEDummyResponse(struct soap *soap, const char *URL, _afip3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEDummyResponse", p->soap_type() == SOAP_TYPE__afip3__FEDummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEDummyResponse(struct soap *soap, const char *URL, _afip3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDummyResponse", p->soap_type() == SOAP_TYPE__afip3__FEDummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEDummyResponse(struct soap *soap, const char *URL, _afip3__FEDummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDummyResponse", p->soap_type() == SOAP_TYPE__afip3__FEDummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEDummyResponse * SOAP_FMAC4 soap_get__afip3__FEDummyResponse(struct soap*, _afip3__FEDummyResponse *, const char*, const char*);

inline int soap_read__afip3__FEDummyResponse(struct soap *soap, _afip3__FEDummyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEDummyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEDummyResponse(struct soap *soap, const char *URL, _afip3__FEDummyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEDummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEDummyResponse(struct soap *soap, _afip3__FEDummyResponse *p)
{
	if (::soap_read__afip3__FEDummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FEDummy_DEFINED
#define SOAP_TYPE__afip3__FEDummy_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FEDummy(struct soap*, const char*, int, const _afip3__FEDummy *, const char*);
SOAP_FMAC3 _afip3__FEDummy * SOAP_FMAC4 soap_in__afip3__FEDummy(struct soap*, const char*, _afip3__FEDummy *, const char*);
SOAP_FMAC1 _afip3__FEDummy * SOAP_FMAC2 soap_instantiate__afip3__FEDummy(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FEDummy * soap_new__afip3__FEDummy(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FEDummy(soap, n, NULL, NULL, NULL);
}

inline _afip3__FEDummy * soap_new_req__afip3__FEDummy(
	struct soap *soap)
{
	_afip3__FEDummy *_p = ::soap_new__afip3__FEDummy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FEDummy * soap_new_set__afip3__FEDummy(
	struct soap *soap)
{
	_afip3__FEDummy *_p = ::soap_new__afip3__FEDummy(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write__afip3__FEDummy(struct soap *soap, _afip3__FEDummy const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEDummy", p->soap_type() == SOAP_TYPE__afip3__FEDummy ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FEDummy(struct soap *soap, const char *URL, _afip3__FEDummy const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEDummy", p->soap_type() == SOAP_TYPE__afip3__FEDummy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FEDummy(struct soap *soap, const char *URL, _afip3__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDummy", p->soap_type() == SOAP_TYPE__afip3__FEDummy ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FEDummy(struct soap *soap, const char *URL, _afip3__FEDummy const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEDummy", p->soap_type() == SOAP_TYPE__afip3__FEDummy ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FEDummy * SOAP_FMAC4 soap_get__afip3__FEDummy(struct soap*, _afip3__FEDummy *, const char*, const char*);

inline int soap_read__afip3__FEDummy(struct soap *soap, _afip3__FEDummy *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FEDummy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FEDummy(struct soap *soap, const char *URL, _afip3__FEDummy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FEDummy(struct soap *soap, _afip3__FEDummy *p)
{
	if (::soap_read__afip3__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECompTotXRequestResponse_DEFINED
#define SOAP_TYPE__afip3__FECompTotXRequestResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECompTotXRequestResponse(struct soap*, const char*, int, const _afip3__FECompTotXRequestResponse *, const char*);
SOAP_FMAC3 _afip3__FECompTotXRequestResponse * SOAP_FMAC4 soap_in__afip3__FECompTotXRequestResponse(struct soap*, const char*, _afip3__FECompTotXRequestResponse *, const char*);
SOAP_FMAC1 _afip3__FECompTotXRequestResponse * SOAP_FMAC2 soap_instantiate__afip3__FECompTotXRequestResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECompTotXRequestResponse * soap_new__afip3__FECompTotXRequestResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECompTotXRequestResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECompTotXRequestResponse * soap_new_req__afip3__FECompTotXRequestResponse(
	struct soap *soap)
{
	_afip3__FECompTotXRequestResponse *_p = ::soap_new__afip3__FECompTotXRequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECompTotXRequestResponse * soap_new_set__afip3__FECompTotXRequestResponse(
	struct soap *soap,
	afip3__FERegXReqResponse *FECompTotXRequestResult)
{
	_afip3__FECompTotXRequestResponse *_p = ::soap_new__afip3__FECompTotXRequestResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECompTotXRequestResponse::FECompTotXRequestResult = FECompTotXRequestResult;
	}
	return _p;
}

inline int soap_write__afip3__FECompTotXRequestResponse(struct soap *soap, _afip3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _afip3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _afip3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _afip3__FECompTotXRequestResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompTotXRequestResponse", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequestResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECompTotXRequestResponse * SOAP_FMAC4 soap_get__afip3__FECompTotXRequestResponse(struct soap*, _afip3__FECompTotXRequestResponse *, const char*, const char*);

inline int soap_read__afip3__FECompTotXRequestResponse(struct soap *soap, _afip3__FECompTotXRequestResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECompTotXRequestResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECompTotXRequestResponse(struct soap *soap, const char *URL, _afip3__FECompTotXRequestResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECompTotXRequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECompTotXRequestResponse(struct soap *soap, _afip3__FECompTotXRequestResponse *p)
{
	if (::soap_read__afip3__FECompTotXRequestResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECompTotXRequest_DEFINED
#define SOAP_TYPE__afip3__FECompTotXRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECompTotXRequest(struct soap*, const char*, int, const _afip3__FECompTotXRequest *, const char*);
SOAP_FMAC3 _afip3__FECompTotXRequest * SOAP_FMAC4 soap_in__afip3__FECompTotXRequest(struct soap*, const char*, _afip3__FECompTotXRequest *, const char*);
SOAP_FMAC1 _afip3__FECompTotXRequest * SOAP_FMAC2 soap_instantiate__afip3__FECompTotXRequest(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECompTotXRequest * soap_new__afip3__FECompTotXRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECompTotXRequest(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECompTotXRequest * soap_new_req__afip3__FECompTotXRequest(
	struct soap *soap)
{
	_afip3__FECompTotXRequest *_p = ::soap_new__afip3__FECompTotXRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECompTotXRequest * soap_new_set__afip3__FECompTotXRequest(
	struct soap *soap,
	afip3__FEAuthRequest *Auth)
{
	_afip3__FECompTotXRequest *_p = ::soap_new__afip3__FECompTotXRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECompTotXRequest::Auth = Auth;
	}
	return _p;
}

inline int soap_write__afip3__FECompTotXRequest(struct soap *soap, _afip3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompTotXRequest", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECompTotXRequest(struct soap *soap, const char *URL, _afip3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompTotXRequest", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECompTotXRequest(struct soap *soap, const char *URL, _afip3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompTotXRequest", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECompTotXRequest(struct soap *soap, const char *URL, _afip3__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompTotXRequest", p->soap_type() == SOAP_TYPE__afip3__FECompTotXRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECompTotXRequest * SOAP_FMAC4 soap_get__afip3__FECompTotXRequest(struct soap*, _afip3__FECompTotXRequest *, const char*, const char*);

inline int soap_read__afip3__FECompTotXRequest(struct soap *soap, _afip3__FECompTotXRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECompTotXRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECompTotXRequest(struct soap *soap, const char *URL, _afip3__FECompTotXRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECompTotXRequest(struct soap *soap, _afip3__FECompTotXRequest *p)
{
	if (::soap_read__afip3__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAESolicitarResponse_DEFINED
#define SOAP_TYPE__afip3__FECAESolicitarResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAESolicitarResponse(struct soap*, const char*, int, const _afip3__FECAESolicitarResponse *, const char*);
SOAP_FMAC3 _afip3__FECAESolicitarResponse * SOAP_FMAC4 soap_in__afip3__FECAESolicitarResponse(struct soap*, const char*, _afip3__FECAESolicitarResponse *, const char*);
SOAP_FMAC1 _afip3__FECAESolicitarResponse * SOAP_FMAC2 soap_instantiate__afip3__FECAESolicitarResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAESolicitarResponse * soap_new__afip3__FECAESolicitarResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAESolicitarResponse(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAESolicitarResponse * soap_new_req__afip3__FECAESolicitarResponse(
	struct soap *soap)
{
	_afip3__FECAESolicitarResponse *_p = ::soap_new__afip3__FECAESolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAESolicitarResponse * soap_new_set__afip3__FECAESolicitarResponse(
	struct soap *soap,
	afip3__FECAEResponse *FECAESolicitarResult)
{
	_afip3__FECAESolicitarResponse *_p = ::soap_new__afip3__FECAESolicitarResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAESolicitarResponse::FECAESolicitarResult = FECAESolicitarResult;
	}
	return _p;
}

inline int soap_write__afip3__FECAESolicitarResponse(struct soap *soap, _afip3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAESolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAESolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAESolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAESolicitarResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAESolicitarResponse", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitarResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAESolicitarResponse * SOAP_FMAC4 soap_get__afip3__FECAESolicitarResponse(struct soap*, _afip3__FECAESolicitarResponse *, const char*, const char*);

inline int soap_read__afip3__FECAESolicitarResponse(struct soap *soap, _afip3__FECAESolicitarResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAESolicitarResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAESolicitarResponse(struct soap *soap, const char *URL, _afip3__FECAESolicitarResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAESolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAESolicitarResponse(struct soap *soap, _afip3__FECAESolicitarResponse *p)
{
	if (::soap_read__afip3__FECAESolicitarResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip3__FECAESolicitar_DEFINED
#define SOAP_TYPE__afip3__FECAESolicitar_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip3__FECAESolicitar(struct soap*, const char*, int, const _afip3__FECAESolicitar *, const char*);
SOAP_FMAC3 _afip3__FECAESolicitar * SOAP_FMAC4 soap_in__afip3__FECAESolicitar(struct soap*, const char*, _afip3__FECAESolicitar *, const char*);
SOAP_FMAC1 _afip3__FECAESolicitar * SOAP_FMAC2 soap_instantiate__afip3__FECAESolicitar(struct soap*, int, const char*, const char*, size_t*);

inline _afip3__FECAESolicitar * soap_new__afip3__FECAESolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip3__FECAESolicitar(soap, n, NULL, NULL, NULL);
}

inline _afip3__FECAESolicitar * soap_new_req__afip3__FECAESolicitar(
	struct soap *soap)
{
	_afip3__FECAESolicitar *_p = ::soap_new__afip3__FECAESolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _afip3__FECAESolicitar * soap_new_set__afip3__FECAESolicitar(
	struct soap *soap,
	afip3__FEAuthRequest *Auth,
	afip3__FECAERequest *FeCAEReq)
{
	_afip3__FECAESolicitar *_p = ::soap_new__afip3__FECAESolicitar(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip3__FECAESolicitar::Auth = Auth;
		_p->_afip3__FECAESolicitar::FeCAEReq = FeCAEReq;
	}
	return _p;
}

inline int soap_write__afip3__FECAESolicitar(struct soap *soap, _afip3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAESolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitar ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip3__FECAESolicitar(struct soap *soap, const char *URL, _afip3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAESolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip3__FECAESolicitar(struct soap *soap, const char *URL, _afip3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAESolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitar ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip3__FECAESolicitar(struct soap *soap, const char *URL, _afip3__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAESolicitar", p->soap_type() == SOAP_TYPE__afip3__FECAESolicitar ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip3__FECAESolicitar * SOAP_FMAC4 soap_get__afip3__FECAESolicitar(struct soap*, _afip3__FECAESolicitar *, const char*, const char*);

inline int soap_read__afip3__FECAESolicitar(struct soap *soap, _afip3__FECAESolicitar *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip3__FECAESolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip3__FECAESolicitar(struct soap *soap, const char *URL, _afip3__FECAESolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip3__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip3__FECAESolicitar(struct soap *soap, _afip3__FECAESolicitar *p)
{
	if (::soap_read__afip3__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__PaisTipo_DEFINED
#define SOAP_TYPE_afip3__PaisTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__PaisTipo(struct soap*, const char*, int, const afip3__PaisTipo *, const char*);
SOAP_FMAC3 afip3__PaisTipo * SOAP_FMAC4 soap_in_afip3__PaisTipo(struct soap*, const char*, afip3__PaisTipo *, const char*);
SOAP_FMAC1 afip3__PaisTipo * SOAP_FMAC2 soap_instantiate_afip3__PaisTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__PaisTipo * soap_new_afip3__PaisTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__PaisTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__PaisTipo * soap_new_req_afip3__PaisTipo(
	struct soap *soap,
	short Id)
{
	afip3__PaisTipo *_p = ::soap_new_afip3__PaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__PaisTipo::Id = Id;
	}
	return _p;
}

inline afip3__PaisTipo * soap_new_set_afip3__PaisTipo(
	struct soap *soap,
	short Id,
	std::string *Desc)
{
	afip3__PaisTipo *_p = ::soap_new_afip3__PaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__PaisTipo::Id = Id;
		_p->afip3__PaisTipo::Desc = Desc;
	}
	return _p;
}

inline int soap_write_afip3__PaisTipo(struct soap *soap, afip3__PaisTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:PaisTipo", p->soap_type() == SOAP_TYPE_afip3__PaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__PaisTipo(struct soap *soap, const char *URL, afip3__PaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:PaisTipo", p->soap_type() == SOAP_TYPE_afip3__PaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__PaisTipo(struct soap *soap, const char *URL, afip3__PaisTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:PaisTipo", p->soap_type() == SOAP_TYPE_afip3__PaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__PaisTipo(struct soap *soap, const char *URL, afip3__PaisTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:PaisTipo", p->soap_type() == SOAP_TYPE_afip3__PaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__PaisTipo * SOAP_FMAC4 soap_get_afip3__PaisTipo(struct soap*, afip3__PaisTipo *, const char*, const char*);

inline int soap_read_afip3__PaisTipo(struct soap *soap, afip3__PaisTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__PaisTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__PaisTipo(struct soap *soap, const char *URL, afip3__PaisTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__PaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__PaisTipo(struct soap *soap, afip3__PaisTipo *p)
{
	if (::soap_read_afip3__PaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfPaisTipo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfPaisTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfPaisTipo(struct soap*, const char*, int, const afip3__ArrayOfPaisTipo *, const char*);
SOAP_FMAC3 afip3__ArrayOfPaisTipo * SOAP_FMAC4 soap_in_afip3__ArrayOfPaisTipo(struct soap*, const char*, afip3__ArrayOfPaisTipo *, const char*);
SOAP_FMAC1 afip3__ArrayOfPaisTipo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfPaisTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfPaisTipo * soap_new_afip3__ArrayOfPaisTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfPaisTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfPaisTipo * soap_new_req_afip3__ArrayOfPaisTipo(
	struct soap *soap)
{
	afip3__ArrayOfPaisTipo *_p = ::soap_new_afip3__ArrayOfPaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfPaisTipo * soap_new_set_afip3__ArrayOfPaisTipo(
	struct soap *soap,
	const std::vector<afip3__PaisTipo *> & PaisTipo)
{
	afip3__ArrayOfPaisTipo *_p = ::soap_new_afip3__ArrayOfPaisTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfPaisTipo::PaisTipo = PaisTipo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfPaisTipo(struct soap *soap, afip3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfPaisTipo(struct soap *soap, const char *URL, afip3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfPaisTipo(struct soap *soap, const char *URL, afip3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfPaisTipo(struct soap *soap, const char *URL, afip3__ArrayOfPaisTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfPaisTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPaisTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfPaisTipo * SOAP_FMAC4 soap_get_afip3__ArrayOfPaisTipo(struct soap*, afip3__ArrayOfPaisTipo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfPaisTipo(struct soap *soap, afip3__ArrayOfPaisTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfPaisTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfPaisTipo(struct soap *soap, const char *URL, afip3__ArrayOfPaisTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfPaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfPaisTipo(struct soap *soap, afip3__ArrayOfPaisTipo *p)
{
	if (::soap_read_afip3__ArrayOfPaisTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FEPaisResponse_DEFINED
#define SOAP_TYPE_afip3__FEPaisResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FEPaisResponse(struct soap*, const char*, int, const afip3__FEPaisResponse *, const char*);
SOAP_FMAC3 afip3__FEPaisResponse * SOAP_FMAC4 soap_in_afip3__FEPaisResponse(struct soap*, const char*, afip3__FEPaisResponse *, const char*);
SOAP_FMAC1 afip3__FEPaisResponse * SOAP_FMAC2 soap_instantiate_afip3__FEPaisResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FEPaisResponse * soap_new_afip3__FEPaisResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FEPaisResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FEPaisResponse * soap_new_req_afip3__FEPaisResponse(
	struct soap *soap)
{
	afip3__FEPaisResponse *_p = ::soap_new_afip3__FEPaisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FEPaisResponse * soap_new_set_afip3__FEPaisResponse(
	struct soap *soap,
	afip3__ArrayOfPaisTipo *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FEPaisResponse *_p = ::soap_new_afip3__FEPaisResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEPaisResponse::ResultGet = ResultGet;
		_p->afip3__FEPaisResponse::Errors = Errors;
		_p->afip3__FEPaisResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FEPaisResponse(struct soap *soap, afip3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip3__FEPaisResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FEPaisResponse(struct soap *soap, const char *URL, afip3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip3__FEPaisResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FEPaisResponse(struct soap *soap, const char *URL, afip3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip3__FEPaisResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FEPaisResponse(struct soap *soap, const char *URL, afip3__FEPaisResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEPaisResponse", p->soap_type() == SOAP_TYPE_afip3__FEPaisResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FEPaisResponse * SOAP_FMAC4 soap_get_afip3__FEPaisResponse(struct soap*, afip3__FEPaisResponse *, const char*, const char*);

inline int soap_read_afip3__FEPaisResponse(struct soap *soap, afip3__FEPaisResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FEPaisResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FEPaisResponse(struct soap *soap, const char *URL, afip3__FEPaisResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FEPaisResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FEPaisResponse(struct soap *soap, afip3__FEPaisResponse *p)
{
	if (::soap_read_afip3__FEPaisResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__DocTipo_DEFINED
#define SOAP_TYPE_afip3__DocTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__DocTipo(struct soap*, const char*, int, const afip3__DocTipo *, const char*);
SOAP_FMAC3 afip3__DocTipo * SOAP_FMAC4 soap_in_afip3__DocTipo(struct soap*, const char*, afip3__DocTipo *, const char*);
SOAP_FMAC1 afip3__DocTipo * SOAP_FMAC2 soap_instantiate_afip3__DocTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__DocTipo * soap_new_afip3__DocTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__DocTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__DocTipo * soap_new_req_afip3__DocTipo(
	struct soap *soap,
	int Id)
{
	afip3__DocTipo *_p = ::soap_new_afip3__DocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__DocTipo::Id = Id;
	}
	return _p;
}

inline afip3__DocTipo * soap_new_set_afip3__DocTipo(
	struct soap *soap,
	int Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	afip3__DocTipo *_p = ::soap_new_afip3__DocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__DocTipo::Id = Id;
		_p->afip3__DocTipo::Desc = Desc;
		_p->afip3__DocTipo::FchDesde = FchDesde;
		_p->afip3__DocTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_afip3__DocTipo(struct soap *soap, afip3__DocTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:DocTipo", p->soap_type() == SOAP_TYPE_afip3__DocTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__DocTipo(struct soap *soap, const char *URL, afip3__DocTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:DocTipo", p->soap_type() == SOAP_TYPE_afip3__DocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__DocTipo(struct soap *soap, const char *URL, afip3__DocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:DocTipo", p->soap_type() == SOAP_TYPE_afip3__DocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__DocTipo(struct soap *soap, const char *URL, afip3__DocTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:DocTipo", p->soap_type() == SOAP_TYPE_afip3__DocTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__DocTipo * SOAP_FMAC4 soap_get_afip3__DocTipo(struct soap*, afip3__DocTipo *, const char*, const char*);

inline int soap_read_afip3__DocTipo(struct soap *soap, afip3__DocTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__DocTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__DocTipo(struct soap *soap, const char *URL, afip3__DocTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__DocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__DocTipo(struct soap *soap, afip3__DocTipo *p)
{
	if (::soap_read_afip3__DocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfDocTipo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfDocTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfDocTipo(struct soap*, const char*, int, const afip3__ArrayOfDocTipo *, const char*);
SOAP_FMAC3 afip3__ArrayOfDocTipo * SOAP_FMAC4 soap_in_afip3__ArrayOfDocTipo(struct soap*, const char*, afip3__ArrayOfDocTipo *, const char*);
SOAP_FMAC1 afip3__ArrayOfDocTipo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfDocTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfDocTipo * soap_new_afip3__ArrayOfDocTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfDocTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfDocTipo * soap_new_req_afip3__ArrayOfDocTipo(
	struct soap *soap)
{
	afip3__ArrayOfDocTipo *_p = ::soap_new_afip3__ArrayOfDocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfDocTipo * soap_new_set_afip3__ArrayOfDocTipo(
	struct soap *soap,
	const std::vector<afip3__DocTipo *> & DocTipo)
{
	afip3__ArrayOfDocTipo *_p = ::soap_new_afip3__ArrayOfDocTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfDocTipo::DocTipo = DocTipo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfDocTipo(struct soap *soap, afip3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfDocTipo(struct soap *soap, const char *URL, afip3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfDocTipo(struct soap *soap, const char *URL, afip3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfDocTipo(struct soap *soap, const char *URL, afip3__ArrayOfDocTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfDocTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfDocTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfDocTipo * SOAP_FMAC4 soap_get_afip3__ArrayOfDocTipo(struct soap*, afip3__ArrayOfDocTipo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfDocTipo(struct soap *soap, afip3__ArrayOfDocTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfDocTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfDocTipo(struct soap *soap, const char *URL, afip3__ArrayOfDocTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfDocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfDocTipo(struct soap *soap, afip3__ArrayOfDocTipo *p)
{
	if (::soap_read_afip3__ArrayOfDocTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__DocTipoResponse_DEFINED
#define SOAP_TYPE_afip3__DocTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__DocTipoResponse(struct soap*, const char*, int, const afip3__DocTipoResponse *, const char*);
SOAP_FMAC3 afip3__DocTipoResponse * SOAP_FMAC4 soap_in_afip3__DocTipoResponse(struct soap*, const char*, afip3__DocTipoResponse *, const char*);
SOAP_FMAC1 afip3__DocTipoResponse * SOAP_FMAC2 soap_instantiate_afip3__DocTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__DocTipoResponse * soap_new_afip3__DocTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__DocTipoResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__DocTipoResponse * soap_new_req_afip3__DocTipoResponse(
	struct soap *soap)
{
	afip3__DocTipoResponse *_p = ::soap_new_afip3__DocTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__DocTipoResponse * soap_new_set_afip3__DocTipoResponse(
	struct soap *soap,
	afip3__ArrayOfDocTipo *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__DocTipoResponse *_p = ::soap_new_afip3__DocTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__DocTipoResponse::ResultGet = ResultGet;
		_p->afip3__DocTipoResponse::Errors = Errors;
		_p->afip3__DocTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__DocTipoResponse(struct soap *soap, afip3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip3__DocTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__DocTipoResponse(struct soap *soap, const char *URL, afip3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip3__DocTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__DocTipoResponse(struct soap *soap, const char *URL, afip3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip3__DocTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__DocTipoResponse(struct soap *soap, const char *URL, afip3__DocTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:DocTipoResponse", p->soap_type() == SOAP_TYPE_afip3__DocTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__DocTipoResponse * SOAP_FMAC4 soap_get_afip3__DocTipoResponse(struct soap*, afip3__DocTipoResponse *, const char*, const char*);

inline int soap_read_afip3__DocTipoResponse(struct soap *soap, afip3__DocTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__DocTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__DocTipoResponse(struct soap *soap, const char *URL, afip3__DocTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__DocTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__DocTipoResponse(struct soap *soap, afip3__DocTipoResponse *p)
{
	if (::soap_read_afip3__DocTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__CbteTipo_DEFINED
#define SOAP_TYPE_afip3__CbteTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__CbteTipo(struct soap*, const char*, int, const afip3__CbteTipo *, const char*);
SOAP_FMAC3 afip3__CbteTipo * SOAP_FMAC4 soap_in_afip3__CbteTipo(struct soap*, const char*, afip3__CbteTipo *, const char*);
SOAP_FMAC1 afip3__CbteTipo * SOAP_FMAC2 soap_instantiate_afip3__CbteTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__CbteTipo * soap_new_afip3__CbteTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__CbteTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__CbteTipo * soap_new_req_afip3__CbteTipo(
	struct soap *soap,
	int Id)
{
	afip3__CbteTipo *_p = ::soap_new_afip3__CbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__CbteTipo::Id = Id;
	}
	return _p;
}

inline afip3__CbteTipo * soap_new_set_afip3__CbteTipo(
	struct soap *soap,
	int Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	afip3__CbteTipo *_p = ::soap_new_afip3__CbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__CbteTipo::Id = Id;
		_p->afip3__CbteTipo::Desc = Desc;
		_p->afip3__CbteTipo::FchDesde = FchDesde;
		_p->afip3__CbteTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_afip3__CbteTipo(struct soap *soap, afip3__CbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:CbteTipo", p->soap_type() == SOAP_TYPE_afip3__CbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__CbteTipo(struct soap *soap, const char *URL, afip3__CbteTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:CbteTipo", p->soap_type() == SOAP_TYPE_afip3__CbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__CbteTipo(struct soap *soap, const char *URL, afip3__CbteTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:CbteTipo", p->soap_type() == SOAP_TYPE_afip3__CbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__CbteTipo(struct soap *soap, const char *URL, afip3__CbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:CbteTipo", p->soap_type() == SOAP_TYPE_afip3__CbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__CbteTipo * SOAP_FMAC4 soap_get_afip3__CbteTipo(struct soap*, afip3__CbteTipo *, const char*, const char*);

inline int soap_read_afip3__CbteTipo(struct soap *soap, afip3__CbteTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__CbteTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__CbteTipo(struct soap *soap, const char *URL, afip3__CbteTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__CbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__CbteTipo(struct soap *soap, afip3__CbteTipo *p)
{
	if (::soap_read_afip3__CbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfCbteTipo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfCbteTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfCbteTipo(struct soap*, const char*, int, const afip3__ArrayOfCbteTipo *, const char*);
SOAP_FMAC3 afip3__ArrayOfCbteTipo * SOAP_FMAC4 soap_in_afip3__ArrayOfCbteTipo(struct soap*, const char*, afip3__ArrayOfCbteTipo *, const char*);
SOAP_FMAC1 afip3__ArrayOfCbteTipo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfCbteTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfCbteTipo * soap_new_afip3__ArrayOfCbteTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfCbteTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfCbteTipo * soap_new_req_afip3__ArrayOfCbteTipo(
	struct soap *soap)
{
	afip3__ArrayOfCbteTipo *_p = ::soap_new_afip3__ArrayOfCbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfCbteTipo * soap_new_set_afip3__ArrayOfCbteTipo(
	struct soap *soap,
	const std::vector<afip3__CbteTipo *> & CbteTipo)
{
	afip3__ArrayOfCbteTipo *_p = ::soap_new_afip3__ArrayOfCbteTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfCbteTipo::CbteTipo = CbteTipo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfCbteTipo(struct soap *soap, afip3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfCbteTipo(struct soap *soap, const char *URL, afip3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfCbteTipo(struct soap *soap, const char *URL, afip3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfCbteTipo(struct soap *soap, const char *URL, afip3__ArrayOfCbteTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfCbteTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfCbteTipo * SOAP_FMAC4 soap_get_afip3__ArrayOfCbteTipo(struct soap*, afip3__ArrayOfCbteTipo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfCbteTipo(struct soap *soap, afip3__ArrayOfCbteTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfCbteTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfCbteTipo(struct soap *soap, const char *URL, afip3__ArrayOfCbteTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfCbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfCbteTipo(struct soap *soap, afip3__ArrayOfCbteTipo *p)
{
	if (::soap_read_afip3__ArrayOfCbteTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__CbteTipoResponse_DEFINED
#define SOAP_TYPE_afip3__CbteTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__CbteTipoResponse(struct soap*, const char*, int, const afip3__CbteTipoResponse *, const char*);
SOAP_FMAC3 afip3__CbteTipoResponse * SOAP_FMAC4 soap_in_afip3__CbteTipoResponse(struct soap*, const char*, afip3__CbteTipoResponse *, const char*);
SOAP_FMAC1 afip3__CbteTipoResponse * SOAP_FMAC2 soap_instantiate_afip3__CbteTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__CbteTipoResponse * soap_new_afip3__CbteTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__CbteTipoResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__CbteTipoResponse * soap_new_req_afip3__CbteTipoResponse(
	struct soap *soap)
{
	afip3__CbteTipoResponse *_p = ::soap_new_afip3__CbteTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__CbteTipoResponse * soap_new_set_afip3__CbteTipoResponse(
	struct soap *soap,
	afip3__ArrayOfCbteTipo *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__CbteTipoResponse *_p = ::soap_new_afip3__CbteTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__CbteTipoResponse::ResultGet = ResultGet;
		_p->afip3__CbteTipoResponse::Errors = Errors;
		_p->afip3__CbteTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__CbteTipoResponse(struct soap *soap, afip3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__CbteTipoResponse(struct soap *soap, const char *URL, afip3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__CbteTipoResponse(struct soap *soap, const char *URL, afip3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__CbteTipoResponse(struct soap *soap, const char *URL, afip3__CbteTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:CbteTipoResponse", p->soap_type() == SOAP_TYPE_afip3__CbteTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__CbteTipoResponse * SOAP_FMAC4 soap_get_afip3__CbteTipoResponse(struct soap*, afip3__CbteTipoResponse *, const char*, const char*);

inline int soap_read_afip3__CbteTipoResponse(struct soap *soap, afip3__CbteTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__CbteTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__CbteTipoResponse(struct soap *soap, const char *URL, afip3__CbteTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__CbteTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__CbteTipoResponse(struct soap *soap, afip3__CbteTipoResponse *p)
{
	if (::soap_read_afip3__CbteTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__PtoVenta_DEFINED
#define SOAP_TYPE_afip3__PtoVenta_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__PtoVenta(struct soap*, const char*, int, const afip3__PtoVenta *, const char*);
SOAP_FMAC3 afip3__PtoVenta * SOAP_FMAC4 soap_in_afip3__PtoVenta(struct soap*, const char*, afip3__PtoVenta *, const char*);
SOAP_FMAC1 afip3__PtoVenta * SOAP_FMAC2 soap_instantiate_afip3__PtoVenta(struct soap*, int, const char*, const char*, size_t*);

inline afip3__PtoVenta * soap_new_afip3__PtoVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__PtoVenta(soap, n, NULL, NULL, NULL);
}

inline afip3__PtoVenta * soap_new_req_afip3__PtoVenta(
	struct soap *soap,
	int Nro)
{
	afip3__PtoVenta *_p = ::soap_new_afip3__PtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__PtoVenta::Nro = Nro;
	}
	return _p;
}

inline afip3__PtoVenta * soap_new_set_afip3__PtoVenta(
	struct soap *soap,
	int Nro,
	std::string *EmisionTipo,
	std::string *Bloqueado,
	std::string *FchBaja)
{
	afip3__PtoVenta *_p = ::soap_new_afip3__PtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__PtoVenta::Nro = Nro;
		_p->afip3__PtoVenta::EmisionTipo = EmisionTipo;
		_p->afip3__PtoVenta::Bloqueado = Bloqueado;
		_p->afip3__PtoVenta::FchBaja = FchBaja;
	}
	return _p;
}

inline int soap_write_afip3__PtoVenta(struct soap *soap, afip3__PtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:PtoVenta", p->soap_type() == SOAP_TYPE_afip3__PtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__PtoVenta(struct soap *soap, const char *URL, afip3__PtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:PtoVenta", p->soap_type() == SOAP_TYPE_afip3__PtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__PtoVenta(struct soap *soap, const char *URL, afip3__PtoVenta const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:PtoVenta", p->soap_type() == SOAP_TYPE_afip3__PtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__PtoVenta(struct soap *soap, const char *URL, afip3__PtoVenta const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:PtoVenta", p->soap_type() == SOAP_TYPE_afip3__PtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__PtoVenta * SOAP_FMAC4 soap_get_afip3__PtoVenta(struct soap*, afip3__PtoVenta *, const char*, const char*);

inline int soap_read_afip3__PtoVenta(struct soap *soap, afip3__PtoVenta *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__PtoVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__PtoVenta(struct soap *soap, const char *URL, afip3__PtoVenta *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__PtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__PtoVenta(struct soap *soap, afip3__PtoVenta *p)
{
	if (::soap_read_afip3__PtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfPtoVenta_DEFINED
#define SOAP_TYPE_afip3__ArrayOfPtoVenta_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfPtoVenta(struct soap*, const char*, int, const afip3__ArrayOfPtoVenta *, const char*);
SOAP_FMAC3 afip3__ArrayOfPtoVenta * SOAP_FMAC4 soap_in_afip3__ArrayOfPtoVenta(struct soap*, const char*, afip3__ArrayOfPtoVenta *, const char*);
SOAP_FMAC1 afip3__ArrayOfPtoVenta * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfPtoVenta(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfPtoVenta * soap_new_afip3__ArrayOfPtoVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfPtoVenta(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfPtoVenta * soap_new_req_afip3__ArrayOfPtoVenta(
	struct soap *soap)
{
	afip3__ArrayOfPtoVenta *_p = ::soap_new_afip3__ArrayOfPtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfPtoVenta * soap_new_set_afip3__ArrayOfPtoVenta(
	struct soap *soap,
	const std::vector<afip3__PtoVenta *> & PtoVenta)
{
	afip3__ArrayOfPtoVenta *_p = ::soap_new_afip3__ArrayOfPtoVenta(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfPtoVenta::PtoVenta = PtoVenta;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfPtoVenta(struct soap *soap, afip3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfPtoVenta(struct soap *soap, const char *URL, afip3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfPtoVenta(struct soap *soap, const char *URL, afip3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfPtoVenta(struct soap *soap, const char *URL, afip3__ArrayOfPtoVenta const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfPtoVenta", p->soap_type() == SOAP_TYPE_afip3__ArrayOfPtoVenta ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfPtoVenta * SOAP_FMAC4 soap_get_afip3__ArrayOfPtoVenta(struct soap*, afip3__ArrayOfPtoVenta *, const char*, const char*);

inline int soap_read_afip3__ArrayOfPtoVenta(struct soap *soap, afip3__ArrayOfPtoVenta *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfPtoVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfPtoVenta(struct soap *soap, const char *URL, afip3__ArrayOfPtoVenta *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfPtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfPtoVenta(struct soap *soap, afip3__ArrayOfPtoVenta *p)
{
	if (::soap_read_afip3__ArrayOfPtoVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FEPtoVentaResponse_DEFINED
#define SOAP_TYPE_afip3__FEPtoVentaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FEPtoVentaResponse(struct soap*, const char*, int, const afip3__FEPtoVentaResponse *, const char*);
SOAP_FMAC3 afip3__FEPtoVentaResponse * SOAP_FMAC4 soap_in_afip3__FEPtoVentaResponse(struct soap*, const char*, afip3__FEPtoVentaResponse *, const char*);
SOAP_FMAC1 afip3__FEPtoVentaResponse * SOAP_FMAC2 soap_instantiate_afip3__FEPtoVentaResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FEPtoVentaResponse * soap_new_afip3__FEPtoVentaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FEPtoVentaResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FEPtoVentaResponse * soap_new_req_afip3__FEPtoVentaResponse(
	struct soap *soap)
{
	afip3__FEPtoVentaResponse *_p = ::soap_new_afip3__FEPtoVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FEPtoVentaResponse * soap_new_set_afip3__FEPtoVentaResponse(
	struct soap *soap,
	afip3__ArrayOfPtoVenta *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FEPtoVentaResponse *_p = ::soap_new_afip3__FEPtoVentaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEPtoVentaResponse::ResultGet = ResultGet;
		_p->afip3__FEPtoVentaResponse::Errors = Errors;
		_p->afip3__FEPtoVentaResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FEPtoVentaResponse(struct soap *soap, afip3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FEPtoVentaResponse(struct soap *soap, const char *URL, afip3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FEPtoVentaResponse(struct soap *soap, const char *URL, afip3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FEPtoVentaResponse(struct soap *soap, const char *URL, afip3__FEPtoVentaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEPtoVentaResponse", p->soap_type() == SOAP_TYPE_afip3__FEPtoVentaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FEPtoVentaResponse * SOAP_FMAC4 soap_get_afip3__FEPtoVentaResponse(struct soap*, afip3__FEPtoVentaResponse *, const char*, const char*);

inline int soap_read_afip3__FEPtoVentaResponse(struct soap *soap, afip3__FEPtoVentaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FEPtoVentaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FEPtoVentaResponse(struct soap *soap, const char *URL, afip3__FEPtoVentaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FEPtoVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FEPtoVentaResponse(struct soap *soap, afip3__FEPtoVentaResponse *p)
{
	if (::soap_read_afip3__FEPtoVentaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ConceptoTipo_DEFINED
#define SOAP_TYPE_afip3__ConceptoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ConceptoTipo(struct soap*, const char*, int, const afip3__ConceptoTipo *, const char*);
SOAP_FMAC3 afip3__ConceptoTipo * SOAP_FMAC4 soap_in_afip3__ConceptoTipo(struct soap*, const char*, afip3__ConceptoTipo *, const char*);
SOAP_FMAC1 afip3__ConceptoTipo * SOAP_FMAC2 soap_instantiate_afip3__ConceptoTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ConceptoTipo * soap_new_afip3__ConceptoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ConceptoTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ConceptoTipo * soap_new_req_afip3__ConceptoTipo(
	struct soap *soap,
	int Id)
{
	afip3__ConceptoTipo *_p = ::soap_new_afip3__ConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ConceptoTipo::Id = Id;
	}
	return _p;
}

inline afip3__ConceptoTipo * soap_new_set_afip3__ConceptoTipo(
	struct soap *soap,
	int Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	afip3__ConceptoTipo *_p = ::soap_new_afip3__ConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ConceptoTipo::Id = Id;
		_p->afip3__ConceptoTipo::Desc = Desc;
		_p->afip3__ConceptoTipo::FchDesde = FchDesde;
		_p->afip3__ConceptoTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_afip3__ConceptoTipo(struct soap *soap, afip3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ConceptoTipo(struct soap *soap, const char *URL, afip3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ConceptoTipo(struct soap *soap, const char *URL, afip3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ConceptoTipo(struct soap *soap, const char *URL, afip3__ConceptoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ConceptoTipo * SOAP_FMAC4 soap_get_afip3__ConceptoTipo(struct soap*, afip3__ConceptoTipo *, const char*, const char*);

inline int soap_read_afip3__ConceptoTipo(struct soap *soap, afip3__ConceptoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ConceptoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ConceptoTipo(struct soap *soap, const char *URL, afip3__ConceptoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ConceptoTipo(struct soap *soap, afip3__ConceptoTipo *p)
{
	if (::soap_read_afip3__ConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfConceptoTipo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfConceptoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfConceptoTipo(struct soap*, const char*, int, const afip3__ArrayOfConceptoTipo *, const char*);
SOAP_FMAC3 afip3__ArrayOfConceptoTipo * SOAP_FMAC4 soap_in_afip3__ArrayOfConceptoTipo(struct soap*, const char*, afip3__ArrayOfConceptoTipo *, const char*);
SOAP_FMAC1 afip3__ArrayOfConceptoTipo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfConceptoTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfConceptoTipo * soap_new_afip3__ArrayOfConceptoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfConceptoTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfConceptoTipo * soap_new_req_afip3__ArrayOfConceptoTipo(
	struct soap *soap)
{
	afip3__ArrayOfConceptoTipo *_p = ::soap_new_afip3__ArrayOfConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfConceptoTipo * soap_new_set_afip3__ArrayOfConceptoTipo(
	struct soap *soap,
	const std::vector<afip3__ConceptoTipo *> & ConceptoTipo)
{
	afip3__ArrayOfConceptoTipo *_p = ::soap_new_afip3__ArrayOfConceptoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfConceptoTipo::ConceptoTipo = ConceptoTipo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfConceptoTipo(struct soap *soap, afip3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, afip3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, afip3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, afip3__ArrayOfConceptoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfConceptoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfConceptoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfConceptoTipo * SOAP_FMAC4 soap_get_afip3__ArrayOfConceptoTipo(struct soap*, afip3__ArrayOfConceptoTipo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfConceptoTipo(struct soap *soap, afip3__ArrayOfConceptoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfConceptoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfConceptoTipo(struct soap *soap, const char *URL, afip3__ArrayOfConceptoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfConceptoTipo(struct soap *soap, afip3__ArrayOfConceptoTipo *p)
{
	if (::soap_read_afip3__ArrayOfConceptoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ConceptoTipoResponse_DEFINED
#define SOAP_TYPE_afip3__ConceptoTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ConceptoTipoResponse(struct soap*, const char*, int, const afip3__ConceptoTipoResponse *, const char*);
SOAP_FMAC3 afip3__ConceptoTipoResponse * SOAP_FMAC4 soap_in_afip3__ConceptoTipoResponse(struct soap*, const char*, afip3__ConceptoTipoResponse *, const char*);
SOAP_FMAC1 afip3__ConceptoTipoResponse * SOAP_FMAC2 soap_instantiate_afip3__ConceptoTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ConceptoTipoResponse * soap_new_afip3__ConceptoTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ConceptoTipoResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__ConceptoTipoResponse * soap_new_req_afip3__ConceptoTipoResponse(
	struct soap *soap)
{
	afip3__ConceptoTipoResponse *_p = ::soap_new_afip3__ConceptoTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ConceptoTipoResponse * soap_new_set_afip3__ConceptoTipoResponse(
	struct soap *soap,
	afip3__ArrayOfConceptoTipo *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__ConceptoTipoResponse *_p = ::soap_new_afip3__ConceptoTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ConceptoTipoResponse::ResultGet = ResultGet;
		_p->afip3__ConceptoTipoResponse::Errors = Errors;
		_p->afip3__ConceptoTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__ConceptoTipoResponse(struct soap *soap, afip3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ConceptoTipoResponse(struct soap *soap, const char *URL, afip3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ConceptoTipoResponse(struct soap *soap, const char *URL, afip3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ConceptoTipoResponse(struct soap *soap, const char *URL, afip3__ConceptoTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ConceptoTipoResponse", p->soap_type() == SOAP_TYPE_afip3__ConceptoTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ConceptoTipoResponse * SOAP_FMAC4 soap_get_afip3__ConceptoTipoResponse(struct soap*, afip3__ConceptoTipoResponse *, const char*, const char*);

inline int soap_read_afip3__ConceptoTipoResponse(struct soap *soap, afip3__ConceptoTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ConceptoTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ConceptoTipoResponse(struct soap *soap, const char *URL, afip3__ConceptoTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ConceptoTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ConceptoTipoResponse(struct soap *soap, afip3__ConceptoTipoResponse *p)
{
	if (::soap_read_afip3__ConceptoTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__OpcionalTipo_DEFINED
#define SOAP_TYPE_afip3__OpcionalTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__OpcionalTipo(struct soap*, const char*, int, const afip3__OpcionalTipo *, const char*);
SOAP_FMAC3 afip3__OpcionalTipo * SOAP_FMAC4 soap_in_afip3__OpcionalTipo(struct soap*, const char*, afip3__OpcionalTipo *, const char*);
SOAP_FMAC1 afip3__OpcionalTipo * SOAP_FMAC2 soap_instantiate_afip3__OpcionalTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__OpcionalTipo * soap_new_afip3__OpcionalTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__OpcionalTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__OpcionalTipo * soap_new_req_afip3__OpcionalTipo(
	struct soap *soap)
{
	afip3__OpcionalTipo *_p = ::soap_new_afip3__OpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__OpcionalTipo * soap_new_set_afip3__OpcionalTipo(
	struct soap *soap,
	std::string *Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	afip3__OpcionalTipo *_p = ::soap_new_afip3__OpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__OpcionalTipo::Id = Id;
		_p->afip3__OpcionalTipo::Desc = Desc;
		_p->afip3__OpcionalTipo::FchDesde = FchDesde;
		_p->afip3__OpcionalTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_afip3__OpcionalTipo(struct soap *soap, afip3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__OpcionalTipo(struct soap *soap, const char *URL, afip3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__OpcionalTipo(struct soap *soap, const char *URL, afip3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__OpcionalTipo(struct soap *soap, const char *URL, afip3__OpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:OpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__OpcionalTipo * SOAP_FMAC4 soap_get_afip3__OpcionalTipo(struct soap*, afip3__OpcionalTipo *, const char*, const char*);

inline int soap_read_afip3__OpcionalTipo(struct soap *soap, afip3__OpcionalTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__OpcionalTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__OpcionalTipo(struct soap *soap, const char *URL, afip3__OpcionalTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__OpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__OpcionalTipo(struct soap *soap, afip3__OpcionalTipo *p)
{
	if (::soap_read_afip3__OpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfOpcionalTipo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfOpcionalTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfOpcionalTipo(struct soap*, const char*, int, const afip3__ArrayOfOpcionalTipo *, const char*);
SOAP_FMAC3 afip3__ArrayOfOpcionalTipo * SOAP_FMAC4 soap_in_afip3__ArrayOfOpcionalTipo(struct soap*, const char*, afip3__ArrayOfOpcionalTipo *, const char*);
SOAP_FMAC1 afip3__ArrayOfOpcionalTipo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfOpcionalTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfOpcionalTipo * soap_new_afip3__ArrayOfOpcionalTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfOpcionalTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfOpcionalTipo * soap_new_req_afip3__ArrayOfOpcionalTipo(
	struct soap *soap)
{
	afip3__ArrayOfOpcionalTipo *_p = ::soap_new_afip3__ArrayOfOpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfOpcionalTipo * soap_new_set_afip3__ArrayOfOpcionalTipo(
	struct soap *soap,
	const std::vector<afip3__OpcionalTipo *> & OpcionalTipo)
{
	afip3__ArrayOfOpcionalTipo *_p = ::soap_new_afip3__ArrayOfOpcionalTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfOpcionalTipo::OpcionalTipo = OpcionalTipo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfOpcionalTipo(struct soap *soap, afip3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, afip3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, afip3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, afip3__ArrayOfOpcionalTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfOpcionalTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcionalTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfOpcionalTipo * SOAP_FMAC4 soap_get_afip3__ArrayOfOpcionalTipo(struct soap*, afip3__ArrayOfOpcionalTipo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfOpcionalTipo(struct soap *soap, afip3__ArrayOfOpcionalTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfOpcionalTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfOpcionalTipo(struct soap *soap, const char *URL, afip3__ArrayOfOpcionalTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfOpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfOpcionalTipo(struct soap *soap, afip3__ArrayOfOpcionalTipo *p)
{
	if (::soap_read_afip3__ArrayOfOpcionalTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__OpcionalTipoResponse_DEFINED
#define SOAP_TYPE_afip3__OpcionalTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__OpcionalTipoResponse(struct soap*, const char*, int, const afip3__OpcionalTipoResponse *, const char*);
SOAP_FMAC3 afip3__OpcionalTipoResponse * SOAP_FMAC4 soap_in_afip3__OpcionalTipoResponse(struct soap*, const char*, afip3__OpcionalTipoResponse *, const char*);
SOAP_FMAC1 afip3__OpcionalTipoResponse * SOAP_FMAC2 soap_instantiate_afip3__OpcionalTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__OpcionalTipoResponse * soap_new_afip3__OpcionalTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__OpcionalTipoResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__OpcionalTipoResponse * soap_new_req_afip3__OpcionalTipoResponse(
	struct soap *soap)
{
	afip3__OpcionalTipoResponse *_p = ::soap_new_afip3__OpcionalTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__OpcionalTipoResponse * soap_new_set_afip3__OpcionalTipoResponse(
	struct soap *soap,
	afip3__ArrayOfOpcionalTipo *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__OpcionalTipoResponse *_p = ::soap_new_afip3__OpcionalTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__OpcionalTipoResponse::ResultGet = ResultGet;
		_p->afip3__OpcionalTipoResponse::Errors = Errors;
		_p->afip3__OpcionalTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__OpcionalTipoResponse(struct soap *soap, afip3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__OpcionalTipoResponse(struct soap *soap, const char *URL, afip3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__OpcionalTipoResponse(struct soap *soap, const char *URL, afip3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__OpcionalTipoResponse(struct soap *soap, const char *URL, afip3__OpcionalTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:OpcionalTipoResponse", p->soap_type() == SOAP_TYPE_afip3__OpcionalTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__OpcionalTipoResponse * SOAP_FMAC4 soap_get_afip3__OpcionalTipoResponse(struct soap*, afip3__OpcionalTipoResponse *, const char*, const char*);

inline int soap_read_afip3__OpcionalTipoResponse(struct soap *soap, afip3__OpcionalTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__OpcionalTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__OpcionalTipoResponse(struct soap *soap, const char *URL, afip3__OpcionalTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__OpcionalTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__OpcionalTipoResponse(struct soap *soap, afip3__OpcionalTipoResponse *p)
{
	if (::soap_read_afip3__OpcionalTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__IvaTipo_DEFINED
#define SOAP_TYPE_afip3__IvaTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__IvaTipo(struct soap*, const char*, int, const afip3__IvaTipo *, const char*);
SOAP_FMAC3 afip3__IvaTipo * SOAP_FMAC4 soap_in_afip3__IvaTipo(struct soap*, const char*, afip3__IvaTipo *, const char*);
SOAP_FMAC1 afip3__IvaTipo * SOAP_FMAC2 soap_instantiate_afip3__IvaTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__IvaTipo * soap_new_afip3__IvaTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__IvaTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__IvaTipo * soap_new_req_afip3__IvaTipo(
	struct soap *soap)
{
	afip3__IvaTipo *_p = ::soap_new_afip3__IvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__IvaTipo * soap_new_set_afip3__IvaTipo(
	struct soap *soap,
	std::string *Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	afip3__IvaTipo *_p = ::soap_new_afip3__IvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__IvaTipo::Id = Id;
		_p->afip3__IvaTipo::Desc = Desc;
		_p->afip3__IvaTipo::FchDesde = FchDesde;
		_p->afip3__IvaTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_afip3__IvaTipo(struct soap *soap, afip3__IvaTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:IvaTipo", p->soap_type() == SOAP_TYPE_afip3__IvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__IvaTipo(struct soap *soap, const char *URL, afip3__IvaTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:IvaTipo", p->soap_type() == SOAP_TYPE_afip3__IvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__IvaTipo(struct soap *soap, const char *URL, afip3__IvaTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:IvaTipo", p->soap_type() == SOAP_TYPE_afip3__IvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__IvaTipo(struct soap *soap, const char *URL, afip3__IvaTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:IvaTipo", p->soap_type() == SOAP_TYPE_afip3__IvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__IvaTipo * SOAP_FMAC4 soap_get_afip3__IvaTipo(struct soap*, afip3__IvaTipo *, const char*, const char*);

inline int soap_read_afip3__IvaTipo(struct soap *soap, afip3__IvaTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__IvaTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__IvaTipo(struct soap *soap, const char *URL, afip3__IvaTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__IvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__IvaTipo(struct soap *soap, afip3__IvaTipo *p)
{
	if (::soap_read_afip3__IvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfIvaTipo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfIvaTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfIvaTipo(struct soap*, const char*, int, const afip3__ArrayOfIvaTipo *, const char*);
SOAP_FMAC3 afip3__ArrayOfIvaTipo * SOAP_FMAC4 soap_in_afip3__ArrayOfIvaTipo(struct soap*, const char*, afip3__ArrayOfIvaTipo *, const char*);
SOAP_FMAC1 afip3__ArrayOfIvaTipo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfIvaTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfIvaTipo * soap_new_afip3__ArrayOfIvaTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfIvaTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfIvaTipo * soap_new_req_afip3__ArrayOfIvaTipo(
	struct soap *soap)
{
	afip3__ArrayOfIvaTipo *_p = ::soap_new_afip3__ArrayOfIvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfIvaTipo * soap_new_set_afip3__ArrayOfIvaTipo(
	struct soap *soap,
	const std::vector<afip3__IvaTipo *> & IvaTipo)
{
	afip3__ArrayOfIvaTipo *_p = ::soap_new_afip3__ArrayOfIvaTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfIvaTipo::IvaTipo = IvaTipo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfIvaTipo(struct soap *soap, afip3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfIvaTipo(struct soap *soap, const char *URL, afip3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfIvaTipo(struct soap *soap, const char *URL, afip3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfIvaTipo(struct soap *soap, const char *URL, afip3__ArrayOfIvaTipo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfIvaTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfIvaTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfIvaTipo * SOAP_FMAC4 soap_get_afip3__ArrayOfIvaTipo(struct soap*, afip3__ArrayOfIvaTipo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfIvaTipo(struct soap *soap, afip3__ArrayOfIvaTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfIvaTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfIvaTipo(struct soap *soap, const char *URL, afip3__ArrayOfIvaTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfIvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfIvaTipo(struct soap *soap, afip3__ArrayOfIvaTipo *p)
{
	if (::soap_read_afip3__ArrayOfIvaTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__IvaTipoResponse_DEFINED
#define SOAP_TYPE_afip3__IvaTipoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__IvaTipoResponse(struct soap*, const char*, int, const afip3__IvaTipoResponse *, const char*);
SOAP_FMAC3 afip3__IvaTipoResponse * SOAP_FMAC4 soap_in_afip3__IvaTipoResponse(struct soap*, const char*, afip3__IvaTipoResponse *, const char*);
SOAP_FMAC1 afip3__IvaTipoResponse * SOAP_FMAC2 soap_instantiate_afip3__IvaTipoResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__IvaTipoResponse * soap_new_afip3__IvaTipoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__IvaTipoResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__IvaTipoResponse * soap_new_req_afip3__IvaTipoResponse(
	struct soap *soap)
{
	afip3__IvaTipoResponse *_p = ::soap_new_afip3__IvaTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__IvaTipoResponse * soap_new_set_afip3__IvaTipoResponse(
	struct soap *soap,
	afip3__ArrayOfIvaTipo *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__IvaTipoResponse *_p = ::soap_new_afip3__IvaTipoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__IvaTipoResponse::ResultGet = ResultGet;
		_p->afip3__IvaTipoResponse::Errors = Errors;
		_p->afip3__IvaTipoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__IvaTipoResponse(struct soap *soap, afip3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__IvaTipoResponse(struct soap *soap, const char *URL, afip3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__IvaTipoResponse(struct soap *soap, const char *URL, afip3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__IvaTipoResponse(struct soap *soap, const char *URL, afip3__IvaTipoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:IvaTipoResponse", p->soap_type() == SOAP_TYPE_afip3__IvaTipoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__IvaTipoResponse * SOAP_FMAC4 soap_get_afip3__IvaTipoResponse(struct soap*, afip3__IvaTipoResponse *, const char*, const char*);

inline int soap_read_afip3__IvaTipoResponse(struct soap *soap, afip3__IvaTipoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__IvaTipoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__IvaTipoResponse(struct soap *soap, const char *URL, afip3__IvaTipoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__IvaTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__IvaTipoResponse(struct soap *soap, afip3__IvaTipoResponse *p)
{
	if (::soap_read_afip3__IvaTipoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Moneda_DEFINED
#define SOAP_TYPE_afip3__Moneda_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Moneda(struct soap*, const char*, int, const afip3__Moneda *, const char*);
SOAP_FMAC3 afip3__Moneda * SOAP_FMAC4 soap_in_afip3__Moneda(struct soap*, const char*, afip3__Moneda *, const char*);
SOAP_FMAC1 afip3__Moneda * SOAP_FMAC2 soap_instantiate_afip3__Moneda(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Moneda * soap_new_afip3__Moneda(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Moneda(soap, n, NULL, NULL, NULL);
}

inline afip3__Moneda * soap_new_req_afip3__Moneda(
	struct soap *soap)
{
	afip3__Moneda *_p = ::soap_new_afip3__Moneda(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__Moneda * soap_new_set_afip3__Moneda(
	struct soap *soap,
	std::string *Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	afip3__Moneda *_p = ::soap_new_afip3__Moneda(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Moneda::Id = Id;
		_p->afip3__Moneda::Desc = Desc;
		_p->afip3__Moneda::FchDesde = FchDesde;
		_p->afip3__Moneda::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_afip3__Moneda(struct soap *soap, afip3__Moneda const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Moneda", p->soap_type() == SOAP_TYPE_afip3__Moneda ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Moneda(struct soap *soap, const char *URL, afip3__Moneda const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Moneda", p->soap_type() == SOAP_TYPE_afip3__Moneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Moneda(struct soap *soap, const char *URL, afip3__Moneda const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Moneda", p->soap_type() == SOAP_TYPE_afip3__Moneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Moneda(struct soap *soap, const char *URL, afip3__Moneda const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Moneda", p->soap_type() == SOAP_TYPE_afip3__Moneda ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Moneda * SOAP_FMAC4 soap_get_afip3__Moneda(struct soap*, afip3__Moneda *, const char*, const char*);

inline int soap_read_afip3__Moneda(struct soap *soap, afip3__Moneda *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Moneda(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Moneda(struct soap *soap, const char *URL, afip3__Moneda *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Moneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Moneda(struct soap *soap, afip3__Moneda *p)
{
	if (::soap_read_afip3__Moneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfMoneda_DEFINED
#define SOAP_TYPE_afip3__ArrayOfMoneda_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfMoneda(struct soap*, const char*, int, const afip3__ArrayOfMoneda *, const char*);
SOAP_FMAC3 afip3__ArrayOfMoneda * SOAP_FMAC4 soap_in_afip3__ArrayOfMoneda(struct soap*, const char*, afip3__ArrayOfMoneda *, const char*);
SOAP_FMAC1 afip3__ArrayOfMoneda * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfMoneda(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfMoneda * soap_new_afip3__ArrayOfMoneda(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfMoneda(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfMoneda * soap_new_req_afip3__ArrayOfMoneda(
	struct soap *soap)
{
	afip3__ArrayOfMoneda *_p = ::soap_new_afip3__ArrayOfMoneda(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfMoneda * soap_new_set_afip3__ArrayOfMoneda(
	struct soap *soap,
	const std::vector<afip3__Moneda *> & Moneda)
{
	afip3__ArrayOfMoneda *_p = ::soap_new_afip3__ArrayOfMoneda(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfMoneda::Moneda = Moneda;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfMoneda(struct soap *soap, afip3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfMoneda(struct soap *soap, const char *URL, afip3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfMoneda(struct soap *soap, const char *URL, afip3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfMoneda(struct soap *soap, const char *URL, afip3__ArrayOfMoneda const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfMoneda", p->soap_type() == SOAP_TYPE_afip3__ArrayOfMoneda ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfMoneda * SOAP_FMAC4 soap_get_afip3__ArrayOfMoneda(struct soap*, afip3__ArrayOfMoneda *, const char*, const char*);

inline int soap_read_afip3__ArrayOfMoneda(struct soap *soap, afip3__ArrayOfMoneda *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfMoneda(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfMoneda(struct soap *soap, const char *URL, afip3__ArrayOfMoneda *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfMoneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfMoneda(struct soap *soap, afip3__ArrayOfMoneda *p)
{
	if (::soap_read_afip3__ArrayOfMoneda(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__MonedaResponse_DEFINED
#define SOAP_TYPE_afip3__MonedaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__MonedaResponse(struct soap*, const char*, int, const afip3__MonedaResponse *, const char*);
SOAP_FMAC3 afip3__MonedaResponse * SOAP_FMAC4 soap_in_afip3__MonedaResponse(struct soap*, const char*, afip3__MonedaResponse *, const char*);
SOAP_FMAC1 afip3__MonedaResponse * SOAP_FMAC2 soap_instantiate_afip3__MonedaResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__MonedaResponse * soap_new_afip3__MonedaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__MonedaResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__MonedaResponse * soap_new_req_afip3__MonedaResponse(
	struct soap *soap)
{
	afip3__MonedaResponse *_p = ::soap_new_afip3__MonedaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__MonedaResponse * soap_new_set_afip3__MonedaResponse(
	struct soap *soap,
	afip3__ArrayOfMoneda *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__MonedaResponse *_p = ::soap_new_afip3__MonedaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__MonedaResponse::ResultGet = ResultGet;
		_p->afip3__MonedaResponse::Errors = Errors;
		_p->afip3__MonedaResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__MonedaResponse(struct soap *soap, afip3__MonedaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip3__MonedaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__MonedaResponse(struct soap *soap, const char *URL, afip3__MonedaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip3__MonedaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__MonedaResponse(struct soap *soap, const char *URL, afip3__MonedaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip3__MonedaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__MonedaResponse(struct soap *soap, const char *URL, afip3__MonedaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:MonedaResponse", p->soap_type() == SOAP_TYPE_afip3__MonedaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__MonedaResponse * SOAP_FMAC4 soap_get_afip3__MonedaResponse(struct soap*, afip3__MonedaResponse *, const char*, const char*);

inline int soap_read_afip3__MonedaResponse(struct soap *soap, afip3__MonedaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__MonedaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__MonedaResponse(struct soap *soap, const char *URL, afip3__MonedaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__MonedaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__MonedaResponse(struct soap *soap, afip3__MonedaResponse *p)
{
	if (::soap_read_afip3__MonedaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__TributoTipo_DEFINED
#define SOAP_TYPE_afip3__TributoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__TributoTipo(struct soap*, const char*, int, const afip3__TributoTipo *, const char*);
SOAP_FMAC3 afip3__TributoTipo * SOAP_FMAC4 soap_in_afip3__TributoTipo(struct soap*, const char*, afip3__TributoTipo *, const char*);
SOAP_FMAC1 afip3__TributoTipo * SOAP_FMAC2 soap_instantiate_afip3__TributoTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__TributoTipo * soap_new_afip3__TributoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__TributoTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__TributoTipo * soap_new_req_afip3__TributoTipo(
	struct soap *soap,
	short Id)
{
	afip3__TributoTipo *_p = ::soap_new_afip3__TributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__TributoTipo::Id = Id;
	}
	return _p;
}

inline afip3__TributoTipo * soap_new_set_afip3__TributoTipo(
	struct soap *soap,
	short Id,
	std::string *Desc,
	std::string *FchDesde,
	std::string *FchHasta)
{
	afip3__TributoTipo *_p = ::soap_new_afip3__TributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__TributoTipo::Id = Id;
		_p->afip3__TributoTipo::Desc = Desc;
		_p->afip3__TributoTipo::FchDesde = FchDesde;
		_p->afip3__TributoTipo::FchHasta = FchHasta;
	}
	return _p;
}

inline int soap_write_afip3__TributoTipo(struct soap *soap, afip3__TributoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:TributoTipo", p->soap_type() == SOAP_TYPE_afip3__TributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__TributoTipo(struct soap *soap, const char *URL, afip3__TributoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:TributoTipo", p->soap_type() == SOAP_TYPE_afip3__TributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__TributoTipo(struct soap *soap, const char *URL, afip3__TributoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:TributoTipo", p->soap_type() == SOAP_TYPE_afip3__TributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__TributoTipo(struct soap *soap, const char *URL, afip3__TributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:TributoTipo", p->soap_type() == SOAP_TYPE_afip3__TributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__TributoTipo * SOAP_FMAC4 soap_get_afip3__TributoTipo(struct soap*, afip3__TributoTipo *, const char*, const char*);

inline int soap_read_afip3__TributoTipo(struct soap *soap, afip3__TributoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__TributoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__TributoTipo(struct soap *soap, const char *URL, afip3__TributoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__TributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__TributoTipo(struct soap *soap, afip3__TributoTipo *p)
{
	if (::soap_read_afip3__TributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfTributoTipo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfTributoTipo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfTributoTipo(struct soap*, const char*, int, const afip3__ArrayOfTributoTipo *, const char*);
SOAP_FMAC3 afip3__ArrayOfTributoTipo * SOAP_FMAC4 soap_in_afip3__ArrayOfTributoTipo(struct soap*, const char*, afip3__ArrayOfTributoTipo *, const char*);
SOAP_FMAC1 afip3__ArrayOfTributoTipo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfTributoTipo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfTributoTipo * soap_new_afip3__ArrayOfTributoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfTributoTipo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfTributoTipo * soap_new_req_afip3__ArrayOfTributoTipo(
	struct soap *soap)
{
	afip3__ArrayOfTributoTipo *_p = ::soap_new_afip3__ArrayOfTributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfTributoTipo * soap_new_set_afip3__ArrayOfTributoTipo(
	struct soap *soap,
	const std::vector<afip3__TributoTipo *> & TributoTipo)
{
	afip3__ArrayOfTributoTipo *_p = ::soap_new_afip3__ArrayOfTributoTipo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfTributoTipo::TributoTipo = TributoTipo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfTributoTipo(struct soap *soap, afip3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfTributoTipo(struct soap *soap, const char *URL, afip3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfTributoTipo(struct soap *soap, const char *URL, afip3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfTributoTipo(struct soap *soap, const char *URL, afip3__ArrayOfTributoTipo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfTributoTipo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributoTipo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfTributoTipo * SOAP_FMAC4 soap_get_afip3__ArrayOfTributoTipo(struct soap*, afip3__ArrayOfTributoTipo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfTributoTipo(struct soap *soap, afip3__ArrayOfTributoTipo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfTributoTipo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfTributoTipo(struct soap *soap, const char *URL, afip3__ArrayOfTributoTipo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfTributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfTributoTipo(struct soap *soap, afip3__ArrayOfTributoTipo *p)
{
	if (::soap_read_afip3__ArrayOfTributoTipo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FETributoResponse_DEFINED
#define SOAP_TYPE_afip3__FETributoResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FETributoResponse(struct soap*, const char*, int, const afip3__FETributoResponse *, const char*);
SOAP_FMAC3 afip3__FETributoResponse * SOAP_FMAC4 soap_in_afip3__FETributoResponse(struct soap*, const char*, afip3__FETributoResponse *, const char*);
SOAP_FMAC1 afip3__FETributoResponse * SOAP_FMAC2 soap_instantiate_afip3__FETributoResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FETributoResponse * soap_new_afip3__FETributoResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FETributoResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FETributoResponse * soap_new_req_afip3__FETributoResponse(
	struct soap *soap)
{
	afip3__FETributoResponse *_p = ::soap_new_afip3__FETributoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FETributoResponse * soap_new_set_afip3__FETributoResponse(
	struct soap *soap,
	afip3__ArrayOfTributoTipo *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FETributoResponse *_p = ::soap_new_afip3__FETributoResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FETributoResponse::ResultGet = ResultGet;
		_p->afip3__FETributoResponse::Errors = Errors;
		_p->afip3__FETributoResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FETributoResponse(struct soap *soap, afip3__FETributoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip3__FETributoResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FETributoResponse(struct soap *soap, const char *URL, afip3__FETributoResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip3__FETributoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FETributoResponse(struct soap *soap, const char *URL, afip3__FETributoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip3__FETributoResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FETributoResponse(struct soap *soap, const char *URL, afip3__FETributoResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FETributoResponse", p->soap_type() == SOAP_TYPE_afip3__FETributoResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FETributoResponse * SOAP_FMAC4 soap_get_afip3__FETributoResponse(struct soap*, afip3__FETributoResponse *, const char*, const char*);

inline int soap_read_afip3__FETributoResponse(struct soap *soap, afip3__FETributoResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FETributoResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FETributoResponse(struct soap *soap, const char *URL, afip3__FETributoResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FETributoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FETributoResponse(struct soap *soap, afip3__FETributoResponse *p)
{
	if (::soap_read_afip3__FETributoResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Cotizacion_DEFINED
#define SOAP_TYPE_afip3__Cotizacion_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Cotizacion(struct soap*, const char*, int, const afip3__Cotizacion *, const char*);
SOAP_FMAC3 afip3__Cotizacion * SOAP_FMAC4 soap_in_afip3__Cotizacion(struct soap*, const char*, afip3__Cotizacion *, const char*);
SOAP_FMAC1 afip3__Cotizacion * SOAP_FMAC2 soap_instantiate_afip3__Cotizacion(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Cotizacion * soap_new_afip3__Cotizacion(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Cotizacion(soap, n, NULL, NULL, NULL);
}

inline afip3__Cotizacion * soap_new_req_afip3__Cotizacion(
	struct soap *soap,
	double MonCotiz)
{
	afip3__Cotizacion *_p = ::soap_new_afip3__Cotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Cotizacion::MonCotiz = MonCotiz;
	}
	return _p;
}

inline afip3__Cotizacion * soap_new_set_afip3__Cotizacion(
	struct soap *soap,
	std::string *MonId,
	double MonCotiz,
	std::string *FchCotiz)
{
	afip3__Cotizacion *_p = ::soap_new_afip3__Cotizacion(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Cotizacion::MonId = MonId;
		_p->afip3__Cotizacion::MonCotiz = MonCotiz;
		_p->afip3__Cotizacion::FchCotiz = FchCotiz;
	}
	return _p;
}

inline int soap_write_afip3__Cotizacion(struct soap *soap, afip3__Cotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Cotizacion", p->soap_type() == SOAP_TYPE_afip3__Cotizacion ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Cotizacion(struct soap *soap, const char *URL, afip3__Cotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Cotizacion", p->soap_type() == SOAP_TYPE_afip3__Cotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Cotizacion(struct soap *soap, const char *URL, afip3__Cotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Cotizacion", p->soap_type() == SOAP_TYPE_afip3__Cotizacion ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Cotizacion(struct soap *soap, const char *URL, afip3__Cotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Cotizacion", p->soap_type() == SOAP_TYPE_afip3__Cotizacion ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Cotizacion * SOAP_FMAC4 soap_get_afip3__Cotizacion(struct soap*, afip3__Cotizacion *, const char*, const char*);

inline int soap_read_afip3__Cotizacion(struct soap *soap, afip3__Cotizacion *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Cotizacion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Cotizacion(struct soap *soap, const char *URL, afip3__Cotizacion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Cotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Cotizacion(struct soap *soap, afip3__Cotizacion *p)
{
	if (::soap_read_afip3__Cotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECotizacionResponse_DEFINED
#define SOAP_TYPE_afip3__FECotizacionResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECotizacionResponse(struct soap*, const char*, int, const afip3__FECotizacionResponse *, const char*);
SOAP_FMAC3 afip3__FECotizacionResponse * SOAP_FMAC4 soap_in_afip3__FECotizacionResponse(struct soap*, const char*, afip3__FECotizacionResponse *, const char*);
SOAP_FMAC1 afip3__FECotizacionResponse * SOAP_FMAC2 soap_instantiate_afip3__FECotizacionResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECotizacionResponse * soap_new_afip3__FECotizacionResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECotizacionResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECotizacionResponse * soap_new_req_afip3__FECotizacionResponse(
	struct soap *soap)
{
	afip3__FECotizacionResponse *_p = ::soap_new_afip3__FECotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECotizacionResponse * soap_new_set_afip3__FECotizacionResponse(
	struct soap *soap,
	afip3__Cotizacion *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FECotizacionResponse *_p = ::soap_new_afip3__FECotizacionResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECotizacionResponse::ResultGet = ResultGet;
		_p->afip3__FECotizacionResponse::Errors = Errors;
		_p->afip3__FECotizacionResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FECotizacionResponse(struct soap *soap, afip3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECotizacionResponse(struct soap *soap, const char *URL, afip3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECotizacionResponse(struct soap *soap, const char *URL, afip3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECotizacionResponse(struct soap *soap, const char *URL, afip3__FECotizacionResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECotizacionResponse", p->soap_type() == SOAP_TYPE_afip3__FECotizacionResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECotizacionResponse * SOAP_FMAC4 soap_get_afip3__FECotizacionResponse(struct soap*, afip3__FECotizacionResponse *, const char*, const char*);

inline int soap_read_afip3__FECotizacionResponse(struct soap *soap, afip3__FECotizacionResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECotizacionResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECotizacionResponse(struct soap *soap, const char *URL, afip3__FECotizacionResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECotizacionResponse(struct soap *soap, afip3__FECotizacionResponse *p)
{
	if (::soap_read_afip3__FECotizacionResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEASinMovResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEASinMovResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEASinMovResponse(struct soap*, const char*, int, const afip3__FECAEASinMovResponse *, const char*);
SOAP_FMAC3 afip3__FECAEASinMovResponse * SOAP_FMAC4 soap_in_afip3__FECAEASinMovResponse(struct soap*, const char*, afip3__FECAEASinMovResponse *, const char*);
SOAP_FMAC1 afip3__FECAEASinMovResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEASinMovResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEASinMovResponse * soap_new_afip3__FECAEASinMovResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEASinMovResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEASinMovResponse * soap_new_req_afip3__FECAEASinMovResponse(
	struct soap *soap,
	int PtoVta__1)
{
	afip3__FECAEASinMovResponse *_p = ::soap_new_afip3__FECAEASinMovResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEASinMov::PtoVta = PtoVta__1;
	}
	return _p;
}

inline afip3__FECAEASinMovResponse * soap_new_set_afip3__FECAEASinMovResponse(
	struct soap *soap,
	std::string *Resultado,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events,
	std::string *CAEA__1,
	std::string *FchProceso__1,
	int PtoVta__1)
{
	afip3__FECAEASinMovResponse *_p = ::soap_new_afip3__FECAEASinMovResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEASinMovResponse::Resultado = Resultado;
		_p->afip3__FECAEASinMovResponse::Errors = Errors;
		_p->afip3__FECAEASinMovResponse::Events = Events;
		_p->afip3__FECAEASinMov::CAEA = CAEA__1;
		_p->afip3__FECAEASinMov::FchProceso = FchProceso__1;
		_p->afip3__FECAEASinMov::PtoVta = PtoVta__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAEASinMovResponse(struct soap *soap, afip3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEASinMovResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEASinMovResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEASinMovResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEASinMovResponse * SOAP_FMAC4 soap_get_afip3__FECAEASinMovResponse(struct soap*, afip3__FECAEASinMovResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEASinMovResponse(struct soap *soap, afip3__FECAEASinMovResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEASinMovResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEASinMovResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEASinMovResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEASinMovResponse(struct soap *soap, afip3__FECAEASinMovResponse *p)
{
	if (::soap_read_afip3__FECAEASinMovResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEASinMov_DEFINED
#define SOAP_TYPE_afip3__FECAEASinMov_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEASinMov(struct soap*, const char*, int, const afip3__FECAEASinMov *, const char*);
SOAP_FMAC3 afip3__FECAEASinMov * SOAP_FMAC4 soap_in_afip3__FECAEASinMov(struct soap*, const char*, afip3__FECAEASinMov *, const char*);
SOAP_FMAC1 afip3__FECAEASinMov * SOAP_FMAC2 soap_instantiate_afip3__FECAEASinMov(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEASinMov * soap_new_afip3__FECAEASinMov(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEASinMov(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEASinMov * soap_new_req_afip3__FECAEASinMov(
	struct soap *soap,
	int PtoVta)
{
	afip3__FECAEASinMov *_p = ::soap_new_afip3__FECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEASinMov::PtoVta = PtoVta;
	}
	return _p;
}

inline afip3__FECAEASinMov * soap_new_set_afip3__FECAEASinMov(
	struct soap *soap,
	std::string *CAEA,
	std::string *FchProceso,
	int PtoVta)
{
	afip3__FECAEASinMov *_p = ::soap_new_afip3__FECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEASinMov::CAEA = CAEA;
		_p->afip3__FECAEASinMov::FchProceso = FchProceso;
		_p->afip3__FECAEASinMov::PtoVta = PtoVta;
	}
	return _p;
}

inline int soap_write_afip3__FECAEASinMov(struct soap *soap, afip3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEASinMov(struct soap *soap, const char *URL, afip3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEASinMov(struct soap *soap, const char *URL, afip3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEASinMov(struct soap *soap, const char *URL, afip3__FECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEASinMov * SOAP_FMAC4 soap_get_afip3__FECAEASinMov(struct soap*, afip3__FECAEASinMov *, const char*, const char*);

inline int soap_read_afip3__FECAEASinMov(struct soap *soap, afip3__FECAEASinMov *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEASinMov(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEASinMov(struct soap *soap, const char *URL, afip3__FECAEASinMov *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEASinMov(struct soap *soap, afip3__FECAEASinMov *p)
{
	if (::soap_read_afip3__FECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfFECAEASinMov_DEFINED
#define SOAP_TYPE_afip3__ArrayOfFECAEASinMov_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfFECAEASinMov(struct soap*, const char*, int, const afip3__ArrayOfFECAEASinMov *, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEASinMov * SOAP_FMAC4 soap_in_afip3__ArrayOfFECAEASinMov(struct soap*, const char*, afip3__ArrayOfFECAEASinMov *, const char*);
SOAP_FMAC1 afip3__ArrayOfFECAEASinMov * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfFECAEASinMov(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfFECAEASinMov * soap_new_afip3__ArrayOfFECAEASinMov(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfFECAEASinMov(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfFECAEASinMov * soap_new_req_afip3__ArrayOfFECAEASinMov(
	struct soap *soap)
{
	afip3__ArrayOfFECAEASinMov *_p = ::soap_new_afip3__ArrayOfFECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfFECAEASinMov * soap_new_set_afip3__ArrayOfFECAEASinMov(
	struct soap *soap,
	const std::vector<afip3__FECAEASinMov *> & FECAEASinMov)
{
	afip3__ArrayOfFECAEASinMov *_p = ::soap_new_afip3__ArrayOfFECAEASinMov(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfFECAEASinMov::FECAEASinMov = FECAEASinMov;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfFECAEASinMov(struct soap *soap, afip3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, afip3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, afip3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, afip3__ArrayOfFECAEASinMov const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEASinMov", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEASinMov ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfFECAEASinMov * SOAP_FMAC4 soap_get_afip3__ArrayOfFECAEASinMov(struct soap*, afip3__ArrayOfFECAEASinMov *, const char*, const char*);

inline int soap_read_afip3__ArrayOfFECAEASinMov(struct soap *soap, afip3__ArrayOfFECAEASinMov *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfFECAEASinMov(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfFECAEASinMov(struct soap *soap, const char *URL, afip3__ArrayOfFECAEASinMov *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfFECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfFECAEASinMov(struct soap *soap, afip3__ArrayOfFECAEASinMov *p)
{
	if (::soap_read_afip3__ArrayOfFECAEASinMov(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEASinMovConsResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEASinMovConsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEASinMovConsResponse(struct soap*, const char*, int, const afip3__FECAEASinMovConsResponse *, const char*);
SOAP_FMAC3 afip3__FECAEASinMovConsResponse * SOAP_FMAC4 soap_in_afip3__FECAEASinMovConsResponse(struct soap*, const char*, afip3__FECAEASinMovConsResponse *, const char*);
SOAP_FMAC1 afip3__FECAEASinMovConsResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEASinMovConsResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEASinMovConsResponse * soap_new_afip3__FECAEASinMovConsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEASinMovConsResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEASinMovConsResponse * soap_new_req_afip3__FECAEASinMovConsResponse(
	struct soap *soap)
{
	afip3__FECAEASinMovConsResponse *_p = ::soap_new_afip3__FECAEASinMovConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECAEASinMovConsResponse * soap_new_set_afip3__FECAEASinMovConsResponse(
	struct soap *soap,
	afip3__ArrayOfFECAEASinMov *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FECAEASinMovConsResponse *_p = ::soap_new_afip3__FECAEASinMovConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEASinMovConsResponse::ResultGet = ResultGet;
		_p->afip3__FECAEASinMovConsResponse::Errors = Errors;
		_p->afip3__FECAEASinMovConsResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FECAEASinMovConsResponse(struct soap *soap, afip3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovConsResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEASinMovConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEASinMovConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEASinMovConsResponse * SOAP_FMAC4 soap_get_afip3__FECAEASinMovConsResponse(struct soap*, afip3__FECAEASinMovConsResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEASinMovConsResponse(struct soap *soap, afip3__FECAEASinMovConsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEASinMovConsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEASinMovConsResponse(struct soap *soap, const char *URL, afip3__FECAEASinMovConsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEASinMovConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEASinMovConsResponse(struct soap *soap, afip3__FECAEASinMovConsResponse *p)
{
	if (::soap_read_afip3__FECAEASinMovConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEAGet_DEFINED
#define SOAP_TYPE_afip3__FECAEAGet_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEAGet(struct soap*, const char*, int, const afip3__FECAEAGet *, const char*);
SOAP_FMAC3 afip3__FECAEAGet * SOAP_FMAC4 soap_in_afip3__FECAEAGet(struct soap*, const char*, afip3__FECAEAGet *, const char*);
SOAP_FMAC1 afip3__FECAEAGet * SOAP_FMAC2 soap_instantiate_afip3__FECAEAGet(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEAGet * soap_new_afip3__FECAEAGet(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEAGet(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEAGet * soap_new_req_afip3__FECAEAGet(
	struct soap *soap,
	int Periodo,
	short Orden)
{
	afip3__FECAEAGet *_p = ::soap_new_afip3__FECAEAGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEAGet::Periodo = Periodo;
		_p->afip3__FECAEAGet::Orden = Orden;
	}
	return _p;
}

inline afip3__FECAEAGet * soap_new_set_afip3__FECAEAGet(
	struct soap *soap,
	std::string *CAEA,
	int Periodo,
	short Orden,
	std::string *FchVigDesde,
	std::string *FchVigHasta,
	std::string *FchTopeInf,
	std::string *FchProceso,
	afip3__ArrayOfObs *Observaciones)
{
	afip3__FECAEAGet *_p = ::soap_new_afip3__FECAEAGet(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEAGet::CAEA = CAEA;
		_p->afip3__FECAEAGet::Periodo = Periodo;
		_p->afip3__FECAEAGet::Orden = Orden;
		_p->afip3__FECAEAGet::FchVigDesde = FchVigDesde;
		_p->afip3__FECAEAGet::FchVigHasta = FchVigHasta;
		_p->afip3__FECAEAGet::FchTopeInf = FchTopeInf;
		_p->afip3__FECAEAGet::FchProceso = FchProceso;
		_p->afip3__FECAEAGet::Observaciones = Observaciones;
	}
	return _p;
}

inline int soap_write_afip3__FECAEAGet(struct soap *soap, afip3__FECAEAGet const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip3__FECAEAGet ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEAGet(struct soap *soap, const char *URL, afip3__FECAEAGet const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip3__FECAEAGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEAGet(struct soap *soap, const char *URL, afip3__FECAEAGet const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip3__FECAEAGet ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEAGet(struct soap *soap, const char *URL, afip3__FECAEAGet const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAGet", p->soap_type() == SOAP_TYPE_afip3__FECAEAGet ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEAGet * SOAP_FMAC4 soap_get_afip3__FECAEAGet(struct soap*, afip3__FECAEAGet *, const char*, const char*);

inline int soap_read_afip3__FECAEAGet(struct soap *soap, afip3__FECAEAGet *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEAGet(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEAGet(struct soap *soap, const char *URL, afip3__FECAEAGet *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEAGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEAGet(struct soap *soap, afip3__FECAEAGet *p)
{
	if (::soap_read_afip3__FECAEAGet(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEAGetResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEAGetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEAGetResponse(struct soap*, const char*, int, const afip3__FECAEAGetResponse *, const char*);
SOAP_FMAC3 afip3__FECAEAGetResponse * SOAP_FMAC4 soap_in_afip3__FECAEAGetResponse(struct soap*, const char*, afip3__FECAEAGetResponse *, const char*);
SOAP_FMAC1 afip3__FECAEAGetResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEAGetResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEAGetResponse * soap_new_afip3__FECAEAGetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEAGetResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEAGetResponse * soap_new_req_afip3__FECAEAGetResponse(
	struct soap *soap)
{
	afip3__FECAEAGetResponse *_p = ::soap_new_afip3__FECAEAGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECAEAGetResponse * soap_new_set_afip3__FECAEAGetResponse(
	struct soap *soap,
	afip3__FECAEAGet *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FECAEAGetResponse *_p = ::soap_new_afip3__FECAEAGetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEAGetResponse::ResultGet = ResultGet;
		_p->afip3__FECAEAGetResponse::Errors = Errors;
		_p->afip3__FECAEAGetResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FECAEAGetResponse(struct soap *soap, afip3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEAGetResponse(struct soap *soap, const char *URL, afip3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEAGetResponse(struct soap *soap, const char *URL, afip3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEAGetResponse(struct soap *soap, const char *URL, afip3__FECAEAGetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAGetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAGetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEAGetResponse * SOAP_FMAC4 soap_get_afip3__FECAEAGetResponse(struct soap*, afip3__FECAEAGetResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEAGetResponse(struct soap *soap, afip3__FECAEAGetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEAGetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEAGetResponse(struct soap *soap, const char *URL, afip3__FECAEAGetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEAGetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEAGetResponse(struct soap *soap, afip3__FECAEAGetResponse *p)
{
	if (::soap_read_afip3__FECAEAGetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEADetResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEADetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEADetResponse(struct soap*, const char*, int, const afip3__FECAEADetResponse *, const char*);
SOAP_FMAC3 afip3__FECAEADetResponse * SOAP_FMAC4 soap_in_afip3__FECAEADetResponse(struct soap*, const char*, afip3__FECAEADetResponse *, const char*);
SOAP_FMAC1 afip3__FECAEADetResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEADetResponse * soap_new_afip3__FECAEADetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEADetResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEADetResponse * soap_new_req_afip3__FECAEADetResponse(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1)
{
	afip3__FECAEADetResponse *_p = ::soap_new_afip3__FECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetResponse::Concepto = Concepto__1;
		_p->afip3__FEDetResponse::DocTipo = DocTipo__1;
		_p->afip3__FEDetResponse::DocNro = DocNro__1;
		_p->afip3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetResponse::CbteHasta = CbteHasta__1;
	}
	return _p;
}

inline afip3__FECAEADetResponse * soap_new_set_afip3__FECAEADetResponse(
	struct soap *soap,
	std::string *CAEA,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	std::string *Resultado__1,
	afip3__ArrayOfObs *Observaciones__1)
{
	afip3__FECAEADetResponse *_p = ::soap_new_afip3__FECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEADetResponse::CAEA = CAEA;
		_p->afip3__FEDetResponse::Concepto = Concepto__1;
		_p->afip3__FEDetResponse::DocTipo = DocTipo__1;
		_p->afip3__FEDetResponse::DocNro = DocNro__1;
		_p->afip3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetResponse::CbteHasta = CbteHasta__1;
		_p->afip3__FEDetResponse::CbteFch = CbteFch__1;
		_p->afip3__FEDetResponse::Resultado = Resultado__1;
		_p->afip3__FEDetResponse::Observaciones = Observaciones__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAEADetResponse(struct soap *soap, afip3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEADetResponse(struct soap *soap, const char *URL, afip3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEADetResponse(struct soap *soap, const char *URL, afip3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEADetResponse(struct soap *soap, const char *URL, afip3__FECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEADetResponse * SOAP_FMAC4 soap_get_afip3__FECAEADetResponse(struct soap*, afip3__FECAEADetResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEADetResponse(struct soap *soap, afip3__FECAEADetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEADetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEADetResponse(struct soap *soap, const char *URL, afip3__FECAEADetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEADetResponse(struct soap *soap, afip3__FECAEADetResponse *p)
{
	if (::soap_read_afip3__FECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfFECAEADetResponse_DEFINED
#define SOAP_TYPE_afip3__ArrayOfFECAEADetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfFECAEADetResponse(struct soap*, const char*, int, const afip3__ArrayOfFECAEADetResponse *, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEADetResponse * SOAP_FMAC4 soap_in_afip3__ArrayOfFECAEADetResponse(struct soap*, const char*, afip3__ArrayOfFECAEADetResponse *, const char*);
SOAP_FMAC1 afip3__ArrayOfFECAEADetResponse * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfFECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfFECAEADetResponse * soap_new_afip3__ArrayOfFECAEADetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfFECAEADetResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfFECAEADetResponse * soap_new_req_afip3__ArrayOfFECAEADetResponse(
	struct soap *soap)
{
	afip3__ArrayOfFECAEADetResponse *_p = ::soap_new_afip3__ArrayOfFECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfFECAEADetResponse * soap_new_set_afip3__ArrayOfFECAEADetResponse(
	struct soap *soap,
	const std::vector<afip3__FECAEADetResponse *> & FECAEADetResponse)
{
	afip3__ArrayOfFECAEADetResponse *_p = ::soap_new_afip3__ArrayOfFECAEADetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfFECAEADetResponse::FECAEADetResponse = FECAEADetResponse;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfFECAEADetResponse(struct soap *soap, afip3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfFECAEADetResponse * SOAP_FMAC4 soap_get_afip3__ArrayOfFECAEADetResponse(struct soap*, afip3__ArrayOfFECAEADetResponse *, const char*, const char*);

inline int soap_read_afip3__ArrayOfFECAEADetResponse(struct soap *soap, afip3__ArrayOfFECAEADetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfFECAEADetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfFECAEADetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfFECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfFECAEADetResponse(struct soap *soap, afip3__ArrayOfFECAEADetResponse *p)
{
	if (::soap_read_afip3__ArrayOfFECAEADetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEACabResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEACabResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEACabResponse(struct soap*, const char*, int, const afip3__FECAEACabResponse *, const char*);
SOAP_FMAC3 afip3__FECAEACabResponse * SOAP_FMAC4 soap_in_afip3__FECAEACabResponse(struct soap*, const char*, afip3__FECAEACabResponse *, const char*);
SOAP_FMAC1 afip3__FECAEACabResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEACabResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEACabResponse * soap_new_afip3__FECAEACabResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEACabResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEACabResponse * soap_new_req_afip3__FECAEACabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	int CantReg__1)
{
	afip3__FECAEACabResponse *_p = ::soap_new_afip3__FECAEACabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabResponse::Cuit = Cuit__1;
		_p->afip3__FECabResponse::PtoVta = PtoVta__1;
		_p->afip3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->afip3__FECabResponse::CantReg = CantReg__1;
	}
	return _p;
}

inline afip3__FECAEACabResponse * soap_new_set_afip3__FECAEACabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	std::string *FchProceso__1,
	int CantReg__1,
	std::string *Resultado__1,
	std::string *Reproceso__1)
{
	afip3__FECAEACabResponse *_p = ::soap_new_afip3__FECAEACabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabResponse::Cuit = Cuit__1;
		_p->afip3__FECabResponse::PtoVta = PtoVta__1;
		_p->afip3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->afip3__FECabResponse::FchProceso = FchProceso__1;
		_p->afip3__FECabResponse::CantReg = CantReg__1;
		_p->afip3__FECabResponse::Resultado = Resultado__1;
		_p->afip3__FECabResponse::Reproceso = Reproceso__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAEACabResponse(struct soap *soap, afip3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEACabResponse(struct soap *soap, const char *URL, afip3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEACabResponse(struct soap *soap, const char *URL, afip3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEACabResponse(struct soap *soap, const char *URL, afip3__FECAEACabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEACabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEACabResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEACabResponse * SOAP_FMAC4 soap_get_afip3__FECAEACabResponse(struct soap*, afip3__FECAEACabResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEACabResponse(struct soap *soap, afip3__FECAEACabResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEACabResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEACabResponse(struct soap *soap, const char *URL, afip3__FECAEACabResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEACabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEACabResponse(struct soap *soap, afip3__FECAEACabResponse *p)
{
	if (::soap_read_afip3__FECAEACabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEAResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEAResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEAResponse(struct soap*, const char*, int, const afip3__FECAEAResponse *, const char*);
SOAP_FMAC3 afip3__FECAEAResponse * SOAP_FMAC4 soap_in_afip3__FECAEAResponse(struct soap*, const char*, afip3__FECAEAResponse *, const char*);
SOAP_FMAC1 afip3__FECAEAResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEAResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEAResponse * soap_new_afip3__FECAEAResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEAResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEAResponse * soap_new_req_afip3__FECAEAResponse(
	struct soap *soap)
{
	afip3__FECAEAResponse *_p = ::soap_new_afip3__FECAEAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECAEAResponse * soap_new_set_afip3__FECAEAResponse(
	struct soap *soap,
	afip3__FECAEACabResponse *FeCabResp,
	afip3__ArrayOfFECAEADetResponse *FeDetResp,
	afip3__ArrayOfEvt *Events,
	afip3__ArrayOfErr *Errors)
{
	afip3__FECAEAResponse *_p = ::soap_new_afip3__FECAEAResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEAResponse::FeCabResp = FeCabResp;
		_p->afip3__FECAEAResponse::FeDetResp = FeDetResp;
		_p->afip3__FECAEAResponse::Events = Events;
		_p->afip3__FECAEAResponse::Errors = Errors;
	}
	return _p;
}

inline int soap_write_afip3__FECAEAResponse(struct soap *soap, afip3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEAResponse(struct soap *soap, const char *URL, afip3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEAResponse(struct soap *soap, const char *URL, afip3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEAResponse(struct soap *soap, const char *URL, afip3__FECAEAResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEAResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEAResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEAResponse * SOAP_FMAC4 soap_get_afip3__FECAEAResponse(struct soap*, afip3__FECAEAResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEAResponse(struct soap *soap, afip3__FECAEAResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEAResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEAResponse(struct soap *soap, const char *URL, afip3__FECAEAResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEAResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEAResponse(struct soap *soap, afip3__FECAEAResponse *p)
{
	if (::soap_read_afip3__FECAEAResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEADetRequest_DEFINED
#define SOAP_TYPE_afip3__FECAEADetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEADetRequest(struct soap*, const char*, int, const afip3__FECAEADetRequest *, const char*);
SOAP_FMAC3 afip3__FECAEADetRequest * SOAP_FMAC4 soap_in_afip3__FECAEADetRequest(struct soap*, const char*, afip3__FECAEADetRequest *, const char*);
SOAP_FMAC1 afip3__FECAEADetRequest * SOAP_FMAC2 soap_instantiate_afip3__FECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEADetRequest * soap_new_afip3__FECAEADetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEADetRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEADetRequest * soap_new_req_afip3__FECAEADetRequest(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	double MonCotiz__1)
{
	afip3__FECAEADetRequest *_p = ::soap_new_afip3__FECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetRequest::Concepto = Concepto__1;
		_p->afip3__FEDetRequest::DocTipo = DocTipo__1;
		_p->afip3__FEDetRequest::DocNro = DocNro__1;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz__1;
	}
	return _p;
}

inline afip3__FECAEADetRequest * soap_new_set_afip3__FECAEADetRequest(
	struct soap *soap,
	std::string *CAEA,
	std::string *CbteFchHsGen,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	std::string *FchServDesde__1,
	std::string *FchServHasta__1,
	std::string *FchVtoPago__1,
	std::string *MonId__1,
	double MonCotiz__1,
	afip3__ArrayOfCbteAsoc *CbtesAsoc__1,
	afip3__ArrayOfTributo *Tributos__1,
	afip3__ArrayOfAlicIva *Iva__1,
	afip3__ArrayOfOpcional *Opcionales__1,
	afip3__ArrayOfComprador *Compradores__1)
{
	afip3__FECAEADetRequest *_p = ::soap_new_afip3__FECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEADetRequest::CAEA = CAEA;
		_p->afip3__FECAEADetRequest::CbteFchHsGen = CbteFchHsGen;
		_p->afip3__FEDetRequest::Concepto = Concepto__1;
		_p->afip3__FEDetRequest::DocTipo = DocTipo__1;
		_p->afip3__FEDetRequest::DocNro = DocNro__1;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->afip3__FEDetRequest::CbteFch = CbteFch__1;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->afip3__FEDetRequest::FchServDesde = FchServDesde__1;
		_p->afip3__FEDetRequest::FchServHasta = FchServHasta__1;
		_p->afip3__FEDetRequest::FchVtoPago = FchVtoPago__1;
		_p->afip3__FEDetRequest::MonId = MonId__1;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz__1;
		_p->afip3__FEDetRequest::CbtesAsoc = CbtesAsoc__1;
		_p->afip3__FEDetRequest::Tributos = Tributos__1;
		_p->afip3__FEDetRequest::Iva = Iva__1;
		_p->afip3__FEDetRequest::Opcionales = Opcionales__1;
		_p->afip3__FEDetRequest::Compradores = Compradores__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAEADetRequest(struct soap *soap, afip3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEADetRequest(struct soap *soap, const char *URL, afip3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEADetRequest(struct soap *soap, const char *URL, afip3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEADetRequest(struct soap *soap, const char *URL, afip3__FECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEADetRequest * SOAP_FMAC4 soap_get_afip3__FECAEADetRequest(struct soap*, afip3__FECAEADetRequest *, const char*, const char*);

inline int soap_read_afip3__FECAEADetRequest(struct soap *soap, afip3__FECAEADetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEADetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEADetRequest(struct soap *soap, const char *URL, afip3__FECAEADetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEADetRequest(struct soap *soap, afip3__FECAEADetRequest *p)
{
	if (::soap_read_afip3__FECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfFECAEADetRequest_DEFINED
#define SOAP_TYPE_afip3__ArrayOfFECAEADetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfFECAEADetRequest(struct soap*, const char*, int, const afip3__ArrayOfFECAEADetRequest *, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEADetRequest * SOAP_FMAC4 soap_in_afip3__ArrayOfFECAEADetRequest(struct soap*, const char*, afip3__ArrayOfFECAEADetRequest *, const char*);
SOAP_FMAC1 afip3__ArrayOfFECAEADetRequest * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfFECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfFECAEADetRequest * soap_new_afip3__ArrayOfFECAEADetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfFECAEADetRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfFECAEADetRequest * soap_new_req_afip3__ArrayOfFECAEADetRequest(
	struct soap *soap)
{
	afip3__ArrayOfFECAEADetRequest *_p = ::soap_new_afip3__ArrayOfFECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfFECAEADetRequest * soap_new_set_afip3__ArrayOfFECAEADetRequest(
	struct soap *soap,
	const std::vector<afip3__FECAEADetRequest *> & FECAEADetRequest)
{
	afip3__ArrayOfFECAEADetRequest *_p = ::soap_new_afip3__ArrayOfFECAEADetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfFECAEADetRequest::FECAEADetRequest = FECAEADetRequest;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfFECAEADetRequest(struct soap *soap, afip3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEADetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEADetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfFECAEADetRequest * SOAP_FMAC4 soap_get_afip3__ArrayOfFECAEADetRequest(struct soap*, afip3__ArrayOfFECAEADetRequest *, const char*, const char*);

inline int soap_read_afip3__ArrayOfFECAEADetRequest(struct soap *soap, afip3__ArrayOfFECAEADetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfFECAEADetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfFECAEADetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEADetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfFECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfFECAEADetRequest(struct soap *soap, afip3__ArrayOfFECAEADetRequest *p)
{
	if (::soap_read_afip3__ArrayOfFECAEADetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEACabRequest_DEFINED
#define SOAP_TYPE_afip3__FECAEACabRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEACabRequest(struct soap*, const char*, int, const afip3__FECAEACabRequest *, const char*);
SOAP_FMAC3 afip3__FECAEACabRequest * SOAP_FMAC4 soap_in_afip3__FECAEACabRequest(struct soap*, const char*, afip3__FECAEACabRequest *, const char*);
SOAP_FMAC1 afip3__FECAEACabRequest * SOAP_FMAC2 soap_instantiate_afip3__FECAEACabRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEACabRequest * soap_new_afip3__FECAEACabRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEACabRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEACabRequest * soap_new_req_afip3__FECAEACabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	afip3__FECAEACabRequest *_p = ::soap_new_afip3__FECAEACabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabRequest::CantReg = CantReg__1;
		_p->afip3__FECabRequest::PtoVta = PtoVta__1;
		_p->afip3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline afip3__FECAEACabRequest * soap_new_set_afip3__FECAEACabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	afip3__FECAEACabRequest *_p = ::soap_new_afip3__FECAEACabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabRequest::CantReg = CantReg__1;
		_p->afip3__FECabRequest::PtoVta = PtoVta__1;
		_p->afip3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAEACabRequest(struct soap *soap, afip3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEACabRequest(struct soap *soap, const char *URL, afip3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEACabRequest(struct soap *soap, const char *URL, afip3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEACabRequest(struct soap *soap, const char *URL, afip3__FECAEACabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEACabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEACabRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEACabRequest * SOAP_FMAC4 soap_get_afip3__FECAEACabRequest(struct soap*, afip3__FECAEACabRequest *, const char*, const char*);

inline int soap_read_afip3__FECAEACabRequest(struct soap *soap, afip3__FECAEACabRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEACabRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEACabRequest(struct soap *soap, const char *URL, afip3__FECAEACabRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEACabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEACabRequest(struct soap *soap, afip3__FECAEACabRequest *p)
{
	if (::soap_read_afip3__FECAEACabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEARequest_DEFINED
#define SOAP_TYPE_afip3__FECAEARequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEARequest(struct soap*, const char*, int, const afip3__FECAEARequest *, const char*);
SOAP_FMAC3 afip3__FECAEARequest * SOAP_FMAC4 soap_in_afip3__FECAEARequest(struct soap*, const char*, afip3__FECAEARequest *, const char*);
SOAP_FMAC1 afip3__FECAEARequest * SOAP_FMAC2 soap_instantiate_afip3__FECAEARequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEARequest * soap_new_afip3__FECAEARequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEARequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEARequest * soap_new_req_afip3__FECAEARequest(
	struct soap *soap)
{
	afip3__FECAEARequest *_p = ::soap_new_afip3__FECAEARequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECAEARequest * soap_new_set_afip3__FECAEARequest(
	struct soap *soap,
	afip3__FECAEACabRequest *FeCabReq,
	afip3__ArrayOfFECAEADetRequest *FeDetReq)
{
	afip3__FECAEARequest *_p = ::soap_new_afip3__FECAEARequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEARequest::FeCabReq = FeCabReq;
		_p->afip3__FECAEARequest::FeDetReq = FeDetReq;
	}
	return _p;
}

inline int soap_write_afip3__FECAEARequest(struct soap *soap, afip3__FECAEARequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip3__FECAEARequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEARequest(struct soap *soap, const char *URL, afip3__FECAEARequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip3__FECAEARequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEARequest(struct soap *soap, const char *URL, afip3__FECAEARequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip3__FECAEARequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEARequest(struct soap *soap, const char *URL, afip3__FECAEARequest const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEARequest", p->soap_type() == SOAP_TYPE_afip3__FECAEARequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEARequest * SOAP_FMAC4 soap_get_afip3__FECAEARequest(struct soap*, afip3__FECAEARequest *, const char*, const char*);

inline int soap_read_afip3__FECAEARequest(struct soap *soap, afip3__FECAEARequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEARequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEARequest(struct soap *soap, const char *URL, afip3__FECAEARequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEARequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEARequest(struct soap *soap, afip3__FECAEARequest *p)
{
	if (::soap_read_afip3__FECAEARequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECompConsResponse_DEFINED
#define SOAP_TYPE_afip3__FECompConsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECompConsResponse(struct soap*, const char*, int, const afip3__FECompConsResponse *, const char*);
SOAP_FMAC3 afip3__FECompConsResponse * SOAP_FMAC4 soap_in_afip3__FECompConsResponse(struct soap*, const char*, afip3__FECompConsResponse *, const char*);
SOAP_FMAC1 afip3__FECompConsResponse * SOAP_FMAC2 soap_instantiate_afip3__FECompConsResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECompConsResponse * soap_new_afip3__FECompConsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECompConsResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECompConsResponse * soap_new_req_afip3__FECompConsResponse(
	struct soap *soap,
	int PtoVta,
	int CbteTipo,
	int Concepto__2,
	int DocTipo__2,
	LONG64 DocNro__2,
	LONG64 CbteDesde__2,
	LONG64 CbteHasta__2,
	double ImpTotal__2,
	double ImpTotConc__2,
	double ImpNeto__2,
	double ImpOpEx__2,
	double ImpTrib__2,
	double ImpIVA__2,
	double MonCotiz__2)
{
	afip3__FECompConsResponse *_p = ::soap_new_afip3__FECompConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECompConsResponse::PtoVta = PtoVta;
		_p->afip3__FECompConsResponse::CbteTipo = CbteTipo;
		_p->afip3__FEDetRequest::Concepto = Concepto__2;
		_p->afip3__FEDetRequest::DocTipo = DocTipo__2;
		_p->afip3__FEDetRequest::DocNro = DocNro__2;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde__2;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta__2;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal__2;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc__2;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto__2;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx__2;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib__2;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA__2;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz__2;
	}
	return _p;
}

inline afip3__FECompConsResponse * soap_new_set_afip3__FECompConsResponse(
	struct soap *soap,
	std::string *Resultado,
	std::string *CodAutorizacion,
	std::string *EmisionTipo,
	std::string *FchVto,
	std::string *FchProceso,
	afip3__ArrayOfObs *Observaciones,
	int PtoVta,
	int CbteTipo,
	int Concepto__2,
	int DocTipo__2,
	LONG64 DocNro__2,
	LONG64 CbteDesde__2,
	LONG64 CbteHasta__2,
	std::string *CbteFch__2,
	double ImpTotal__2,
	double ImpTotConc__2,
	double ImpNeto__2,
	double ImpOpEx__2,
	double ImpTrib__2,
	double ImpIVA__2,
	std::string *FchServDesde__2,
	std::string *FchServHasta__2,
	std::string *FchVtoPago__2,
	std::string *MonId__2,
	double MonCotiz__2,
	afip3__ArrayOfCbteAsoc *CbtesAsoc__2,
	afip3__ArrayOfTributo *Tributos__2,
	afip3__ArrayOfAlicIva *Iva__2,
	afip3__ArrayOfOpcional *Opcionales__2,
	afip3__ArrayOfComprador *Compradores__2)
{
	afip3__FECompConsResponse *_p = ::soap_new_afip3__FECompConsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECompConsResponse::Resultado = Resultado;
		_p->afip3__FECompConsResponse::CodAutorizacion = CodAutorizacion;
		_p->afip3__FECompConsResponse::EmisionTipo = EmisionTipo;
		_p->afip3__FECompConsResponse::FchVto = FchVto;
		_p->afip3__FECompConsResponse::FchProceso = FchProceso;
		_p->afip3__FECompConsResponse::Observaciones = Observaciones;
		_p->afip3__FECompConsResponse::PtoVta = PtoVta;
		_p->afip3__FECompConsResponse::CbteTipo = CbteTipo;
		_p->afip3__FEDetRequest::Concepto = Concepto__2;
		_p->afip3__FEDetRequest::DocTipo = DocTipo__2;
		_p->afip3__FEDetRequest::DocNro = DocNro__2;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde__2;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta__2;
		_p->afip3__FEDetRequest::CbteFch = CbteFch__2;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal__2;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc__2;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto__2;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx__2;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib__2;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA__2;
		_p->afip3__FEDetRequest::FchServDesde = FchServDesde__2;
		_p->afip3__FEDetRequest::FchServHasta = FchServHasta__2;
		_p->afip3__FEDetRequest::FchVtoPago = FchVtoPago__2;
		_p->afip3__FEDetRequest::MonId = MonId__2;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz__2;
		_p->afip3__FEDetRequest::CbtesAsoc = CbtesAsoc__2;
		_p->afip3__FEDetRequest::Tributos = Tributos__2;
		_p->afip3__FEDetRequest::Iva = Iva__2;
		_p->afip3__FEDetRequest::Opcionales = Opcionales__2;
		_p->afip3__FEDetRequest::Compradores = Compradores__2;
	}
	return _p;
}

inline int soap_write_afip3__FECompConsResponse(struct soap *soap, afip3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECompConsResponse(struct soap *soap, const char *URL, afip3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECompConsResponse(struct soap *soap, const char *URL, afip3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECompConsResponse(struct soap *soap, const char *URL, afip3__FECompConsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECompConsResponse * SOAP_FMAC4 soap_get_afip3__FECompConsResponse(struct soap*, afip3__FECompConsResponse *, const char*, const char*);

inline int soap_read_afip3__FECompConsResponse(struct soap *soap, afip3__FECompConsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECompConsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECompConsResponse(struct soap *soap, const char *URL, afip3__FECompConsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECompConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECompConsResponse(struct soap *soap, afip3__FECompConsResponse *p)
{
	if (::soap_read_afip3__FECompConsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECompConsultaResponse_DEFINED
#define SOAP_TYPE_afip3__FECompConsultaResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECompConsultaResponse(struct soap*, const char*, int, const afip3__FECompConsultaResponse *, const char*);
SOAP_FMAC3 afip3__FECompConsultaResponse * SOAP_FMAC4 soap_in_afip3__FECompConsultaResponse(struct soap*, const char*, afip3__FECompConsultaResponse *, const char*);
SOAP_FMAC1 afip3__FECompConsultaResponse * SOAP_FMAC2 soap_instantiate_afip3__FECompConsultaResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECompConsultaResponse * soap_new_afip3__FECompConsultaResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECompConsultaResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECompConsultaResponse * soap_new_req_afip3__FECompConsultaResponse(
	struct soap *soap)
{
	afip3__FECompConsultaResponse *_p = ::soap_new_afip3__FECompConsultaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECompConsultaResponse * soap_new_set_afip3__FECompConsultaResponse(
	struct soap *soap,
	afip3__FECompConsResponse *ResultGet,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FECompConsultaResponse *_p = ::soap_new_afip3__FECompConsultaResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECompConsultaResponse::ResultGet = ResultGet;
		_p->afip3__FECompConsultaResponse::Errors = Errors;
		_p->afip3__FECompConsultaResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FECompConsultaResponse(struct soap *soap, afip3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECompConsultaResponse(struct soap *soap, const char *URL, afip3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECompConsultaResponse(struct soap *soap, const char *URL, afip3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECompConsultaResponse(struct soap *soap, const char *URL, afip3__FECompConsultaResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsultaResponse", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECompConsultaResponse * SOAP_FMAC4 soap_get_afip3__FECompConsultaResponse(struct soap*, afip3__FECompConsultaResponse *, const char*, const char*);

inline int soap_read_afip3__FECompConsultaResponse(struct soap *soap, afip3__FECompConsultaResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECompConsultaResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECompConsultaResponse(struct soap *soap, const char *URL, afip3__FECompConsultaResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECompConsultaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECompConsultaResponse(struct soap *soap, afip3__FECompConsultaResponse *p)
{
	if (::soap_read_afip3__FECompConsultaResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECompConsultaReq_DEFINED
#define SOAP_TYPE_afip3__FECompConsultaReq_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECompConsultaReq(struct soap*, const char*, int, const afip3__FECompConsultaReq *, const char*);
SOAP_FMAC3 afip3__FECompConsultaReq * SOAP_FMAC4 soap_in_afip3__FECompConsultaReq(struct soap*, const char*, afip3__FECompConsultaReq *, const char*);
SOAP_FMAC1 afip3__FECompConsultaReq * SOAP_FMAC2 soap_instantiate_afip3__FECompConsultaReq(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECompConsultaReq * soap_new_afip3__FECompConsultaReq(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECompConsultaReq(soap, n, NULL, NULL, NULL);
}

inline afip3__FECompConsultaReq * soap_new_req_afip3__FECompConsultaReq(
	struct soap *soap,
	int CbteTipo,
	LONG64 CbteNro,
	int PtoVta)
{
	afip3__FECompConsultaReq *_p = ::soap_new_afip3__FECompConsultaReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECompConsultaReq::CbteTipo = CbteTipo;
		_p->afip3__FECompConsultaReq::CbteNro = CbteNro;
		_p->afip3__FECompConsultaReq::PtoVta = PtoVta;
	}
	return _p;
}

inline afip3__FECompConsultaReq * soap_new_set_afip3__FECompConsultaReq(
	struct soap *soap,
	int CbteTipo,
	LONG64 CbteNro,
	int PtoVta)
{
	afip3__FECompConsultaReq *_p = ::soap_new_afip3__FECompConsultaReq(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECompConsultaReq::CbteTipo = CbteTipo;
		_p->afip3__FECompConsultaReq::CbteNro = CbteNro;
		_p->afip3__FECompConsultaReq::PtoVta = PtoVta;
	}
	return _p;
}

inline int soap_write_afip3__FECompConsultaReq(struct soap *soap, afip3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECompConsultaReq(struct soap *soap, const char *URL, afip3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECompConsultaReq(struct soap *soap, const char *URL, afip3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECompConsultaReq(struct soap *soap, const char *URL, afip3__FECompConsultaReq const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECompConsultaReq", p->soap_type() == SOAP_TYPE_afip3__FECompConsultaReq ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECompConsultaReq * SOAP_FMAC4 soap_get_afip3__FECompConsultaReq(struct soap*, afip3__FECompConsultaReq *, const char*, const char*);

inline int soap_read_afip3__FECompConsultaReq(struct soap *soap, afip3__FECompConsultaReq *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECompConsultaReq(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECompConsultaReq(struct soap *soap, const char *URL, afip3__FECompConsultaReq *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECompConsultaReq(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECompConsultaReq(struct soap *soap, afip3__FECompConsultaReq *p)
{
	if (::soap_read_afip3__FECompConsultaReq(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FERecuperaLastCbteResponse_DEFINED
#define SOAP_TYPE_afip3__FERecuperaLastCbteResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FERecuperaLastCbteResponse(struct soap*, const char*, int, const afip3__FERecuperaLastCbteResponse *, const char*);
SOAP_FMAC3 afip3__FERecuperaLastCbteResponse * SOAP_FMAC4 soap_in_afip3__FERecuperaLastCbteResponse(struct soap*, const char*, afip3__FERecuperaLastCbteResponse *, const char*);
SOAP_FMAC1 afip3__FERecuperaLastCbteResponse * SOAP_FMAC2 soap_instantiate_afip3__FERecuperaLastCbteResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FERecuperaLastCbteResponse * soap_new_afip3__FERecuperaLastCbteResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FERecuperaLastCbteResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FERecuperaLastCbteResponse * soap_new_req_afip3__FERecuperaLastCbteResponse(
	struct soap *soap,
	int PtoVta,
	int CbteTipo,
	int CbteNro)
{
	afip3__FERecuperaLastCbteResponse *_p = ::soap_new_afip3__FERecuperaLastCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FERecuperaLastCbteResponse::PtoVta = PtoVta;
		_p->afip3__FERecuperaLastCbteResponse::CbteTipo = CbteTipo;
		_p->afip3__FERecuperaLastCbteResponse::CbteNro = CbteNro;
	}
	return _p;
}

inline afip3__FERecuperaLastCbteResponse * soap_new_set_afip3__FERecuperaLastCbteResponse(
	struct soap *soap,
	int PtoVta,
	int CbteTipo,
	int CbteNro,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FERecuperaLastCbteResponse *_p = ::soap_new_afip3__FERecuperaLastCbteResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FERecuperaLastCbteResponse::PtoVta = PtoVta;
		_p->afip3__FERecuperaLastCbteResponse::CbteTipo = CbteTipo;
		_p->afip3__FERecuperaLastCbteResponse::CbteNro = CbteNro;
		_p->afip3__FERecuperaLastCbteResponse::Errors = Errors;
		_p->afip3__FERecuperaLastCbteResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FERecuperaLastCbteResponse(struct soap *soap, afip3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, afip3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, afip3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, afip3__FERecuperaLastCbteResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FERecuperaLastCbteResponse", p->soap_type() == SOAP_TYPE_afip3__FERecuperaLastCbteResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FERecuperaLastCbteResponse * SOAP_FMAC4 soap_get_afip3__FERecuperaLastCbteResponse(struct soap*, afip3__FERecuperaLastCbteResponse *, const char*, const char*);

inline int soap_read_afip3__FERecuperaLastCbteResponse(struct soap *soap, afip3__FERecuperaLastCbteResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FERecuperaLastCbteResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FERecuperaLastCbteResponse(struct soap *soap, const char *URL, afip3__FERecuperaLastCbteResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FERecuperaLastCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FERecuperaLastCbteResponse(struct soap *soap, afip3__FERecuperaLastCbteResponse *p)
{
	if (::soap_read_afip3__FERecuperaLastCbteResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__DummyResponse_DEFINED
#define SOAP_TYPE_afip3__DummyResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__DummyResponse(struct soap*, const char*, int, const afip3__DummyResponse *, const char*);
SOAP_FMAC3 afip3__DummyResponse * SOAP_FMAC4 soap_in_afip3__DummyResponse(struct soap*, const char*, afip3__DummyResponse *, const char*);
SOAP_FMAC1 afip3__DummyResponse * SOAP_FMAC2 soap_instantiate_afip3__DummyResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__DummyResponse * soap_new_afip3__DummyResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__DummyResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__DummyResponse * soap_new_req_afip3__DummyResponse(
	struct soap *soap)
{
	afip3__DummyResponse *_p = ::soap_new_afip3__DummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__DummyResponse * soap_new_set_afip3__DummyResponse(
	struct soap *soap,
	std::string *AppServer,
	std::string *DbServer,
	std::string *AuthServer)
{
	afip3__DummyResponse *_p = ::soap_new_afip3__DummyResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__DummyResponse::AppServer = AppServer;
		_p->afip3__DummyResponse::DbServer = DbServer;
		_p->afip3__DummyResponse::AuthServer = AuthServer;
	}
	return _p;
}

inline int soap_write_afip3__DummyResponse(struct soap *soap, afip3__DummyResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:DummyResponse", p->soap_type() == SOAP_TYPE_afip3__DummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__DummyResponse(struct soap *soap, const char *URL, afip3__DummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:DummyResponse", p->soap_type() == SOAP_TYPE_afip3__DummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__DummyResponse(struct soap *soap, const char *URL, afip3__DummyResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:DummyResponse", p->soap_type() == SOAP_TYPE_afip3__DummyResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__DummyResponse(struct soap *soap, const char *URL, afip3__DummyResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:DummyResponse", p->soap_type() == SOAP_TYPE_afip3__DummyResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__DummyResponse * SOAP_FMAC4 soap_get_afip3__DummyResponse(struct soap*, afip3__DummyResponse *, const char*, const char*);

inline int soap_read_afip3__DummyResponse(struct soap *soap, afip3__DummyResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__DummyResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__DummyResponse(struct soap *soap, const char *URL, afip3__DummyResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__DummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__DummyResponse(struct soap *soap, afip3__DummyResponse *p)
{
	if (::soap_read_afip3__DummyResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FERegXReqResponse_DEFINED
#define SOAP_TYPE_afip3__FERegXReqResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FERegXReqResponse(struct soap*, const char*, int, const afip3__FERegXReqResponse *, const char*);
SOAP_FMAC3 afip3__FERegXReqResponse * SOAP_FMAC4 soap_in_afip3__FERegXReqResponse(struct soap*, const char*, afip3__FERegXReqResponse *, const char*);
SOAP_FMAC1 afip3__FERegXReqResponse * SOAP_FMAC2 soap_instantiate_afip3__FERegXReqResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FERegXReqResponse * soap_new_afip3__FERegXReqResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FERegXReqResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FERegXReqResponse * soap_new_req_afip3__FERegXReqResponse(
	struct soap *soap,
	int RegXReq)
{
	afip3__FERegXReqResponse *_p = ::soap_new_afip3__FERegXReqResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FERegXReqResponse::RegXReq = RegXReq;
	}
	return _p;
}

inline afip3__FERegXReqResponse * soap_new_set_afip3__FERegXReqResponse(
	struct soap *soap,
	int RegXReq,
	afip3__ArrayOfErr *Errors,
	afip3__ArrayOfEvt *Events)
{
	afip3__FERegXReqResponse *_p = ::soap_new_afip3__FERegXReqResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FERegXReqResponse::RegXReq = RegXReq;
		_p->afip3__FERegXReqResponse::Errors = Errors;
		_p->afip3__FERegXReqResponse::Events = Events;
	}
	return _p;
}

inline int soap_write_afip3__FERegXReqResponse(struct soap *soap, afip3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FERegXReqResponse(struct soap *soap, const char *URL, afip3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FERegXReqResponse(struct soap *soap, const char *URL, afip3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FERegXReqResponse(struct soap *soap, const char *URL, afip3__FERegXReqResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FERegXReqResponse", p->soap_type() == SOAP_TYPE_afip3__FERegXReqResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FERegXReqResponse * SOAP_FMAC4 soap_get_afip3__FERegXReqResponse(struct soap*, afip3__FERegXReqResponse *, const char*, const char*);

inline int soap_read_afip3__FERegXReqResponse(struct soap *soap, afip3__FERegXReqResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FERegXReqResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FERegXReqResponse(struct soap *soap, const char *URL, afip3__FERegXReqResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FERegXReqResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FERegXReqResponse(struct soap *soap, afip3__FERegXReqResponse *p)
{
	if (::soap_read_afip3__FERegXReqResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Err_DEFINED
#define SOAP_TYPE_afip3__Err_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Err(struct soap*, const char*, int, const afip3__Err *, const char*);
SOAP_FMAC3 afip3__Err * SOAP_FMAC4 soap_in_afip3__Err(struct soap*, const char*, afip3__Err *, const char*);
SOAP_FMAC1 afip3__Err * SOAP_FMAC2 soap_instantiate_afip3__Err(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Err * soap_new_afip3__Err(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Err(soap, n, NULL, NULL, NULL);
}

inline afip3__Err * soap_new_req_afip3__Err(
	struct soap *soap,
	int Code)
{
	afip3__Err *_p = ::soap_new_afip3__Err(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Err::Code = Code;
	}
	return _p;
}

inline afip3__Err * soap_new_set_afip3__Err(
	struct soap *soap,
	int Code,
	std::string *Msg)
{
	afip3__Err *_p = ::soap_new_afip3__Err(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Err::Code = Code;
		_p->afip3__Err::Msg = Msg;
	}
	return _p;
}

inline int soap_write_afip3__Err(struct soap *soap, afip3__Err const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Err", p->soap_type() == SOAP_TYPE_afip3__Err ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Err(struct soap *soap, const char *URL, afip3__Err const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Err", p->soap_type() == SOAP_TYPE_afip3__Err ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Err(struct soap *soap, const char *URL, afip3__Err const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Err", p->soap_type() == SOAP_TYPE_afip3__Err ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Err(struct soap *soap, const char *URL, afip3__Err const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Err", p->soap_type() == SOAP_TYPE_afip3__Err ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Err * SOAP_FMAC4 soap_get_afip3__Err(struct soap*, afip3__Err *, const char*, const char*);

inline int soap_read_afip3__Err(struct soap *soap, afip3__Err *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Err(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Err(struct soap *soap, const char *URL, afip3__Err *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Err(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Err(struct soap *soap, afip3__Err *p)
{
	if (::soap_read_afip3__Err(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfErr_DEFINED
#define SOAP_TYPE_afip3__ArrayOfErr_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfErr(struct soap*, const char*, int, const afip3__ArrayOfErr *, const char*);
SOAP_FMAC3 afip3__ArrayOfErr * SOAP_FMAC4 soap_in_afip3__ArrayOfErr(struct soap*, const char*, afip3__ArrayOfErr *, const char*);
SOAP_FMAC1 afip3__ArrayOfErr * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfErr(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfErr * soap_new_afip3__ArrayOfErr(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfErr(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfErr * soap_new_req_afip3__ArrayOfErr(
	struct soap *soap)
{
	afip3__ArrayOfErr *_p = ::soap_new_afip3__ArrayOfErr(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfErr * soap_new_set_afip3__ArrayOfErr(
	struct soap *soap,
	const std::vector<afip3__Err *> & Err)
{
	afip3__ArrayOfErr *_p = ::soap_new_afip3__ArrayOfErr(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfErr::Err = Err;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfErr(struct soap *soap, afip3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip3__ArrayOfErr ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfErr(struct soap *soap, const char *URL, afip3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip3__ArrayOfErr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfErr(struct soap *soap, const char *URL, afip3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip3__ArrayOfErr ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfErr(struct soap *soap, const char *URL, afip3__ArrayOfErr const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfErr", p->soap_type() == SOAP_TYPE_afip3__ArrayOfErr ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfErr * SOAP_FMAC4 soap_get_afip3__ArrayOfErr(struct soap*, afip3__ArrayOfErr *, const char*, const char*);

inline int soap_read_afip3__ArrayOfErr(struct soap *soap, afip3__ArrayOfErr *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfErr(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfErr(struct soap *soap, const char *URL, afip3__ArrayOfErr *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfErr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfErr(struct soap *soap, afip3__ArrayOfErr *p)
{
	if (::soap_read_afip3__ArrayOfErr(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Evt_DEFINED
#define SOAP_TYPE_afip3__Evt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Evt(struct soap*, const char*, int, const afip3__Evt *, const char*);
SOAP_FMAC3 afip3__Evt * SOAP_FMAC4 soap_in_afip3__Evt(struct soap*, const char*, afip3__Evt *, const char*);
SOAP_FMAC1 afip3__Evt * SOAP_FMAC2 soap_instantiate_afip3__Evt(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Evt * soap_new_afip3__Evt(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Evt(soap, n, NULL, NULL, NULL);
}

inline afip3__Evt * soap_new_req_afip3__Evt(
	struct soap *soap,
	int Code)
{
	afip3__Evt *_p = ::soap_new_afip3__Evt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Evt::Code = Code;
	}
	return _p;
}

inline afip3__Evt * soap_new_set_afip3__Evt(
	struct soap *soap,
	int Code,
	std::string *Msg)
{
	afip3__Evt *_p = ::soap_new_afip3__Evt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Evt::Code = Code;
		_p->afip3__Evt::Msg = Msg;
	}
	return _p;
}

inline int soap_write_afip3__Evt(struct soap *soap, afip3__Evt const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Evt", p->soap_type() == SOAP_TYPE_afip3__Evt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Evt(struct soap *soap, const char *URL, afip3__Evt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Evt", p->soap_type() == SOAP_TYPE_afip3__Evt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Evt(struct soap *soap, const char *URL, afip3__Evt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Evt", p->soap_type() == SOAP_TYPE_afip3__Evt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Evt(struct soap *soap, const char *URL, afip3__Evt const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Evt", p->soap_type() == SOAP_TYPE_afip3__Evt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Evt * SOAP_FMAC4 soap_get_afip3__Evt(struct soap*, afip3__Evt *, const char*, const char*);

inline int soap_read_afip3__Evt(struct soap *soap, afip3__Evt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Evt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Evt(struct soap *soap, const char *URL, afip3__Evt *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Evt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Evt(struct soap *soap, afip3__Evt *p)
{
	if (::soap_read_afip3__Evt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfEvt_DEFINED
#define SOAP_TYPE_afip3__ArrayOfEvt_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfEvt(struct soap*, const char*, int, const afip3__ArrayOfEvt *, const char*);
SOAP_FMAC3 afip3__ArrayOfEvt * SOAP_FMAC4 soap_in_afip3__ArrayOfEvt(struct soap*, const char*, afip3__ArrayOfEvt *, const char*);
SOAP_FMAC1 afip3__ArrayOfEvt * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfEvt(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfEvt * soap_new_afip3__ArrayOfEvt(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfEvt(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfEvt * soap_new_req_afip3__ArrayOfEvt(
	struct soap *soap)
{
	afip3__ArrayOfEvt *_p = ::soap_new_afip3__ArrayOfEvt(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfEvt * soap_new_set_afip3__ArrayOfEvt(
	struct soap *soap,
	const std::vector<afip3__Evt *> & Evt)
{
	afip3__ArrayOfEvt *_p = ::soap_new_afip3__ArrayOfEvt(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfEvt::Evt = Evt;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfEvt(struct soap *soap, afip3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfEvt(struct soap *soap, const char *URL, afip3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfEvt(struct soap *soap, const char *URL, afip3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfEvt(struct soap *soap, const char *URL, afip3__ArrayOfEvt const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfEvt", p->soap_type() == SOAP_TYPE_afip3__ArrayOfEvt ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfEvt * SOAP_FMAC4 soap_get_afip3__ArrayOfEvt(struct soap*, afip3__ArrayOfEvt *, const char*, const char*);

inline int soap_read_afip3__ArrayOfEvt(struct soap *soap, afip3__ArrayOfEvt *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfEvt(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfEvt(struct soap *soap, const char *URL, afip3__ArrayOfEvt *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfEvt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfEvt(struct soap *soap, afip3__ArrayOfEvt *p)
{
	if (::soap_read_afip3__ArrayOfEvt(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Obs_DEFINED
#define SOAP_TYPE_afip3__Obs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Obs(struct soap*, const char*, int, const afip3__Obs *, const char*);
SOAP_FMAC3 afip3__Obs * SOAP_FMAC4 soap_in_afip3__Obs(struct soap*, const char*, afip3__Obs *, const char*);
SOAP_FMAC1 afip3__Obs * SOAP_FMAC2 soap_instantiate_afip3__Obs(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Obs * soap_new_afip3__Obs(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Obs(soap, n, NULL, NULL, NULL);
}

inline afip3__Obs * soap_new_req_afip3__Obs(
	struct soap *soap,
	int Code)
{
	afip3__Obs *_p = ::soap_new_afip3__Obs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Obs::Code = Code;
	}
	return _p;
}

inline afip3__Obs * soap_new_set_afip3__Obs(
	struct soap *soap,
	int Code,
	std::string *Msg)
{
	afip3__Obs *_p = ::soap_new_afip3__Obs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Obs::Code = Code;
		_p->afip3__Obs::Msg = Msg;
	}
	return _p;
}

inline int soap_write_afip3__Obs(struct soap *soap, afip3__Obs const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Obs", p->soap_type() == SOAP_TYPE_afip3__Obs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Obs(struct soap *soap, const char *URL, afip3__Obs const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Obs", p->soap_type() == SOAP_TYPE_afip3__Obs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Obs(struct soap *soap, const char *URL, afip3__Obs const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Obs", p->soap_type() == SOAP_TYPE_afip3__Obs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Obs(struct soap *soap, const char *URL, afip3__Obs const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Obs", p->soap_type() == SOAP_TYPE_afip3__Obs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Obs * SOAP_FMAC4 soap_get_afip3__Obs(struct soap*, afip3__Obs *, const char*, const char*);

inline int soap_read_afip3__Obs(struct soap *soap, afip3__Obs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Obs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Obs(struct soap *soap, const char *URL, afip3__Obs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Obs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Obs(struct soap *soap, afip3__Obs *p)
{
	if (::soap_read_afip3__Obs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfObs_DEFINED
#define SOAP_TYPE_afip3__ArrayOfObs_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfObs(struct soap*, const char*, int, const afip3__ArrayOfObs *, const char*);
SOAP_FMAC3 afip3__ArrayOfObs * SOAP_FMAC4 soap_in_afip3__ArrayOfObs(struct soap*, const char*, afip3__ArrayOfObs *, const char*);
SOAP_FMAC1 afip3__ArrayOfObs * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfObs(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfObs * soap_new_afip3__ArrayOfObs(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfObs(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfObs * soap_new_req_afip3__ArrayOfObs(
	struct soap *soap)
{
	afip3__ArrayOfObs *_p = ::soap_new_afip3__ArrayOfObs(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfObs * soap_new_set_afip3__ArrayOfObs(
	struct soap *soap,
	const std::vector<afip3__Obs *> & Obs)
{
	afip3__ArrayOfObs *_p = ::soap_new_afip3__ArrayOfObs(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfObs::Obs = Obs;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfObs(struct soap *soap, afip3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip3__ArrayOfObs ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfObs(struct soap *soap, const char *URL, afip3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip3__ArrayOfObs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfObs(struct soap *soap, const char *URL, afip3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip3__ArrayOfObs ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfObs(struct soap *soap, const char *URL, afip3__ArrayOfObs const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfObs", p->soap_type() == SOAP_TYPE_afip3__ArrayOfObs ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfObs * SOAP_FMAC4 soap_get_afip3__ArrayOfObs(struct soap*, afip3__ArrayOfObs *, const char*, const char*);

inline int soap_read_afip3__ArrayOfObs(struct soap *soap, afip3__ArrayOfObs *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfObs(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfObs(struct soap *soap, const char *URL, afip3__ArrayOfObs *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfObs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfObs(struct soap *soap, afip3__ArrayOfObs *p)
{
	if (::soap_read_afip3__ArrayOfObs(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FEDetResponse_DEFINED
#define SOAP_TYPE_afip3__FEDetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FEDetResponse(struct soap*, const char*, int, const afip3__FEDetResponse *, const char*);
SOAP_FMAC3 afip3__FEDetResponse * SOAP_FMAC4 soap_in_afip3__FEDetResponse(struct soap*, const char*, afip3__FEDetResponse *, const char*);
SOAP_FMAC1 afip3__FEDetResponse * SOAP_FMAC2 soap_instantiate_afip3__FEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FEDetResponse * soap_new_afip3__FEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FEDetResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FEDetResponse * soap_new_req_afip3__FEDetResponse(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta)
{
	afip3__FEDetResponse *_p = ::soap_new_afip3__FEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetResponse::Concepto = Concepto;
		_p->afip3__FEDetResponse::DocTipo = DocTipo;
		_p->afip3__FEDetResponse::DocNro = DocNro;
		_p->afip3__FEDetResponse::CbteDesde = CbteDesde;
		_p->afip3__FEDetResponse::CbteHasta = CbteHasta;
	}
	return _p;
}

inline afip3__FEDetResponse * soap_new_set_afip3__FEDetResponse(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta,
	std::string *CbteFch,
	std::string *Resultado,
	afip3__ArrayOfObs *Observaciones)
{
	afip3__FEDetResponse *_p = ::soap_new_afip3__FEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetResponse::Concepto = Concepto;
		_p->afip3__FEDetResponse::DocTipo = DocTipo;
		_p->afip3__FEDetResponse::DocNro = DocNro;
		_p->afip3__FEDetResponse::CbteDesde = CbteDesde;
		_p->afip3__FEDetResponse::CbteHasta = CbteHasta;
		_p->afip3__FEDetResponse::CbteFch = CbteFch;
		_p->afip3__FEDetResponse::Resultado = Resultado;
		_p->afip3__FEDetResponse::Observaciones = Observaciones;
	}
	return _p;
}

inline int soap_write_afip3__FEDetResponse(struct soap *soap, afip3__FEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FEDetResponse(struct soap *soap, const char *URL, afip3__FEDetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FEDetResponse(struct soap *soap, const char *URL, afip3__FEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FEDetResponse(struct soap *soap, const char *URL, afip3__FEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FEDetResponse * SOAP_FMAC4 soap_get_afip3__FEDetResponse(struct soap*, afip3__FEDetResponse *, const char*, const char*);

inline int soap_read_afip3__FEDetResponse(struct soap *soap, afip3__FEDetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FEDetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FEDetResponse(struct soap *soap, const char *URL, afip3__FEDetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FEDetResponse(struct soap *soap, afip3__FEDetResponse *p)
{
	if (::soap_read_afip3__FEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEDetResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEDetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEDetResponse(struct soap*, const char*, int, const afip3__FECAEDetResponse *, const char*);
SOAP_FMAC3 afip3__FECAEDetResponse * SOAP_FMAC4 soap_in_afip3__FECAEDetResponse(struct soap*, const char*, afip3__FECAEDetResponse *, const char*);
SOAP_FMAC1 afip3__FECAEDetResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEDetResponse * soap_new_afip3__FECAEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEDetResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEDetResponse * soap_new_req_afip3__FECAEDetResponse(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1)
{
	afip3__FECAEDetResponse *_p = ::soap_new_afip3__FECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetResponse::Concepto = Concepto__1;
		_p->afip3__FEDetResponse::DocTipo = DocTipo__1;
		_p->afip3__FEDetResponse::DocNro = DocNro__1;
		_p->afip3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetResponse::CbteHasta = CbteHasta__1;
	}
	return _p;
}

inline afip3__FECAEDetResponse * soap_new_set_afip3__FECAEDetResponse(
	struct soap *soap,
	std::string *CAE,
	std::string *CAEFchVto,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	std::string *Resultado__1,
	afip3__ArrayOfObs *Observaciones__1)
{
	afip3__FECAEDetResponse *_p = ::soap_new_afip3__FECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEDetResponse::CAE = CAE;
		_p->afip3__FECAEDetResponse::CAEFchVto = CAEFchVto;
		_p->afip3__FEDetResponse::Concepto = Concepto__1;
		_p->afip3__FEDetResponse::DocTipo = DocTipo__1;
		_p->afip3__FEDetResponse::DocNro = DocNro__1;
		_p->afip3__FEDetResponse::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetResponse::CbteHasta = CbteHasta__1;
		_p->afip3__FEDetResponse::CbteFch = CbteFch__1;
		_p->afip3__FEDetResponse::Resultado = Resultado__1;
		_p->afip3__FEDetResponse::Observaciones = Observaciones__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAEDetResponse(struct soap *soap, afip3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEDetResponse(struct soap *soap, const char *URL, afip3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEDetResponse(struct soap *soap, const char *URL, afip3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEDetResponse(struct soap *soap, const char *URL, afip3__FECAEDetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEDetResponse * SOAP_FMAC4 soap_get_afip3__FECAEDetResponse(struct soap*, afip3__FECAEDetResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEDetResponse(struct soap *soap, afip3__FECAEDetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEDetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEDetResponse(struct soap *soap, const char *URL, afip3__FECAEDetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEDetResponse(struct soap *soap, afip3__FECAEDetResponse *p)
{
	if (::soap_read_afip3__FECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfFECAEDetResponse_DEFINED
#define SOAP_TYPE_afip3__ArrayOfFECAEDetResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfFECAEDetResponse(struct soap*, const char*, int, const afip3__ArrayOfFECAEDetResponse *, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEDetResponse * SOAP_FMAC4 soap_in_afip3__ArrayOfFECAEDetResponse(struct soap*, const char*, afip3__ArrayOfFECAEDetResponse *, const char*);
SOAP_FMAC1 afip3__ArrayOfFECAEDetResponse * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfFECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfFECAEDetResponse * soap_new_afip3__ArrayOfFECAEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfFECAEDetResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfFECAEDetResponse * soap_new_req_afip3__ArrayOfFECAEDetResponse(
	struct soap *soap)
{
	afip3__ArrayOfFECAEDetResponse *_p = ::soap_new_afip3__ArrayOfFECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfFECAEDetResponse * soap_new_set_afip3__ArrayOfFECAEDetResponse(
	struct soap *soap,
	const std::vector<afip3__FECAEDetResponse *> & FECAEDetResponse)
{
	afip3__ArrayOfFECAEDetResponse *_p = ::soap_new_afip3__ArrayOfFECAEDetResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfFECAEDetResponse::FECAEDetResponse = FECAEDetResponse;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfFECAEDetResponse(struct soap *soap, afip3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetResponse", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfFECAEDetResponse * SOAP_FMAC4 soap_get_afip3__ArrayOfFECAEDetResponse(struct soap*, afip3__ArrayOfFECAEDetResponse *, const char*, const char*);

inline int soap_read_afip3__ArrayOfFECAEDetResponse(struct soap *soap, afip3__ArrayOfFECAEDetResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfFECAEDetResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfFECAEDetResponse(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfFECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfFECAEDetResponse(struct soap *soap, afip3__ArrayOfFECAEDetResponse *p)
{
	if (::soap_read_afip3__ArrayOfFECAEDetResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECabResponse_DEFINED
#define SOAP_TYPE_afip3__FECabResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECabResponse(struct soap*, const char*, int, const afip3__FECabResponse *, const char*);
SOAP_FMAC3 afip3__FECabResponse * SOAP_FMAC4 soap_in_afip3__FECabResponse(struct soap*, const char*, afip3__FECabResponse *, const char*);
SOAP_FMAC1 afip3__FECabResponse * SOAP_FMAC2 soap_instantiate_afip3__FECabResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECabResponse * soap_new_afip3__FECabResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECabResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECabResponse * soap_new_req_afip3__FECabResponse(
	struct soap *soap,
	LONG64 Cuit,
	int PtoVta,
	int CbteTipo,
	int CantReg)
{
	afip3__FECabResponse *_p = ::soap_new_afip3__FECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabResponse::Cuit = Cuit;
		_p->afip3__FECabResponse::PtoVta = PtoVta;
		_p->afip3__FECabResponse::CbteTipo = CbteTipo;
		_p->afip3__FECabResponse::CantReg = CantReg;
	}
	return _p;
}

inline afip3__FECabResponse * soap_new_set_afip3__FECabResponse(
	struct soap *soap,
	LONG64 Cuit,
	int PtoVta,
	int CbteTipo,
	std::string *FchProceso,
	int CantReg,
	std::string *Resultado,
	std::string *Reproceso)
{
	afip3__FECabResponse *_p = ::soap_new_afip3__FECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabResponse::Cuit = Cuit;
		_p->afip3__FECabResponse::PtoVta = PtoVta;
		_p->afip3__FECabResponse::CbteTipo = CbteTipo;
		_p->afip3__FECabResponse::FchProceso = FchProceso;
		_p->afip3__FECabResponse::CantReg = CantReg;
		_p->afip3__FECabResponse::Resultado = Resultado;
		_p->afip3__FECabResponse::Reproceso = Reproceso;
	}
	return _p;
}

inline int soap_write_afip3__FECabResponse(struct soap *soap, afip3__FECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECabResponse(struct soap *soap, const char *URL, afip3__FECabResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECabResponse(struct soap *soap, const char *URL, afip3__FECabResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECabResponse(struct soap *soap, const char *URL, afip3__FECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECabResponse * SOAP_FMAC4 soap_get_afip3__FECabResponse(struct soap*, afip3__FECabResponse *, const char*, const char*);

inline int soap_read_afip3__FECabResponse(struct soap *soap, afip3__FECabResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECabResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECabResponse(struct soap *soap, const char *URL, afip3__FECabResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECabResponse(struct soap *soap, afip3__FECabResponse *p)
{
	if (::soap_read_afip3__FECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAECabResponse_DEFINED
#define SOAP_TYPE_afip3__FECAECabResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAECabResponse(struct soap*, const char*, int, const afip3__FECAECabResponse *, const char*);
SOAP_FMAC3 afip3__FECAECabResponse * SOAP_FMAC4 soap_in_afip3__FECAECabResponse(struct soap*, const char*, afip3__FECAECabResponse *, const char*);
SOAP_FMAC1 afip3__FECAECabResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAECabResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAECabResponse * soap_new_afip3__FECAECabResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAECabResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAECabResponse * soap_new_req_afip3__FECAECabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	int CantReg__1)
{
	afip3__FECAECabResponse *_p = ::soap_new_afip3__FECAECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabResponse::Cuit = Cuit__1;
		_p->afip3__FECabResponse::PtoVta = PtoVta__1;
		_p->afip3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->afip3__FECabResponse::CantReg = CantReg__1;
	}
	return _p;
}

inline afip3__FECAECabResponse * soap_new_set_afip3__FECAECabResponse(
	struct soap *soap,
	LONG64 Cuit__1,
	int PtoVta__1,
	int CbteTipo__1,
	std::string *FchProceso__1,
	int CantReg__1,
	std::string *Resultado__1,
	std::string *Reproceso__1)
{
	afip3__FECAECabResponse *_p = ::soap_new_afip3__FECAECabResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabResponse::Cuit = Cuit__1;
		_p->afip3__FECabResponse::PtoVta = PtoVta__1;
		_p->afip3__FECabResponse::CbteTipo = CbteTipo__1;
		_p->afip3__FECabResponse::FchProceso = FchProceso__1;
		_p->afip3__FECabResponse::CantReg = CantReg__1;
		_p->afip3__FECabResponse::Resultado = Resultado__1;
		_p->afip3__FECabResponse::Reproceso = Reproceso__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAECabResponse(struct soap *soap, afip3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAECabResponse(struct soap *soap, const char *URL, afip3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAECabResponse(struct soap *soap, const char *URL, afip3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAECabResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAECabResponse(struct soap *soap, const char *URL, afip3__FECAECabResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAECabResponse", p->soap_type() == SOAP_TYPE_afip3__FECAECabResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAECabResponse * SOAP_FMAC4 soap_get_afip3__FECAECabResponse(struct soap*, afip3__FECAECabResponse *, const char*, const char*);

inline int soap_read_afip3__FECAECabResponse(struct soap *soap, afip3__FECAECabResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAECabResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAECabResponse(struct soap *soap, const char *URL, afip3__FECAECabResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAECabResponse(struct soap *soap, afip3__FECAECabResponse *p)
{
	if (::soap_read_afip3__FECAECabResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEResponse_DEFINED
#define SOAP_TYPE_afip3__FECAEResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEResponse(struct soap*, const char*, int, const afip3__FECAEResponse *, const char*);
SOAP_FMAC3 afip3__FECAEResponse * SOAP_FMAC4 soap_in_afip3__FECAEResponse(struct soap*, const char*, afip3__FECAEResponse *, const char*);
SOAP_FMAC1 afip3__FECAEResponse * SOAP_FMAC2 soap_instantiate_afip3__FECAEResponse(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEResponse * soap_new_afip3__FECAEResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEResponse(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEResponse * soap_new_req_afip3__FECAEResponse(
	struct soap *soap)
{
	afip3__FECAEResponse *_p = ::soap_new_afip3__FECAEResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECAEResponse * soap_new_set_afip3__FECAEResponse(
	struct soap *soap,
	afip3__FECAECabResponse *FeCabResp,
	afip3__ArrayOfFECAEDetResponse *FeDetResp,
	afip3__ArrayOfEvt *Events,
	afip3__ArrayOfErr *Errors)
{
	afip3__FECAEResponse *_p = ::soap_new_afip3__FECAEResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAEResponse::FeCabResp = FeCabResp;
		_p->afip3__FECAEResponse::FeDetResp = FeDetResp;
		_p->afip3__FECAEResponse::Events = Events;
		_p->afip3__FECAEResponse::Errors = Errors;
	}
	return _p;
}

inline int soap_write_afip3__FECAEResponse(struct soap *soap, afip3__FECAEResponse const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEResponse(struct soap *soap, const char *URL, afip3__FECAEResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEResponse(struct soap *soap, const char *URL, afip3__FECAEResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEResponse(struct soap *soap, const char *URL, afip3__FECAEResponse const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEResponse", p->soap_type() == SOAP_TYPE_afip3__FECAEResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEResponse * SOAP_FMAC4 soap_get_afip3__FECAEResponse(struct soap*, afip3__FECAEResponse *, const char*, const char*);

inline int soap_read_afip3__FECAEResponse(struct soap *soap, afip3__FECAEResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEResponse(struct soap *soap, const char *URL, afip3__FECAEResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEResponse(struct soap *soap, afip3__FECAEResponse *p)
{
	if (::soap_read_afip3__FECAEResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Comprador_DEFINED
#define SOAP_TYPE_afip3__Comprador_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Comprador(struct soap*, const char*, int, const afip3__Comprador *, const char*);
SOAP_FMAC3 afip3__Comprador * SOAP_FMAC4 soap_in_afip3__Comprador(struct soap*, const char*, afip3__Comprador *, const char*);
SOAP_FMAC1 afip3__Comprador * SOAP_FMAC2 soap_instantiate_afip3__Comprador(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Comprador * soap_new_afip3__Comprador(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Comprador(soap, n, NULL, NULL, NULL);
}

inline afip3__Comprador * soap_new_req_afip3__Comprador(
	struct soap *soap,
	int DocTipo,
	LONG64 DocNro,
	double Porcentaje)
{
	afip3__Comprador *_p = ::soap_new_afip3__Comprador(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Comprador::DocTipo = DocTipo;
		_p->afip3__Comprador::DocNro = DocNro;
		_p->afip3__Comprador::Porcentaje = Porcentaje;
	}
	return _p;
}

inline afip3__Comprador * soap_new_set_afip3__Comprador(
	struct soap *soap,
	int DocTipo,
	LONG64 DocNro,
	double Porcentaje)
{
	afip3__Comprador *_p = ::soap_new_afip3__Comprador(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Comprador::DocTipo = DocTipo;
		_p->afip3__Comprador::DocNro = DocNro;
		_p->afip3__Comprador::Porcentaje = Porcentaje;
	}
	return _p;
}

inline int soap_write_afip3__Comprador(struct soap *soap, afip3__Comprador const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Comprador", p->soap_type() == SOAP_TYPE_afip3__Comprador ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Comprador(struct soap *soap, const char *URL, afip3__Comprador const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Comprador", p->soap_type() == SOAP_TYPE_afip3__Comprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Comprador(struct soap *soap, const char *URL, afip3__Comprador const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Comprador", p->soap_type() == SOAP_TYPE_afip3__Comprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Comprador(struct soap *soap, const char *URL, afip3__Comprador const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Comprador", p->soap_type() == SOAP_TYPE_afip3__Comprador ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Comprador * SOAP_FMAC4 soap_get_afip3__Comprador(struct soap*, afip3__Comprador *, const char*, const char*);

inline int soap_read_afip3__Comprador(struct soap *soap, afip3__Comprador *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Comprador(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Comprador(struct soap *soap, const char *URL, afip3__Comprador *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Comprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Comprador(struct soap *soap, afip3__Comprador *p)
{
	if (::soap_read_afip3__Comprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfComprador_DEFINED
#define SOAP_TYPE_afip3__ArrayOfComprador_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfComprador(struct soap*, const char*, int, const afip3__ArrayOfComprador *, const char*);
SOAP_FMAC3 afip3__ArrayOfComprador * SOAP_FMAC4 soap_in_afip3__ArrayOfComprador(struct soap*, const char*, afip3__ArrayOfComprador *, const char*);
SOAP_FMAC1 afip3__ArrayOfComprador * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfComprador(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfComprador * soap_new_afip3__ArrayOfComprador(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfComprador(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfComprador * soap_new_req_afip3__ArrayOfComprador(
	struct soap *soap)
{
	afip3__ArrayOfComprador *_p = ::soap_new_afip3__ArrayOfComprador(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfComprador * soap_new_set_afip3__ArrayOfComprador(
	struct soap *soap,
	const std::vector<afip3__Comprador *> & Comprador)
{
	afip3__ArrayOfComprador *_p = ::soap_new_afip3__ArrayOfComprador(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfComprador::Comprador = Comprador;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfComprador(struct soap *soap, afip3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfComprador(struct soap *soap, const char *URL, afip3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfComprador(struct soap *soap, const char *URL, afip3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfComprador(struct soap *soap, const char *URL, afip3__ArrayOfComprador const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfComprador", p->soap_type() == SOAP_TYPE_afip3__ArrayOfComprador ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfComprador * SOAP_FMAC4 soap_get_afip3__ArrayOfComprador(struct soap*, afip3__ArrayOfComprador *, const char*, const char*);

inline int soap_read_afip3__ArrayOfComprador(struct soap *soap, afip3__ArrayOfComprador *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfComprador(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfComprador(struct soap *soap, const char *URL, afip3__ArrayOfComprador *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfComprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfComprador(struct soap *soap, afip3__ArrayOfComprador *p)
{
	if (::soap_read_afip3__ArrayOfComprador(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Opcional_DEFINED
#define SOAP_TYPE_afip3__Opcional_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Opcional(struct soap*, const char*, int, const afip3__Opcional *, const char*);
SOAP_FMAC3 afip3__Opcional * SOAP_FMAC4 soap_in_afip3__Opcional(struct soap*, const char*, afip3__Opcional *, const char*);
SOAP_FMAC1 afip3__Opcional * SOAP_FMAC2 soap_instantiate_afip3__Opcional(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Opcional * soap_new_afip3__Opcional(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Opcional(soap, n, NULL, NULL, NULL);
}

inline afip3__Opcional * soap_new_req_afip3__Opcional(
	struct soap *soap)
{
	afip3__Opcional *_p = ::soap_new_afip3__Opcional(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__Opcional * soap_new_set_afip3__Opcional(
	struct soap *soap,
	std::string *Id,
	std::string *Valor)
{
	afip3__Opcional *_p = ::soap_new_afip3__Opcional(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Opcional::Id = Id;
		_p->afip3__Opcional::Valor = Valor;
	}
	return _p;
}

inline int soap_write_afip3__Opcional(struct soap *soap, afip3__Opcional const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Opcional", p->soap_type() == SOAP_TYPE_afip3__Opcional ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Opcional(struct soap *soap, const char *URL, afip3__Opcional const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Opcional", p->soap_type() == SOAP_TYPE_afip3__Opcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Opcional(struct soap *soap, const char *URL, afip3__Opcional const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Opcional", p->soap_type() == SOAP_TYPE_afip3__Opcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Opcional(struct soap *soap, const char *URL, afip3__Opcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Opcional", p->soap_type() == SOAP_TYPE_afip3__Opcional ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Opcional * SOAP_FMAC4 soap_get_afip3__Opcional(struct soap*, afip3__Opcional *, const char*, const char*);

inline int soap_read_afip3__Opcional(struct soap *soap, afip3__Opcional *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Opcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Opcional(struct soap *soap, const char *URL, afip3__Opcional *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Opcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Opcional(struct soap *soap, afip3__Opcional *p)
{
	if (::soap_read_afip3__Opcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfOpcional_DEFINED
#define SOAP_TYPE_afip3__ArrayOfOpcional_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfOpcional(struct soap*, const char*, int, const afip3__ArrayOfOpcional *, const char*);
SOAP_FMAC3 afip3__ArrayOfOpcional * SOAP_FMAC4 soap_in_afip3__ArrayOfOpcional(struct soap*, const char*, afip3__ArrayOfOpcional *, const char*);
SOAP_FMAC1 afip3__ArrayOfOpcional * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfOpcional(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfOpcional * soap_new_afip3__ArrayOfOpcional(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfOpcional(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfOpcional * soap_new_req_afip3__ArrayOfOpcional(
	struct soap *soap)
{
	afip3__ArrayOfOpcional *_p = ::soap_new_afip3__ArrayOfOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfOpcional * soap_new_set_afip3__ArrayOfOpcional(
	struct soap *soap,
	const std::vector<afip3__Opcional *> & Opcional)
{
	afip3__ArrayOfOpcional *_p = ::soap_new_afip3__ArrayOfOpcional(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfOpcional::Opcional = Opcional;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfOpcional(struct soap *soap, afip3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfOpcional(struct soap *soap, const char *URL, afip3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfOpcional(struct soap *soap, const char *URL, afip3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfOpcional(struct soap *soap, const char *URL, afip3__ArrayOfOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfOpcional", p->soap_type() == SOAP_TYPE_afip3__ArrayOfOpcional ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfOpcional * SOAP_FMAC4 soap_get_afip3__ArrayOfOpcional(struct soap*, afip3__ArrayOfOpcional *, const char*, const char*);

inline int soap_read_afip3__ArrayOfOpcional(struct soap *soap, afip3__ArrayOfOpcional *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfOpcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfOpcional(struct soap *soap, const char *URL, afip3__ArrayOfOpcional *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfOpcional(struct soap *soap, afip3__ArrayOfOpcional *p)
{
	if (::soap_read_afip3__ArrayOfOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__AlicIva_DEFINED
#define SOAP_TYPE_afip3__AlicIva_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__AlicIva(struct soap*, const char*, int, const afip3__AlicIva *, const char*);
SOAP_FMAC3 afip3__AlicIva * SOAP_FMAC4 soap_in_afip3__AlicIva(struct soap*, const char*, afip3__AlicIva *, const char*);
SOAP_FMAC1 afip3__AlicIva * SOAP_FMAC2 soap_instantiate_afip3__AlicIva(struct soap*, int, const char*, const char*, size_t*);

inline afip3__AlicIva * soap_new_afip3__AlicIva(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__AlicIva(soap, n, NULL, NULL, NULL);
}

inline afip3__AlicIva * soap_new_req_afip3__AlicIva(
	struct soap *soap,
	int Id,
	double BaseImp,
	double Importe)
{
	afip3__AlicIva *_p = ::soap_new_afip3__AlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__AlicIva::Id = Id;
		_p->afip3__AlicIva::BaseImp = BaseImp;
		_p->afip3__AlicIva::Importe = Importe;
	}
	return _p;
}

inline afip3__AlicIva * soap_new_set_afip3__AlicIva(
	struct soap *soap,
	int Id,
	double BaseImp,
	double Importe)
{
	afip3__AlicIva *_p = ::soap_new_afip3__AlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__AlicIva::Id = Id;
		_p->afip3__AlicIva::BaseImp = BaseImp;
		_p->afip3__AlicIva::Importe = Importe;
	}
	return _p;
}

inline int soap_write_afip3__AlicIva(struct soap *soap, afip3__AlicIva const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:AlicIva", p->soap_type() == SOAP_TYPE_afip3__AlicIva ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__AlicIva(struct soap *soap, const char *URL, afip3__AlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:AlicIva", p->soap_type() == SOAP_TYPE_afip3__AlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__AlicIva(struct soap *soap, const char *URL, afip3__AlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:AlicIva", p->soap_type() == SOAP_TYPE_afip3__AlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__AlicIva(struct soap *soap, const char *URL, afip3__AlicIva const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:AlicIva", p->soap_type() == SOAP_TYPE_afip3__AlicIva ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__AlicIva * SOAP_FMAC4 soap_get_afip3__AlicIva(struct soap*, afip3__AlicIva *, const char*, const char*);

inline int soap_read_afip3__AlicIva(struct soap *soap, afip3__AlicIva *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__AlicIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__AlicIva(struct soap *soap, const char *URL, afip3__AlicIva *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__AlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__AlicIva(struct soap *soap, afip3__AlicIva *p)
{
	if (::soap_read_afip3__AlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfAlicIva_DEFINED
#define SOAP_TYPE_afip3__ArrayOfAlicIva_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfAlicIva(struct soap*, const char*, int, const afip3__ArrayOfAlicIva *, const char*);
SOAP_FMAC3 afip3__ArrayOfAlicIva * SOAP_FMAC4 soap_in_afip3__ArrayOfAlicIva(struct soap*, const char*, afip3__ArrayOfAlicIva *, const char*);
SOAP_FMAC1 afip3__ArrayOfAlicIva * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfAlicIva(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfAlicIva * soap_new_afip3__ArrayOfAlicIva(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfAlicIva(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfAlicIva * soap_new_req_afip3__ArrayOfAlicIva(
	struct soap *soap)
{
	afip3__ArrayOfAlicIva *_p = ::soap_new_afip3__ArrayOfAlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfAlicIva * soap_new_set_afip3__ArrayOfAlicIva(
	struct soap *soap,
	const std::vector<afip3__AlicIva *> & AlicIva)
{
	afip3__ArrayOfAlicIva *_p = ::soap_new_afip3__ArrayOfAlicIva(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfAlicIva::AlicIva = AlicIva;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfAlicIva(struct soap *soap, afip3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfAlicIva(struct soap *soap, const char *URL, afip3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfAlicIva(struct soap *soap, const char *URL, afip3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfAlicIva(struct soap *soap, const char *URL, afip3__ArrayOfAlicIva const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfAlicIva", p->soap_type() == SOAP_TYPE_afip3__ArrayOfAlicIva ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfAlicIva * SOAP_FMAC4 soap_get_afip3__ArrayOfAlicIva(struct soap*, afip3__ArrayOfAlicIva *, const char*, const char*);

inline int soap_read_afip3__ArrayOfAlicIva(struct soap *soap, afip3__ArrayOfAlicIva *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfAlicIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfAlicIva(struct soap *soap, const char *URL, afip3__ArrayOfAlicIva *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfAlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfAlicIva(struct soap *soap, afip3__ArrayOfAlicIva *p)
{
	if (::soap_read_afip3__ArrayOfAlicIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__Tributo_DEFINED
#define SOAP_TYPE_afip3__Tributo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__Tributo(struct soap*, const char*, int, const afip3__Tributo *, const char*);
SOAP_FMAC3 afip3__Tributo * SOAP_FMAC4 soap_in_afip3__Tributo(struct soap*, const char*, afip3__Tributo *, const char*);
SOAP_FMAC1 afip3__Tributo * SOAP_FMAC2 soap_instantiate_afip3__Tributo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__Tributo * soap_new_afip3__Tributo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__Tributo(soap, n, NULL, NULL, NULL);
}

inline afip3__Tributo * soap_new_req_afip3__Tributo(
	struct soap *soap,
	short Id,
	double BaseImp,
	double Alic,
	double Importe)
{
	afip3__Tributo *_p = ::soap_new_afip3__Tributo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Tributo::Id = Id;
		_p->afip3__Tributo::BaseImp = BaseImp;
		_p->afip3__Tributo::Alic = Alic;
		_p->afip3__Tributo::Importe = Importe;
	}
	return _p;
}

inline afip3__Tributo * soap_new_set_afip3__Tributo(
	struct soap *soap,
	short Id,
	std::string *Desc,
	double BaseImp,
	double Alic,
	double Importe)
{
	afip3__Tributo *_p = ::soap_new_afip3__Tributo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__Tributo::Id = Id;
		_p->afip3__Tributo::Desc = Desc;
		_p->afip3__Tributo::BaseImp = BaseImp;
		_p->afip3__Tributo::Alic = Alic;
		_p->afip3__Tributo::Importe = Importe;
	}
	return _p;
}

inline int soap_write_afip3__Tributo(struct soap *soap, afip3__Tributo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Tributo", p->soap_type() == SOAP_TYPE_afip3__Tributo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__Tributo(struct soap *soap, const char *URL, afip3__Tributo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Tributo", p->soap_type() == SOAP_TYPE_afip3__Tributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__Tributo(struct soap *soap, const char *URL, afip3__Tributo const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:Tributo", p->soap_type() == SOAP_TYPE_afip3__Tributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__Tributo(struct soap *soap, const char *URL, afip3__Tributo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:Tributo", p->soap_type() == SOAP_TYPE_afip3__Tributo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__Tributo * SOAP_FMAC4 soap_get_afip3__Tributo(struct soap*, afip3__Tributo *, const char*, const char*);

inline int soap_read_afip3__Tributo(struct soap *soap, afip3__Tributo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__Tributo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__Tributo(struct soap *soap, const char *URL, afip3__Tributo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__Tributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__Tributo(struct soap *soap, afip3__Tributo *p)
{
	if (::soap_read_afip3__Tributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfTributo_DEFINED
#define SOAP_TYPE_afip3__ArrayOfTributo_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfTributo(struct soap*, const char*, int, const afip3__ArrayOfTributo *, const char*);
SOAP_FMAC3 afip3__ArrayOfTributo * SOAP_FMAC4 soap_in_afip3__ArrayOfTributo(struct soap*, const char*, afip3__ArrayOfTributo *, const char*);
SOAP_FMAC1 afip3__ArrayOfTributo * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfTributo(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfTributo * soap_new_afip3__ArrayOfTributo(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfTributo(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfTributo * soap_new_req_afip3__ArrayOfTributo(
	struct soap *soap)
{
	afip3__ArrayOfTributo *_p = ::soap_new_afip3__ArrayOfTributo(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfTributo * soap_new_set_afip3__ArrayOfTributo(
	struct soap *soap,
	const std::vector<afip3__Tributo *> & Tributo)
{
	afip3__ArrayOfTributo *_p = ::soap_new_afip3__ArrayOfTributo(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfTributo::Tributo = Tributo;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfTributo(struct soap *soap, afip3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfTributo(struct soap *soap, const char *URL, afip3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfTributo(struct soap *soap, const char *URL, afip3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfTributo(struct soap *soap, const char *URL, afip3__ArrayOfTributo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfTributo", p->soap_type() == SOAP_TYPE_afip3__ArrayOfTributo ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfTributo * SOAP_FMAC4 soap_get_afip3__ArrayOfTributo(struct soap*, afip3__ArrayOfTributo *, const char*, const char*);

inline int soap_read_afip3__ArrayOfTributo(struct soap *soap, afip3__ArrayOfTributo *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfTributo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfTributo(struct soap *soap, const char *URL, afip3__ArrayOfTributo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfTributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfTributo(struct soap *soap, afip3__ArrayOfTributo *p)
{
	if (::soap_read_afip3__ArrayOfTributo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__CbteAsoc_DEFINED
#define SOAP_TYPE_afip3__CbteAsoc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__CbteAsoc(struct soap*, const char*, int, const afip3__CbteAsoc *, const char*);
SOAP_FMAC3 afip3__CbteAsoc * SOAP_FMAC4 soap_in_afip3__CbteAsoc(struct soap*, const char*, afip3__CbteAsoc *, const char*);
SOAP_FMAC1 afip3__CbteAsoc * SOAP_FMAC2 soap_instantiate_afip3__CbteAsoc(struct soap*, int, const char*, const char*, size_t*);

inline afip3__CbteAsoc * soap_new_afip3__CbteAsoc(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__CbteAsoc(soap, n, NULL, NULL, NULL);
}

inline afip3__CbteAsoc * soap_new_req_afip3__CbteAsoc(
	struct soap *soap,
	int Tipo,
	int PtoVta,
	LONG64 Nro)
{
	afip3__CbteAsoc *_p = ::soap_new_afip3__CbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__CbteAsoc::Tipo = Tipo;
		_p->afip3__CbteAsoc::PtoVta = PtoVta;
		_p->afip3__CbteAsoc::Nro = Nro;
	}
	return _p;
}

inline afip3__CbteAsoc * soap_new_set_afip3__CbteAsoc(
	struct soap *soap,
	int Tipo,
	int PtoVta,
	LONG64 Nro,
	std::string *Cuit,
	std::string *CbteFch)
{
	afip3__CbteAsoc *_p = ::soap_new_afip3__CbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__CbteAsoc::Tipo = Tipo;
		_p->afip3__CbteAsoc::PtoVta = PtoVta;
		_p->afip3__CbteAsoc::Nro = Nro;
		_p->afip3__CbteAsoc::Cuit = Cuit;
		_p->afip3__CbteAsoc::CbteFch = CbteFch;
	}
	return _p;
}

inline int soap_write_afip3__CbteAsoc(struct soap *soap, afip3__CbteAsoc const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip3__CbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__CbteAsoc(struct soap *soap, const char *URL, afip3__CbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip3__CbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__CbteAsoc(struct soap *soap, const char *URL, afip3__CbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip3__CbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__CbteAsoc(struct soap *soap, const char *URL, afip3__CbteAsoc const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:CbteAsoc", p->soap_type() == SOAP_TYPE_afip3__CbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__CbteAsoc * SOAP_FMAC4 soap_get_afip3__CbteAsoc(struct soap*, afip3__CbteAsoc *, const char*, const char*);

inline int soap_read_afip3__CbteAsoc(struct soap *soap, afip3__CbteAsoc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__CbteAsoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__CbteAsoc(struct soap *soap, const char *URL, afip3__CbteAsoc *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__CbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__CbteAsoc(struct soap *soap, afip3__CbteAsoc *p)
{
	if (::soap_read_afip3__CbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfCbteAsoc_DEFINED
#define SOAP_TYPE_afip3__ArrayOfCbteAsoc_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfCbteAsoc(struct soap*, const char*, int, const afip3__ArrayOfCbteAsoc *, const char*);
SOAP_FMAC3 afip3__ArrayOfCbteAsoc * SOAP_FMAC4 soap_in_afip3__ArrayOfCbteAsoc(struct soap*, const char*, afip3__ArrayOfCbteAsoc *, const char*);
SOAP_FMAC1 afip3__ArrayOfCbteAsoc * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfCbteAsoc(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfCbteAsoc * soap_new_afip3__ArrayOfCbteAsoc(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfCbteAsoc(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfCbteAsoc * soap_new_req_afip3__ArrayOfCbteAsoc(
	struct soap *soap)
{
	afip3__ArrayOfCbteAsoc *_p = ::soap_new_afip3__ArrayOfCbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfCbteAsoc * soap_new_set_afip3__ArrayOfCbteAsoc(
	struct soap *soap,
	const std::vector<afip3__CbteAsoc *> & CbteAsoc)
{
	afip3__ArrayOfCbteAsoc *_p = ::soap_new_afip3__ArrayOfCbteAsoc(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfCbteAsoc::CbteAsoc = CbteAsoc;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfCbteAsoc(struct soap *soap, afip3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, afip3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, afip3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, afip3__ArrayOfCbteAsoc const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfCbteAsoc", p->soap_type() == SOAP_TYPE_afip3__ArrayOfCbteAsoc ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfCbteAsoc * SOAP_FMAC4 soap_get_afip3__ArrayOfCbteAsoc(struct soap*, afip3__ArrayOfCbteAsoc *, const char*, const char*);

inline int soap_read_afip3__ArrayOfCbteAsoc(struct soap *soap, afip3__ArrayOfCbteAsoc *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfCbteAsoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfCbteAsoc(struct soap *soap, const char *URL, afip3__ArrayOfCbteAsoc *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfCbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfCbteAsoc(struct soap *soap, afip3__ArrayOfCbteAsoc *p)
{
	if (::soap_read_afip3__ArrayOfCbteAsoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FEDetRequest_DEFINED
#define SOAP_TYPE_afip3__FEDetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FEDetRequest(struct soap*, const char*, int, const afip3__FEDetRequest *, const char*);
SOAP_FMAC3 afip3__FEDetRequest * SOAP_FMAC4 soap_in_afip3__FEDetRequest(struct soap*, const char*, afip3__FEDetRequest *, const char*);
SOAP_FMAC1 afip3__FEDetRequest * SOAP_FMAC2 soap_instantiate_afip3__FEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FEDetRequest * soap_new_afip3__FEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FEDetRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FEDetRequest * soap_new_req_afip3__FEDetRequest(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta,
	double ImpTotal,
	double ImpTotConc,
	double ImpNeto,
	double ImpOpEx,
	double ImpTrib,
	double ImpIVA,
	double MonCotiz)
{
	afip3__FEDetRequest *_p = ::soap_new_afip3__FEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetRequest::Concepto = Concepto;
		_p->afip3__FEDetRequest::DocTipo = DocTipo;
		_p->afip3__FEDetRequest::DocNro = DocNro;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz;
	}
	return _p;
}

inline afip3__FEDetRequest * soap_new_set_afip3__FEDetRequest(
	struct soap *soap,
	int Concepto,
	int DocTipo,
	LONG64 DocNro,
	LONG64 CbteDesde,
	LONG64 CbteHasta,
	std::string *CbteFch,
	double ImpTotal,
	double ImpTotConc,
	double ImpNeto,
	double ImpOpEx,
	double ImpTrib,
	double ImpIVA,
	std::string *FchServDesde,
	std::string *FchServHasta,
	std::string *FchVtoPago,
	std::string *MonId,
	double MonCotiz,
	afip3__ArrayOfCbteAsoc *CbtesAsoc,
	afip3__ArrayOfTributo *Tributos,
	afip3__ArrayOfAlicIva *Iva,
	afip3__ArrayOfOpcional *Opcionales,
	afip3__ArrayOfComprador *Compradores)
{
	afip3__FEDetRequest *_p = ::soap_new_afip3__FEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetRequest::Concepto = Concepto;
		_p->afip3__FEDetRequest::DocTipo = DocTipo;
		_p->afip3__FEDetRequest::DocNro = DocNro;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta;
		_p->afip3__FEDetRequest::CbteFch = CbteFch;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA;
		_p->afip3__FEDetRequest::FchServDesde = FchServDesde;
		_p->afip3__FEDetRequest::FchServHasta = FchServHasta;
		_p->afip3__FEDetRequest::FchVtoPago = FchVtoPago;
		_p->afip3__FEDetRequest::MonId = MonId;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz;
		_p->afip3__FEDetRequest::CbtesAsoc = CbtesAsoc;
		_p->afip3__FEDetRequest::Tributos = Tributos;
		_p->afip3__FEDetRequest::Iva = Iva;
		_p->afip3__FEDetRequest::Opcionales = Opcionales;
		_p->afip3__FEDetRequest::Compradores = Compradores;
	}
	return _p;
}

inline int soap_write_afip3__FEDetRequest(struct soap *soap, afip3__FEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FEDetRequest(struct soap *soap, const char *URL, afip3__FEDetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FEDetRequest(struct soap *soap, const char *URL, afip3__FEDetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FEDetRequest(struct soap *soap, const char *URL, afip3__FEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FEDetRequest * SOAP_FMAC4 soap_get_afip3__FEDetRequest(struct soap*, afip3__FEDetRequest *, const char*, const char*);

inline int soap_read_afip3__FEDetRequest(struct soap *soap, afip3__FEDetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FEDetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FEDetRequest(struct soap *soap, const char *URL, afip3__FEDetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FEDetRequest(struct soap *soap, afip3__FEDetRequest *p)
{
	if (::soap_read_afip3__FEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAEDetRequest_DEFINED
#define SOAP_TYPE_afip3__FECAEDetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAEDetRequest(struct soap*, const char*, int, const afip3__FECAEDetRequest *, const char*);
SOAP_FMAC3 afip3__FECAEDetRequest * SOAP_FMAC4 soap_in_afip3__FECAEDetRequest(struct soap*, const char*, afip3__FECAEDetRequest *, const char*);
SOAP_FMAC1 afip3__FECAEDetRequest * SOAP_FMAC2 soap_instantiate_afip3__FECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAEDetRequest * soap_new_afip3__FECAEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAEDetRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAEDetRequest * soap_new_req_afip3__FECAEDetRequest(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	double MonCotiz__1)
{
	afip3__FECAEDetRequest *_p = ::soap_new_afip3__FECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetRequest::Concepto = Concepto__1;
		_p->afip3__FEDetRequest::DocTipo = DocTipo__1;
		_p->afip3__FEDetRequest::DocNro = DocNro__1;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz__1;
	}
	return _p;
}

inline afip3__FECAEDetRequest * soap_new_set_afip3__FECAEDetRequest(
	struct soap *soap,
	int Concepto__1,
	int DocTipo__1,
	LONG64 DocNro__1,
	LONG64 CbteDesde__1,
	LONG64 CbteHasta__1,
	std::string *CbteFch__1,
	double ImpTotal__1,
	double ImpTotConc__1,
	double ImpNeto__1,
	double ImpOpEx__1,
	double ImpTrib__1,
	double ImpIVA__1,
	std::string *FchServDesde__1,
	std::string *FchServHasta__1,
	std::string *FchVtoPago__1,
	std::string *MonId__1,
	double MonCotiz__1,
	afip3__ArrayOfCbteAsoc *CbtesAsoc__1,
	afip3__ArrayOfTributo *Tributos__1,
	afip3__ArrayOfAlicIva *Iva__1,
	afip3__ArrayOfOpcional *Opcionales__1,
	afip3__ArrayOfComprador *Compradores__1)
{
	afip3__FECAEDetRequest *_p = ::soap_new_afip3__FECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEDetRequest::Concepto = Concepto__1;
		_p->afip3__FEDetRequest::DocTipo = DocTipo__1;
		_p->afip3__FEDetRequest::DocNro = DocNro__1;
		_p->afip3__FEDetRequest::CbteDesde = CbteDesde__1;
		_p->afip3__FEDetRequest::CbteHasta = CbteHasta__1;
		_p->afip3__FEDetRequest::CbteFch = CbteFch__1;
		_p->afip3__FEDetRequest::ImpTotal = ImpTotal__1;
		_p->afip3__FEDetRequest::ImpTotConc = ImpTotConc__1;
		_p->afip3__FEDetRequest::ImpNeto = ImpNeto__1;
		_p->afip3__FEDetRequest::ImpOpEx = ImpOpEx__1;
		_p->afip3__FEDetRequest::ImpTrib = ImpTrib__1;
		_p->afip3__FEDetRequest::ImpIVA = ImpIVA__1;
		_p->afip3__FEDetRequest::FchServDesde = FchServDesde__1;
		_p->afip3__FEDetRequest::FchServHasta = FchServHasta__1;
		_p->afip3__FEDetRequest::FchVtoPago = FchVtoPago__1;
		_p->afip3__FEDetRequest::MonId = MonId__1;
		_p->afip3__FEDetRequest::MonCotiz = MonCotiz__1;
		_p->afip3__FEDetRequest::CbtesAsoc = CbtesAsoc__1;
		_p->afip3__FEDetRequest::Tributos = Tributos__1;
		_p->afip3__FEDetRequest::Iva = Iva__1;
		_p->afip3__FEDetRequest::Opcionales = Opcionales__1;
		_p->afip3__FEDetRequest::Compradores = Compradores__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAEDetRequest(struct soap *soap, afip3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAEDetRequest(struct soap *soap, const char *URL, afip3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAEDetRequest(struct soap *soap, const char *URL, afip3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAEDetRequest(struct soap *soap, const char *URL, afip3__FECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__FECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAEDetRequest * SOAP_FMAC4 soap_get_afip3__FECAEDetRequest(struct soap*, afip3__FECAEDetRequest *, const char*, const char*);

inline int soap_read_afip3__FECAEDetRequest(struct soap *soap, afip3__FECAEDetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAEDetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAEDetRequest(struct soap *soap, const char *URL, afip3__FECAEDetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAEDetRequest(struct soap *soap, afip3__FECAEDetRequest *p)
{
	if (::soap_read_afip3__FECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__ArrayOfFECAEDetRequest_DEFINED
#define SOAP_TYPE_afip3__ArrayOfFECAEDetRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__ArrayOfFECAEDetRequest(struct soap*, const char*, int, const afip3__ArrayOfFECAEDetRequest *, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEDetRequest * SOAP_FMAC4 soap_in_afip3__ArrayOfFECAEDetRequest(struct soap*, const char*, afip3__ArrayOfFECAEDetRequest *, const char*);
SOAP_FMAC1 afip3__ArrayOfFECAEDetRequest * SOAP_FMAC2 soap_instantiate_afip3__ArrayOfFECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__ArrayOfFECAEDetRequest * soap_new_afip3__ArrayOfFECAEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__ArrayOfFECAEDetRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__ArrayOfFECAEDetRequest * soap_new_req_afip3__ArrayOfFECAEDetRequest(
	struct soap *soap)
{
	afip3__ArrayOfFECAEDetRequest *_p = ::soap_new_afip3__ArrayOfFECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__ArrayOfFECAEDetRequest * soap_new_set_afip3__ArrayOfFECAEDetRequest(
	struct soap *soap,
	const std::vector<afip3__FECAEDetRequest *> & FECAEDetRequest)
{
	afip3__ArrayOfFECAEDetRequest *_p = ::soap_new_afip3__ArrayOfFECAEDetRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__ArrayOfFECAEDetRequest::FECAEDetRequest = FECAEDetRequest;
	}
	return _p;
}

inline int soap_write_afip3__ArrayOfFECAEDetRequest(struct soap *soap, afip3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetRequest const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:ArrayOfFECAEDetRequest", p->soap_type() == SOAP_TYPE_afip3__ArrayOfFECAEDetRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__ArrayOfFECAEDetRequest * SOAP_FMAC4 soap_get_afip3__ArrayOfFECAEDetRequest(struct soap*, afip3__ArrayOfFECAEDetRequest *, const char*, const char*);

inline int soap_read_afip3__ArrayOfFECAEDetRequest(struct soap *soap, afip3__ArrayOfFECAEDetRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__ArrayOfFECAEDetRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__ArrayOfFECAEDetRequest(struct soap *soap, const char *URL, afip3__ArrayOfFECAEDetRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__ArrayOfFECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__ArrayOfFECAEDetRequest(struct soap *soap, afip3__ArrayOfFECAEDetRequest *p)
{
	if (::soap_read_afip3__ArrayOfFECAEDetRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECabRequest_DEFINED
#define SOAP_TYPE_afip3__FECabRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECabRequest(struct soap*, const char*, int, const afip3__FECabRequest *, const char*);
SOAP_FMAC3 afip3__FECabRequest * SOAP_FMAC4 soap_in_afip3__FECabRequest(struct soap*, const char*, afip3__FECabRequest *, const char*);
SOAP_FMAC1 afip3__FECabRequest * SOAP_FMAC2 soap_instantiate_afip3__FECabRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECabRequest * soap_new_afip3__FECabRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECabRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FECabRequest * soap_new_req_afip3__FECabRequest(
	struct soap *soap,
	int CantReg,
	int PtoVta,
	int CbteTipo)
{
	afip3__FECabRequest *_p = ::soap_new_afip3__FECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabRequest::CantReg = CantReg;
		_p->afip3__FECabRequest::PtoVta = PtoVta;
		_p->afip3__FECabRequest::CbteTipo = CbteTipo;
	}
	return _p;
}

inline afip3__FECabRequest * soap_new_set_afip3__FECabRequest(
	struct soap *soap,
	int CantReg,
	int PtoVta,
	int CbteTipo)
{
	afip3__FECabRequest *_p = ::soap_new_afip3__FECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabRequest::CantReg = CantReg;
		_p->afip3__FECabRequest::PtoVta = PtoVta;
		_p->afip3__FECabRequest::CbteTipo = CbteTipo;
	}
	return _p;
}

inline int soap_write_afip3__FECabRequest(struct soap *soap, afip3__FECabRequest const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECabRequest(struct soap *soap, const char *URL, afip3__FECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECabRequest(struct soap *soap, const char *URL, afip3__FECabRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECabRequest(struct soap *soap, const char *URL, afip3__FECabRequest const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECabRequest * SOAP_FMAC4 soap_get_afip3__FECabRequest(struct soap*, afip3__FECabRequest *, const char*, const char*);

inline int soap_read_afip3__FECabRequest(struct soap *soap, afip3__FECabRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECabRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECabRequest(struct soap *soap, const char *URL, afip3__FECabRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECabRequest(struct soap *soap, afip3__FECabRequest *p)
{
	if (::soap_read_afip3__FECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAECabRequest_DEFINED
#define SOAP_TYPE_afip3__FECAECabRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAECabRequest(struct soap*, const char*, int, const afip3__FECAECabRequest *, const char*);
SOAP_FMAC3 afip3__FECAECabRequest * SOAP_FMAC4 soap_in_afip3__FECAECabRequest(struct soap*, const char*, afip3__FECAECabRequest *, const char*);
SOAP_FMAC1 afip3__FECAECabRequest * SOAP_FMAC2 soap_instantiate_afip3__FECAECabRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAECabRequest * soap_new_afip3__FECAECabRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAECabRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAECabRequest * soap_new_req_afip3__FECAECabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	afip3__FECAECabRequest *_p = ::soap_new_afip3__FECAECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabRequest::CantReg = CantReg__1;
		_p->afip3__FECabRequest::PtoVta = PtoVta__1;
		_p->afip3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline afip3__FECAECabRequest * soap_new_set_afip3__FECAECabRequest(
	struct soap *soap,
	int CantReg__1,
	int PtoVta__1,
	int CbteTipo__1)
{
	afip3__FECAECabRequest *_p = ::soap_new_afip3__FECAECabRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECabRequest::CantReg = CantReg__1;
		_p->afip3__FECabRequest::PtoVta = PtoVta__1;
		_p->afip3__FECabRequest::CbteTipo = CbteTipo__1;
	}
	return _p;
}

inline int soap_write_afip3__FECAECabRequest(struct soap *soap, afip3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAECabRequest(struct soap *soap, const char *URL, afip3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAECabRequest(struct soap *soap, const char *URL, afip3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAECabRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAECabRequest(struct soap *soap, const char *URL, afip3__FECAECabRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAECabRequest", p->soap_type() == SOAP_TYPE_afip3__FECAECabRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAECabRequest * SOAP_FMAC4 soap_get_afip3__FECAECabRequest(struct soap*, afip3__FECAECabRequest *, const char*, const char*);

inline int soap_read_afip3__FECAECabRequest(struct soap *soap, afip3__FECAECabRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAECabRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAECabRequest(struct soap *soap, const char *URL, afip3__FECAECabRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAECabRequest(struct soap *soap, afip3__FECAECabRequest *p)
{
	if (::soap_read_afip3__FECAECabRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FECAERequest_DEFINED
#define SOAP_TYPE_afip3__FECAERequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FECAERequest(struct soap*, const char*, int, const afip3__FECAERequest *, const char*);
SOAP_FMAC3 afip3__FECAERequest * SOAP_FMAC4 soap_in_afip3__FECAERequest(struct soap*, const char*, afip3__FECAERequest *, const char*);
SOAP_FMAC1 afip3__FECAERequest * SOAP_FMAC2 soap_instantiate_afip3__FECAERequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FECAERequest * soap_new_afip3__FECAERequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FECAERequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FECAERequest * soap_new_req_afip3__FECAERequest(
	struct soap *soap)
{
	afip3__FECAERequest *_p = ::soap_new_afip3__FECAERequest(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip3__FECAERequest * soap_new_set_afip3__FECAERequest(
	struct soap *soap,
	afip3__FECAECabRequest *FeCabReq,
	afip3__ArrayOfFECAEDetRequest *FeDetReq)
{
	afip3__FECAERequest *_p = ::soap_new_afip3__FECAERequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FECAERequest::FeCabReq = FeCabReq;
		_p->afip3__FECAERequest::FeDetReq = FeDetReq;
	}
	return _p;
}

inline int soap_write_afip3__FECAERequest(struct soap *soap, afip3__FECAERequest const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAERequest", p->soap_type() == SOAP_TYPE_afip3__FECAERequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FECAERequest(struct soap *soap, const char *URL, afip3__FECAERequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FECAERequest", p->soap_type() == SOAP_TYPE_afip3__FECAERequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FECAERequest(struct soap *soap, const char *URL, afip3__FECAERequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAERequest", p->soap_type() == SOAP_TYPE_afip3__FECAERequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FECAERequest(struct soap *soap, const char *URL, afip3__FECAERequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FECAERequest", p->soap_type() == SOAP_TYPE_afip3__FECAERequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FECAERequest * SOAP_FMAC4 soap_get_afip3__FECAERequest(struct soap*, afip3__FECAERequest *, const char*, const char*);

inline int soap_read_afip3__FECAERequest(struct soap *soap, afip3__FECAERequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FECAERequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FECAERequest(struct soap *soap, const char *URL, afip3__FECAERequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FECAERequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FECAERequest(struct soap *soap, afip3__FECAERequest *p)
{
	if (::soap_read_afip3__FECAERequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip3__FEAuthRequest_DEFINED
#define SOAP_TYPE_afip3__FEAuthRequest_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip3__FEAuthRequest(struct soap*, const char*, int, const afip3__FEAuthRequest *, const char*);
SOAP_FMAC3 afip3__FEAuthRequest * SOAP_FMAC4 soap_in_afip3__FEAuthRequest(struct soap*, const char*, afip3__FEAuthRequest *, const char*);
SOAP_FMAC1 afip3__FEAuthRequest * SOAP_FMAC2 soap_instantiate_afip3__FEAuthRequest(struct soap*, int, const char*, const char*, size_t*);

inline afip3__FEAuthRequest * soap_new_afip3__FEAuthRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip3__FEAuthRequest(soap, n, NULL, NULL, NULL);
}

inline afip3__FEAuthRequest * soap_new_req_afip3__FEAuthRequest(
	struct soap *soap,
	LONG64 Cuit)
{
	afip3__FEAuthRequest *_p = ::soap_new_afip3__FEAuthRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEAuthRequest::Cuit = Cuit;
	}
	return _p;
}

inline afip3__FEAuthRequest * soap_new_set_afip3__FEAuthRequest(
	struct soap *soap,
	std::string *Token,
	std::string *Sign,
	LONG64 Cuit)
{
	afip3__FEAuthRequest *_p = ::soap_new_afip3__FEAuthRequest(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->afip3__FEAuthRequest::Token = Token;
		_p->afip3__FEAuthRequest::Sign = Sign;
		_p->afip3__FEAuthRequest::Cuit = Cuit;
	}
	return _p;
}

inline int soap_write_afip3__FEAuthRequest(struct soap *soap, afip3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip3__FEAuthRequest ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip3__FEAuthRequest(struct soap *soap, const char *URL, afip3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip3__FEAuthRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip3__FEAuthRequest(struct soap *soap, const char *URL, afip3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip3__FEAuthRequest ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip3__FEAuthRequest(struct soap *soap, const char *URL, afip3__FEAuthRequest const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip3:FEAuthRequest", p->soap_type() == SOAP_TYPE_afip3__FEAuthRequest ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip3__FEAuthRequest * SOAP_FMAC4 soap_get_afip3__FEAuthRequest(struct soap*, afip3__FEAuthRequest *, const char*, const char*);

inline int soap_read_afip3__FEAuthRequest(struct soap *soap, afip3__FEAuthRequest *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip3__FEAuthRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip3__FEAuthRequest(struct soap *soap, const char *URL, afip3__FEAuthRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip3__FEAuthRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip3__FEAuthRequest(struct soap *soap, afip3__FEAuthRequest *p)
{
	if (::soap_read_afip3__FEAuthRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_afip2__LoginFault_DEFINED
#define SOAP_TYPE_afip2__LoginFault_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out_afip2__LoginFault(struct soap*, const char*, int, const afip2__LoginFault *, const char*);
SOAP_FMAC3 afip2__LoginFault * SOAP_FMAC4 soap_in_afip2__LoginFault(struct soap*, const char*, afip2__LoginFault *, const char*);
SOAP_FMAC1 afip2__LoginFault * SOAP_FMAC2 soap_instantiate_afip2__LoginFault(struct soap*, int, const char*, const char*, size_t*);

inline afip2__LoginFault * soap_new_afip2__LoginFault(struct soap *soap, int n = -1)
{
	return soap_instantiate_afip2__LoginFault(soap, n, NULL, NULL, NULL);
}

inline afip2__LoginFault * soap_new_req_afip2__LoginFault(
	struct soap *soap)
{
	afip2__LoginFault *_p = ::soap_new_afip2__LoginFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline afip2__LoginFault * soap_new_set_afip2__LoginFault(
	struct soap *soap)
{
	afip2__LoginFault *_p = ::soap_new_afip2__LoginFault(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline int soap_write_afip2__LoginFault(struct soap *soap, afip2__LoginFault const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip2:LoginFault", p->soap_type() == SOAP_TYPE_afip2__LoginFault ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_afip2__LoginFault(struct soap *soap, const char *URL, afip2__LoginFault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip2:LoginFault", p->soap_type() == SOAP_TYPE_afip2__LoginFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_afip2__LoginFault(struct soap *soap, const char *URL, afip2__LoginFault const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip2:LoginFault", p->soap_type() == SOAP_TYPE_afip2__LoginFault ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_afip2__LoginFault(struct soap *soap, const char *URL, afip2__LoginFault const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip2:LoginFault", p->soap_type() == SOAP_TYPE_afip2__LoginFault ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 afip2__LoginFault * SOAP_FMAC4 soap_get_afip2__LoginFault(struct soap*, afip2__LoginFault *, const char*, const char*);

inline int soap_read_afip2__LoginFault(struct soap *soap, afip2__LoginFault *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get_afip2__LoginFault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_afip2__LoginFault(struct soap *soap, const char *URL, afip2__LoginFault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_afip2__LoginFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_afip2__LoginFault(struct soap *soap, afip2__LoginFault *p)
{
	if (::soap_read_afip2__LoginFault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip1__loginCmsResponse_DEFINED
#define SOAP_TYPE__afip1__loginCmsResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip1__loginCmsResponse(struct soap*, const char*, int, const _afip1__loginCmsResponse *, const char*);
SOAP_FMAC3 _afip1__loginCmsResponse * SOAP_FMAC4 soap_in__afip1__loginCmsResponse(struct soap*, const char*, _afip1__loginCmsResponse *, const char*);
SOAP_FMAC1 _afip1__loginCmsResponse * SOAP_FMAC2 soap_instantiate__afip1__loginCmsResponse(struct soap*, int, const char*, const char*, size_t*);

inline _afip1__loginCmsResponse * soap_new__afip1__loginCmsResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip1__loginCmsResponse(soap, n, NULL, NULL, NULL);
}

inline _afip1__loginCmsResponse * soap_new_req__afip1__loginCmsResponse(
	struct soap *soap,
	const std::string& loginCmsReturn)
{
	_afip1__loginCmsResponse *_p = ::soap_new__afip1__loginCmsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip1__loginCmsResponse::loginCmsReturn = loginCmsReturn;
	}
	return _p;
}

inline _afip1__loginCmsResponse * soap_new_set__afip1__loginCmsResponse(
	struct soap *soap,
	const std::string& loginCmsReturn)
{
	_afip1__loginCmsResponse *_p = ::soap_new__afip1__loginCmsResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip1__loginCmsResponse::loginCmsReturn = loginCmsReturn;
	}
	return _p;
}

inline int soap_write__afip1__loginCmsResponse(struct soap *soap, _afip1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip1:loginCmsResponse", p->soap_type() == SOAP_TYPE__afip1__loginCmsResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip1__loginCmsResponse(struct soap *soap, const char *URL, _afip1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip1:loginCmsResponse", p->soap_type() == SOAP_TYPE__afip1__loginCmsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip1__loginCmsResponse(struct soap *soap, const char *URL, _afip1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip1:loginCmsResponse", p->soap_type() == SOAP_TYPE__afip1__loginCmsResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip1__loginCmsResponse(struct soap *soap, const char *URL, _afip1__loginCmsResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip1:loginCmsResponse", p->soap_type() == SOAP_TYPE__afip1__loginCmsResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip1__loginCmsResponse * SOAP_FMAC4 soap_get__afip1__loginCmsResponse(struct soap*, _afip1__loginCmsResponse *, const char*, const char*);

inline int soap_read__afip1__loginCmsResponse(struct soap *soap, _afip1__loginCmsResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip1__loginCmsResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip1__loginCmsResponse(struct soap *soap, const char *URL, _afip1__loginCmsResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip1__loginCmsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip1__loginCmsResponse(struct soap *soap, _afip1__loginCmsResponse *p)
{
	if (::soap_read__afip1__loginCmsResponse(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__afip1__loginCms_DEFINED
#define SOAP_TYPE__afip1__loginCms_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__afip1__loginCms(struct soap*, const char*, int, const _afip1__loginCms *, const char*);
SOAP_FMAC3 _afip1__loginCms * SOAP_FMAC4 soap_in__afip1__loginCms(struct soap*, const char*, _afip1__loginCms *, const char*);
SOAP_FMAC1 _afip1__loginCms * SOAP_FMAC2 soap_instantiate__afip1__loginCms(struct soap*, int, const char*, const char*, size_t*);

inline _afip1__loginCms * soap_new__afip1__loginCms(struct soap *soap, int n = -1)
{
	return soap_instantiate__afip1__loginCms(soap, n, NULL, NULL, NULL);
}

inline _afip1__loginCms * soap_new_req__afip1__loginCms(
	struct soap *soap,
	const std::string& in0)
{
	_afip1__loginCms *_p = ::soap_new__afip1__loginCms(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip1__loginCms::in0 = in0;
	}
	return _p;
}

inline _afip1__loginCms * soap_new_set__afip1__loginCms(
	struct soap *soap,
	const std::string& in0)
{
	_afip1__loginCms *_p = ::soap_new__afip1__loginCms(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_afip1__loginCms::in0 = in0;
	}
	return _p;
}

inline int soap_write__afip1__loginCms(struct soap *soap, _afip1__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip1:loginCms", p->soap_type() == SOAP_TYPE__afip1__loginCms ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__afip1__loginCms(struct soap *soap, const char *URL, _afip1__loginCms const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(p->soap_serialize(soap)), 0) || p->soap_put(soap, "afip1:loginCms", p->soap_type() == SOAP_TYPE__afip1__loginCms ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__afip1__loginCms(struct soap *soap, const char *URL, _afip1__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip1:loginCms", p->soap_type() == SOAP_TYPE__afip1__loginCms ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__afip1__loginCms(struct soap *soap, const char *URL, _afip1__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "afip1:loginCms", p->soap_type() == SOAP_TYPE__afip1__loginCms ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _afip1__loginCms * SOAP_FMAC4 soap_get__afip1__loginCms(struct soap*, _afip1__loginCms *, const char*, const char*);

inline int soap_read__afip1__loginCms(struct soap *soap, _afip1__loginCms *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__afip1__loginCms(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__afip1__loginCms(struct soap *soap, const char *URL, _afip1__loginCms *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__afip1__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__afip1__loginCms(struct soap *soap, _afip1__loginCms *p)
{
	if (::soap_read__afip1__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize_SOAP_ENV__Fault(soap, p)), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Fault(soap, p)), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Fault(soap, p)), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize_SOAP_ENV__Reason(soap, p)), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Reason(soap, p)), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Reason(soap, p)), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Code(soap, p)), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Code(soap, p)), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Header(soap, p)), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposPaises_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposPaises_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposPaises(struct soap*, struct __afip5__FEParamGetTiposPaises *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposPaises(struct soap*, const struct __afip5__FEParamGetTiposPaises *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposPaises(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposPaises *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposPaises * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposPaises(struct soap*, const char*, struct __afip5__FEParamGetTiposPaises *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposPaises * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposPaises(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposPaises * soap_new___afip5__FEParamGetTiposPaises(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposPaises(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposPaises * soap_new_req___afip5__FEParamGetTiposPaises(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposPaises *_p = ::soap_new___afip5__FEParamGetTiposPaises(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposPaises(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposPaises * soap_new_set___afip5__FEParamGetTiposPaises(
	struct soap *soap,
	_afip3__FEParamGetTiposPaises *afip3__FEParamGetTiposPaises)
{
	struct __afip5__FEParamGetTiposPaises *_p = ::soap_new___afip5__FEParamGetTiposPaises(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposPaises(soap, _p);
		_p->afip3__FEParamGetTiposPaises = afip3__FEParamGetTiposPaises;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposPaises(struct soap*, const struct __afip5__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposPaises(struct soap *soap, struct __afip5__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposPaises(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposPaises(soap, p, "-afip5:FEParamGetTiposPaises", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposPaises(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposPaises(soap, p, "-afip5:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposPaises(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposPaises(soap, p, "-afip5:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposPaises(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposPaises(soap, p, "-afip5:FEParamGetTiposPaises", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposPaises * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposPaises(struct soap*, struct __afip5__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposPaises(struct soap *soap, struct __afip5__FEParamGetTiposPaises *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposPaises(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposPaises(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposPaises *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposPaises(struct soap *soap, struct __afip5__FEParamGetTiposPaises *p)
{
	if (::soap_read___afip5__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposDoc_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposDoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposDoc(struct soap*, struct __afip5__FEParamGetTiposDoc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposDoc(struct soap*, const struct __afip5__FEParamGetTiposDoc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposDoc(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposDoc *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposDoc * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposDoc(struct soap*, const char*, struct __afip5__FEParamGetTiposDoc *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposDoc * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposDoc(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposDoc * soap_new___afip5__FEParamGetTiposDoc(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposDoc(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposDoc * soap_new_req___afip5__FEParamGetTiposDoc(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposDoc *_p = ::soap_new___afip5__FEParamGetTiposDoc(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposDoc(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposDoc * soap_new_set___afip5__FEParamGetTiposDoc(
	struct soap *soap,
	_afip3__FEParamGetTiposDoc *afip3__FEParamGetTiposDoc)
{
	struct __afip5__FEParamGetTiposDoc *_p = ::soap_new___afip5__FEParamGetTiposDoc(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposDoc(soap, _p);
		_p->afip3__FEParamGetTiposDoc = afip3__FEParamGetTiposDoc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposDoc(struct soap*, const struct __afip5__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposDoc(struct soap *soap, struct __afip5__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposDoc(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposDoc(soap, p, "-afip5:FEParamGetTiposDoc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposDoc(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposDoc(soap, p, "-afip5:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposDoc(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposDoc(soap, p, "-afip5:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposDoc(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposDoc(soap, p, "-afip5:FEParamGetTiposDoc", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposDoc * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposDoc(struct soap*, struct __afip5__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposDoc(struct soap *soap, struct __afip5__FEParamGetTiposDoc *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposDoc(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposDoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposDoc *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposDoc(struct soap *soap, struct __afip5__FEParamGetTiposDoc *p)
{
	if (::soap_read___afip5__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposCbte_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposCbte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposCbte(struct soap*, struct __afip5__FEParamGetTiposCbte *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposCbte(struct soap*, const struct __afip5__FEParamGetTiposCbte *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposCbte(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposCbte *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposCbte * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposCbte(struct soap*, const char*, struct __afip5__FEParamGetTiposCbte *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposCbte * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposCbte(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposCbte * soap_new___afip5__FEParamGetTiposCbte(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposCbte(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposCbte * soap_new_req___afip5__FEParamGetTiposCbte(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposCbte *_p = ::soap_new___afip5__FEParamGetTiposCbte(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposCbte(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposCbte * soap_new_set___afip5__FEParamGetTiposCbte(
	struct soap *soap,
	_afip3__FEParamGetTiposCbte *afip3__FEParamGetTiposCbte)
{
	struct __afip5__FEParamGetTiposCbte *_p = ::soap_new___afip5__FEParamGetTiposCbte(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposCbte(soap, _p);
		_p->afip3__FEParamGetTiposCbte = afip3__FEParamGetTiposCbte;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposCbte(struct soap*, const struct __afip5__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposCbte(struct soap *soap, struct __afip5__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip5__FEParamGetTiposCbte(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposCbte(soap, p, "-afip5:FEParamGetTiposCbte", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposCbte(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposCbte(soap, p, "-afip5:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposCbte(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposCbte(soap, p, "-afip5:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposCbte(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposCbte(soap, p, "-afip5:FEParamGetTiposCbte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposCbte * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposCbte(struct soap*, struct __afip5__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposCbte(struct soap *soap, struct __afip5__FEParamGetTiposCbte *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposCbte(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposCbte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposCbte *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposCbte(struct soap *soap, struct __afip5__FEParamGetTiposCbte *p)
{
	if (::soap_read___afip5__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetPtosVenta_DEFINED
#define SOAP_TYPE___afip5__FEParamGetPtosVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetPtosVenta(struct soap*, struct __afip5__FEParamGetPtosVenta *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetPtosVenta(struct soap*, const struct __afip5__FEParamGetPtosVenta *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetPtosVenta(struct soap*, const char*, int, const struct __afip5__FEParamGetPtosVenta *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetPtosVenta * SOAP_FMAC4 soap_in___afip5__FEParamGetPtosVenta(struct soap*, const char*, struct __afip5__FEParamGetPtosVenta *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetPtosVenta * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetPtosVenta(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetPtosVenta * soap_new___afip5__FEParamGetPtosVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetPtosVenta(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetPtosVenta * soap_new_req___afip5__FEParamGetPtosVenta(
	struct soap *soap)
{
	struct __afip5__FEParamGetPtosVenta *_p = ::soap_new___afip5__FEParamGetPtosVenta(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetPtosVenta(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetPtosVenta * soap_new_set___afip5__FEParamGetPtosVenta(
	struct soap *soap,
	_afip3__FEParamGetPtosVenta *afip3__FEParamGetPtosVenta)
{
	struct __afip5__FEParamGetPtosVenta *_p = ::soap_new___afip5__FEParamGetPtosVenta(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetPtosVenta(soap, _p);
		_p->afip3__FEParamGetPtosVenta = afip3__FEParamGetPtosVenta;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetPtosVenta(struct soap*, const struct __afip5__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_write___afip5__FEParamGetPtosVenta(struct soap *soap, struct __afip5__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip5__FEParamGetPtosVenta(soap, p), 0) || ::soap_put___afip5__FEParamGetPtosVenta(soap, p, "-afip5:FEParamGetPtosVenta", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip5__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetPtosVenta(soap, p)), 0) || ::soap_put___afip5__FEParamGetPtosVenta(soap, p, "-afip5:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip5__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetPtosVenta(soap, p)), 0) || ::soap_put___afip5__FEParamGetPtosVenta(soap, p, "-afip5:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip5__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetPtosVenta(soap, p), 0) || ::soap_put___afip5__FEParamGetPtosVenta(soap, p, "-afip5:FEParamGetPtosVenta", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetPtosVenta * SOAP_FMAC4 soap_get___afip5__FEParamGetPtosVenta(struct soap*, struct __afip5__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_read___afip5__FEParamGetPtosVenta(struct soap *soap, struct __afip5__FEParamGetPtosVenta *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetPtosVenta(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetPtosVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip5__FEParamGetPtosVenta *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetPtosVenta(struct soap *soap, struct __afip5__FEParamGetPtosVenta *p)
{
	if (::soap_read___afip5__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposConcepto_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposConcepto_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposConcepto(struct soap*, struct __afip5__FEParamGetTiposConcepto *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposConcepto(struct soap*, const struct __afip5__FEParamGetTiposConcepto *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposConcepto(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposConcepto * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposConcepto(struct soap*, const char*, struct __afip5__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposConcepto * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposConcepto(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposConcepto * soap_new___afip5__FEParamGetTiposConcepto(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposConcepto(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposConcepto * soap_new_req___afip5__FEParamGetTiposConcepto(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposConcepto *_p = ::soap_new___afip5__FEParamGetTiposConcepto(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposConcepto(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposConcepto * soap_new_set___afip5__FEParamGetTiposConcepto(
	struct soap *soap,
	_afip3__FEParamGetTiposConcepto *afip3__FEParamGetTiposConcepto)
{
	struct __afip5__FEParamGetTiposConcepto *_p = ::soap_new___afip5__FEParamGetTiposConcepto(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposConcepto(soap, _p);
		_p->afip3__FEParamGetTiposConcepto = afip3__FEParamGetTiposConcepto;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposConcepto(struct soap*, const struct __afip5__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposConcepto(struct soap *soap, struct __afip5__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposConcepto(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposConcepto(soap, p, "-afip5:FEParamGetTiposConcepto", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposConcepto(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposConcepto(soap, p, "-afip5:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposConcepto(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposConcepto(soap, p, "-afip5:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposConcepto(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposConcepto(soap, p, "-afip5:FEParamGetTiposConcepto", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposConcepto * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposConcepto(struct soap*, struct __afip5__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposConcepto(struct soap *soap, struct __afip5__FEParamGetTiposConcepto *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposConcepto(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposConcepto(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposConcepto *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposConcepto(struct soap *soap, struct __afip5__FEParamGetTiposConcepto *p)
{
	if (::soap_read___afip5__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposOpcional_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposOpcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposOpcional(struct soap*, struct __afip5__FEParamGetTiposOpcional *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposOpcional(struct soap*, const struct __afip5__FEParamGetTiposOpcional *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposOpcional(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposOpcional * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposOpcional(struct soap*, const char*, struct __afip5__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposOpcional * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposOpcional(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposOpcional * soap_new___afip5__FEParamGetTiposOpcional(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposOpcional(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposOpcional * soap_new_req___afip5__FEParamGetTiposOpcional(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposOpcional *_p = ::soap_new___afip5__FEParamGetTiposOpcional(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposOpcional(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposOpcional * soap_new_set___afip5__FEParamGetTiposOpcional(
	struct soap *soap,
	_afip3__FEParamGetTiposOpcional *afip3__FEParamGetTiposOpcional)
{
	struct __afip5__FEParamGetTiposOpcional *_p = ::soap_new___afip5__FEParamGetTiposOpcional(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposOpcional(soap, _p);
		_p->afip3__FEParamGetTiposOpcional = afip3__FEParamGetTiposOpcional;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposOpcional(struct soap*, const struct __afip5__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposOpcional(struct soap *soap, struct __afip5__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposOpcional(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposOpcional(soap, p, "-afip5:FEParamGetTiposOpcional", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposOpcional(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposOpcional(soap, p, "-afip5:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposOpcional(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposOpcional(soap, p, "-afip5:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposOpcional(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposOpcional(soap, p, "-afip5:FEParamGetTiposOpcional", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposOpcional * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposOpcional(struct soap*, struct __afip5__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposOpcional(struct soap *soap, struct __afip5__FEParamGetTiposOpcional *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposOpcional(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposOpcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposOpcional *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposOpcional(struct soap *soap, struct __afip5__FEParamGetTiposOpcional *p)
{
	if (::soap_read___afip5__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposIva_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposIva(struct soap*, struct __afip5__FEParamGetTiposIva *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposIva(struct soap*, const struct __afip5__FEParamGetTiposIva *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposIva(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposIva *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposIva * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposIva(struct soap*, const char*, struct __afip5__FEParamGetTiposIva *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposIva * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposIva(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposIva * soap_new___afip5__FEParamGetTiposIva(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposIva(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposIva * soap_new_req___afip5__FEParamGetTiposIva(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposIva *_p = ::soap_new___afip5__FEParamGetTiposIva(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposIva(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposIva * soap_new_set___afip5__FEParamGetTiposIva(
	struct soap *soap,
	_afip3__FEParamGetTiposIva *afip3__FEParamGetTiposIva)
{
	struct __afip5__FEParamGetTiposIva *_p = ::soap_new___afip5__FEParamGetTiposIva(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposIva(soap, _p);
		_p->afip3__FEParamGetTiposIva = afip3__FEParamGetTiposIva;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposIva(struct soap*, const struct __afip5__FEParamGetTiposIva *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposIva(struct soap *soap, struct __afip5__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposIva(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposIva(soap, p, "-afip5:FEParamGetTiposIva", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposIva(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposIva(soap, p, "-afip5:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposIva(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposIva(soap, p, "-afip5:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposIva(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposIva(soap, p, "-afip5:FEParamGetTiposIva", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposIva * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposIva(struct soap*, struct __afip5__FEParamGetTiposIva *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposIva(struct soap *soap, struct __afip5__FEParamGetTiposIva *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposIva(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposIva *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposIva(struct soap *soap, struct __afip5__FEParamGetTiposIva *p)
{
	if (::soap_read___afip5__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposMonedas_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposMonedas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposMonedas(struct soap*, struct __afip5__FEParamGetTiposMonedas *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposMonedas(struct soap*, const struct __afip5__FEParamGetTiposMonedas *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposMonedas(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposMonedas * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposMonedas(struct soap*, const char*, struct __afip5__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposMonedas * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposMonedas(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposMonedas * soap_new___afip5__FEParamGetTiposMonedas(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposMonedas(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposMonedas * soap_new_req___afip5__FEParamGetTiposMonedas(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposMonedas *_p = ::soap_new___afip5__FEParamGetTiposMonedas(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposMonedas(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposMonedas * soap_new_set___afip5__FEParamGetTiposMonedas(
	struct soap *soap,
	_afip3__FEParamGetTiposMonedas *afip3__FEParamGetTiposMonedas)
{
	struct __afip5__FEParamGetTiposMonedas *_p = ::soap_new___afip5__FEParamGetTiposMonedas(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposMonedas(soap, _p);
		_p->afip3__FEParamGetTiposMonedas = afip3__FEParamGetTiposMonedas;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposMonedas(struct soap*, const struct __afip5__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposMonedas(struct soap *soap, struct __afip5__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposMonedas(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposMonedas(soap, p, "-afip5:FEParamGetTiposMonedas", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposMonedas(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposMonedas(soap, p, "-afip5:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposMonedas(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposMonedas(soap, p, "-afip5:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposMonedas(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposMonedas(soap, p, "-afip5:FEParamGetTiposMonedas", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposMonedas * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposMonedas(struct soap*, struct __afip5__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposMonedas(struct soap *soap, struct __afip5__FEParamGetTiposMonedas *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposMonedas(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposMonedas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposMonedas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposMonedas(struct soap *soap, struct __afip5__FEParamGetTiposMonedas *p)
{
	if (::soap_read___afip5__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetTiposTributos_DEFINED
#define SOAP_TYPE___afip5__FEParamGetTiposTributos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetTiposTributos(struct soap*, struct __afip5__FEParamGetTiposTributos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetTiposTributos(struct soap*, const struct __afip5__FEParamGetTiposTributos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetTiposTributos(struct soap*, const char*, int, const struct __afip5__FEParamGetTiposTributos *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetTiposTributos * SOAP_FMAC4 soap_in___afip5__FEParamGetTiposTributos(struct soap*, const char*, struct __afip5__FEParamGetTiposTributos *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetTiposTributos * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetTiposTributos(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetTiposTributos * soap_new___afip5__FEParamGetTiposTributos(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetTiposTributos(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetTiposTributos * soap_new_req___afip5__FEParamGetTiposTributos(
	struct soap *soap)
{
	struct __afip5__FEParamGetTiposTributos *_p = ::soap_new___afip5__FEParamGetTiposTributos(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposTributos(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetTiposTributos * soap_new_set___afip5__FEParamGetTiposTributos(
	struct soap *soap,
	_afip3__FEParamGetTiposTributos *afip3__FEParamGetTiposTributos)
{
	struct __afip5__FEParamGetTiposTributos *_p = ::soap_new___afip5__FEParamGetTiposTributos(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetTiposTributos(soap, _p);
		_p->afip3__FEParamGetTiposTributos = afip3__FEParamGetTiposTributos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetTiposTributos(struct soap*, const struct __afip5__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_write___afip5__FEParamGetTiposTributos(struct soap *soap, struct __afip5__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip5__FEParamGetTiposTributos(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposTributos(soap, p, "-afip5:FEParamGetTiposTributos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposTributos(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposTributos(soap, p, "-afip5:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetTiposTributos(soap, p)), 0) || ::soap_put___afip5__FEParamGetTiposTributos(soap, p, "-afip5:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetTiposTributos(soap, p), 0) || ::soap_put___afip5__FEParamGetTiposTributos(soap, p, "-afip5:FEParamGetTiposTributos", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetTiposTributos * SOAP_FMAC4 soap_get___afip5__FEParamGetTiposTributos(struct soap*, struct __afip5__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_read___afip5__FEParamGetTiposTributos(struct soap *soap, struct __afip5__FEParamGetTiposTributos *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetTiposTributos(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetTiposTributos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip5__FEParamGetTiposTributos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetTiposTributos(struct soap *soap, struct __afip5__FEParamGetTiposTributos *p)
{
	if (::soap_read___afip5__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEParamGetCotizacion_DEFINED
#define SOAP_TYPE___afip5__FEParamGetCotizacion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEParamGetCotizacion(struct soap*, struct __afip5__FEParamGetCotizacion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEParamGetCotizacion(struct soap*, const struct __afip5__FEParamGetCotizacion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEParamGetCotizacion(struct soap*, const char*, int, const struct __afip5__FEParamGetCotizacion *, const char*);
SOAP_FMAC3 struct __afip5__FEParamGetCotizacion * SOAP_FMAC4 soap_in___afip5__FEParamGetCotizacion(struct soap*, const char*, struct __afip5__FEParamGetCotizacion *, const char*);
SOAP_FMAC1 struct __afip5__FEParamGetCotizacion * SOAP_FMAC2 soap_instantiate___afip5__FEParamGetCotizacion(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEParamGetCotizacion * soap_new___afip5__FEParamGetCotizacion(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEParamGetCotizacion(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEParamGetCotizacion * soap_new_req___afip5__FEParamGetCotizacion(
	struct soap *soap)
{
	struct __afip5__FEParamGetCotizacion *_p = ::soap_new___afip5__FEParamGetCotizacion(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetCotizacion(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEParamGetCotizacion * soap_new_set___afip5__FEParamGetCotizacion(
	struct soap *soap,
	_afip3__FEParamGetCotizacion *afip3__FEParamGetCotizacion)
{
	struct __afip5__FEParamGetCotizacion *_p = ::soap_new___afip5__FEParamGetCotizacion(soap);
	if (_p)
	{	::soap_default___afip5__FEParamGetCotizacion(soap, _p);
		_p->afip3__FEParamGetCotizacion = afip3__FEParamGetCotizacion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEParamGetCotizacion(struct soap*, const struct __afip5__FEParamGetCotizacion *, const char*, const char*);

inline int soap_write___afip5__FEParamGetCotizacion(struct soap *soap, struct __afip5__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip5__FEParamGetCotizacion(soap, p), 0) || ::soap_put___afip5__FEParamGetCotizacion(soap, p, "-afip5:FEParamGetCotizacion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip5__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetCotizacion(soap, p)), 0) || ::soap_put___afip5__FEParamGetCotizacion(soap, p, "-afip5:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip5__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEParamGetCotizacion(soap, p)), 0) || ::soap_put___afip5__FEParamGetCotizacion(soap, p, "-afip5:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip5__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEParamGetCotizacion(soap, p), 0) || ::soap_put___afip5__FEParamGetCotizacion(soap, p, "-afip5:FEParamGetCotizacion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEParamGetCotizacion * SOAP_FMAC4 soap_get___afip5__FEParamGetCotizacion(struct soap*, struct __afip5__FEParamGetCotizacion *, const char*, const char*);

inline int soap_read___afip5__FEParamGetCotizacion(struct soap *soap, struct __afip5__FEParamGetCotizacion *p)
{
	if (p)
	{	::soap_default___afip5__FEParamGetCotizacion(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEParamGetCotizacion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip5__FEParamGetCotizacion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEParamGetCotizacion(struct soap *soap, struct __afip5__FEParamGetCotizacion *p)
{
	if (::soap_read___afip5__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECAEAConsultar_DEFINED
#define SOAP_TYPE___afip5__FECAEAConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECAEAConsultar(struct soap*, struct __afip5__FECAEAConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECAEAConsultar(struct soap*, const struct __afip5__FECAEAConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECAEAConsultar(struct soap*, const char*, int, const struct __afip5__FECAEAConsultar *, const char*);
SOAP_FMAC3 struct __afip5__FECAEAConsultar * SOAP_FMAC4 soap_in___afip5__FECAEAConsultar(struct soap*, const char*, struct __afip5__FECAEAConsultar *, const char*);
SOAP_FMAC1 struct __afip5__FECAEAConsultar * SOAP_FMAC2 soap_instantiate___afip5__FECAEAConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECAEAConsultar * soap_new___afip5__FECAEAConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECAEAConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECAEAConsultar * soap_new_req___afip5__FECAEAConsultar(
	struct soap *soap)
{
	struct __afip5__FECAEAConsultar *_p = ::soap_new___afip5__FECAEAConsultar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEAConsultar(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECAEAConsultar * soap_new_set___afip5__FECAEAConsultar(
	struct soap *soap,
	_afip3__FECAEAConsultar *afip3__FECAEAConsultar)
{
	struct __afip5__FECAEAConsultar *_p = ::soap_new___afip5__FECAEAConsultar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEAConsultar(soap, _p);
		_p->afip3__FECAEAConsultar = afip3__FECAEAConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECAEAConsultar(struct soap*, const struct __afip5__FECAEAConsultar *, const char*, const char*);

inline int soap_write___afip5__FECAEAConsultar(struct soap *soap, struct __afip5__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FECAEAConsultar(soap, p)), 0) || ::soap_put___afip5__FECAEAConsultar(soap, p, "-afip5:FECAEAConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEAConsultar(soap, p)), 0) || ::soap_put___afip5__FECAEAConsultar(soap, p, "-afip5:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAEAConsultar(soap, p), 0) || ::soap_put___afip5__FECAEAConsultar(soap, p, "-afip5:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEAConsultar(soap, p)), 0) || ::soap_put___afip5__FECAEAConsultar(soap, p, "-afip5:FECAEAConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECAEAConsultar * SOAP_FMAC4 soap_get___afip5__FECAEAConsultar(struct soap*, struct __afip5__FECAEAConsultar *, const char*, const char*);

inline int soap_read___afip5__FECAEAConsultar(struct soap *soap, struct __afip5__FECAEAConsultar *p)
{
	if (p)
	{	::soap_default___afip5__FECAEAConsultar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECAEAConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEAConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECAEAConsultar(struct soap *soap, struct __afip5__FECAEAConsultar *p)
{
	if (::soap_read___afip5__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECAEASinMovimientoInformar_DEFINED
#define SOAP_TYPE___afip5__FECAEASinMovimientoInformar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECAEASinMovimientoInformar(struct soap*, struct __afip5__FECAEASinMovimientoInformar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECAEASinMovimientoInformar(struct soap*, const struct __afip5__FECAEASinMovimientoInformar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECAEASinMovimientoInformar(struct soap*, const char*, int, const struct __afip5__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC3 struct __afip5__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_in___afip5__FECAEASinMovimientoInformar(struct soap*, const char*, struct __afip5__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC1 struct __afip5__FECAEASinMovimientoInformar * SOAP_FMAC2 soap_instantiate___afip5__FECAEASinMovimientoInformar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECAEASinMovimientoInformar * soap_new___afip5__FECAEASinMovimientoInformar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECAEASinMovimientoInformar(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECAEASinMovimientoInformar * soap_new_req___afip5__FECAEASinMovimientoInformar(
	struct soap *soap)
{
	struct __afip5__FECAEASinMovimientoInformar *_p = ::soap_new___afip5__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEASinMovimientoInformar(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECAEASinMovimientoInformar * soap_new_set___afip5__FECAEASinMovimientoInformar(
	struct soap *soap,
	_afip3__FECAEASinMovimientoInformar *afip3__FECAEASinMovimientoInformar)
{
	struct __afip5__FECAEASinMovimientoInformar *_p = ::soap_new___afip5__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEASinMovimientoInformar(soap, _p);
		_p->afip3__FECAEASinMovimientoInformar = afip3__FECAEASinMovimientoInformar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECAEASinMovimientoInformar(struct soap*, const struct __afip5__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_write___afip5__FECAEASinMovimientoInformar(struct soap *soap, struct __afip5__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FECAEASinMovimientoInformar(soap, p)), 0) || ::soap_put___afip5__FECAEASinMovimientoInformar(soap, p, "-afip5:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAEASinMovimientoInformar(soap, p), 0) || ::soap_put___afip5__FECAEASinMovimientoInformar(soap, p, "-afip5:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAEASinMovimientoInformar(soap, p), 0) || ::soap_put___afip5__FECAEASinMovimientoInformar(soap, p, "-afip5:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEASinMovimientoInformar(soap, p)), 0) || ::soap_put___afip5__FECAEASinMovimientoInformar(soap, p, "-afip5:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_get___afip5__FECAEASinMovimientoInformar(struct soap*, struct __afip5__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_read___afip5__FECAEASinMovimientoInformar(struct soap *soap, struct __afip5__FECAEASinMovimientoInformar *p)
{
	if (p)
	{	::soap_default___afip5__FECAEASinMovimientoInformar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECAEASinMovimientoInformar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoInformar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECAEASinMovimientoInformar(struct soap *soap, struct __afip5__FECAEASinMovimientoInformar *p)
{
	if (::soap_read___afip5__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECAEASinMovimientoConsultar_DEFINED
#define SOAP_TYPE___afip5__FECAEASinMovimientoConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECAEASinMovimientoConsultar(struct soap*, struct __afip5__FECAEASinMovimientoConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECAEASinMovimientoConsultar(struct soap*, const struct __afip5__FECAEASinMovimientoConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECAEASinMovimientoConsultar(struct soap*, const char*, int, const struct __afip5__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC3 struct __afip5__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_in___afip5__FECAEASinMovimientoConsultar(struct soap*, const char*, struct __afip5__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC1 struct __afip5__FECAEASinMovimientoConsultar * SOAP_FMAC2 soap_instantiate___afip5__FECAEASinMovimientoConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECAEASinMovimientoConsultar * soap_new___afip5__FECAEASinMovimientoConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECAEASinMovimientoConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECAEASinMovimientoConsultar * soap_new_req___afip5__FECAEASinMovimientoConsultar(
	struct soap *soap)
{
	struct __afip5__FECAEASinMovimientoConsultar *_p = ::soap_new___afip5__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEASinMovimientoConsultar(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECAEASinMovimientoConsultar * soap_new_set___afip5__FECAEASinMovimientoConsultar(
	struct soap *soap,
	_afip3__FECAEASinMovimientoConsultar *afip3__FECAEASinMovimientoConsultar)
{
	struct __afip5__FECAEASinMovimientoConsultar *_p = ::soap_new___afip5__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEASinMovimientoConsultar(soap, _p);
		_p->afip3__FECAEASinMovimientoConsultar = afip3__FECAEASinMovimientoConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECAEASinMovimientoConsultar(struct soap*, const struct __afip5__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_write___afip5__FECAEASinMovimientoConsultar(struct soap *soap, struct __afip5__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FECAEASinMovimientoConsultar(soap, p)), 0) || ::soap_put___afip5__FECAEASinMovimientoConsultar(soap, p, "-afip5:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAEASinMovimientoConsultar(soap, p), 0) || ::soap_put___afip5__FECAEASinMovimientoConsultar(soap, p, "-afip5:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEASinMovimientoConsultar(soap, p)), 0) || ::soap_put___afip5__FECAEASinMovimientoConsultar(soap, p, "-afip5:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAEASinMovimientoConsultar(soap, p), 0) || ::soap_put___afip5__FECAEASinMovimientoConsultar(soap, p, "-afip5:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_get___afip5__FECAEASinMovimientoConsultar(struct soap*, struct __afip5__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_read___afip5__FECAEASinMovimientoConsultar(struct soap *soap, struct __afip5__FECAEASinMovimientoConsultar *p)
{
	if (p)
	{	::soap_default___afip5__FECAEASinMovimientoConsultar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECAEASinMovimientoConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip5__FECAEASinMovimientoConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECAEASinMovimientoConsultar(struct soap *soap, struct __afip5__FECAEASinMovimientoConsultar *p)
{
	if (::soap_read___afip5__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECAEASolicitar_DEFINED
#define SOAP_TYPE___afip5__FECAEASolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECAEASolicitar(struct soap*, struct __afip5__FECAEASolicitar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECAEASolicitar(struct soap*, const struct __afip5__FECAEASolicitar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECAEASolicitar(struct soap*, const char*, int, const struct __afip5__FECAEASolicitar *, const char*);
SOAP_FMAC3 struct __afip5__FECAEASolicitar * SOAP_FMAC4 soap_in___afip5__FECAEASolicitar(struct soap*, const char*, struct __afip5__FECAEASolicitar *, const char*);
SOAP_FMAC1 struct __afip5__FECAEASolicitar * SOAP_FMAC2 soap_instantiate___afip5__FECAEASolicitar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECAEASolicitar * soap_new___afip5__FECAEASolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECAEASolicitar(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECAEASolicitar * soap_new_req___afip5__FECAEASolicitar(
	struct soap *soap)
{
	struct __afip5__FECAEASolicitar *_p = ::soap_new___afip5__FECAEASolicitar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEASolicitar(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECAEASolicitar * soap_new_set___afip5__FECAEASolicitar(
	struct soap *soap,
	_afip3__FECAEASolicitar *afip3__FECAEASolicitar)
{
	struct __afip5__FECAEASolicitar *_p = ::soap_new___afip5__FECAEASolicitar(soap);
	if (_p)
	{	::soap_default___afip5__FECAEASolicitar(soap, _p);
		_p->afip3__FECAEASolicitar = afip3__FECAEASolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECAEASolicitar(struct soap*, const struct __afip5__FECAEASolicitar *, const char*, const char*);

inline int soap_write___afip5__FECAEASolicitar(struct soap *soap, struct __afip5__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip5__FECAEASolicitar(soap, p), 0) || ::soap_put___afip5__FECAEASolicitar(soap, p, "-afip5:FECAEASolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip5__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEASolicitar(soap, p)), 0) || ::soap_put___afip5__FECAEASolicitar(soap, p, "-afip5:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip5__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEASolicitar(soap, p)), 0) || ::soap_put___afip5__FECAEASolicitar(soap, p, "-afip5:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip5__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAEASolicitar(soap, p), 0) || ::soap_put___afip5__FECAEASolicitar(soap, p, "-afip5:FECAEASolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECAEASolicitar * SOAP_FMAC4 soap_get___afip5__FECAEASolicitar(struct soap*, struct __afip5__FECAEASolicitar *, const char*, const char*);

inline int soap_read___afip5__FECAEASolicitar(struct soap *soap, struct __afip5__FECAEASolicitar *p)
{
	if (p)
	{	::soap_default___afip5__FECAEASolicitar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECAEASolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip5__FECAEASolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECAEASolicitar(struct soap *soap, struct __afip5__FECAEASolicitar *p)
{
	if (::soap_read___afip5__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECAEARegInformativo_DEFINED
#define SOAP_TYPE___afip5__FECAEARegInformativo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECAEARegInformativo(struct soap*, struct __afip5__FECAEARegInformativo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECAEARegInformativo(struct soap*, const struct __afip5__FECAEARegInformativo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECAEARegInformativo(struct soap*, const char*, int, const struct __afip5__FECAEARegInformativo *, const char*);
SOAP_FMAC3 struct __afip5__FECAEARegInformativo * SOAP_FMAC4 soap_in___afip5__FECAEARegInformativo(struct soap*, const char*, struct __afip5__FECAEARegInformativo *, const char*);
SOAP_FMAC1 struct __afip5__FECAEARegInformativo * SOAP_FMAC2 soap_instantiate___afip5__FECAEARegInformativo(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECAEARegInformativo * soap_new___afip5__FECAEARegInformativo(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECAEARegInformativo(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECAEARegInformativo * soap_new_req___afip5__FECAEARegInformativo(
	struct soap *soap)
{
	struct __afip5__FECAEARegInformativo *_p = ::soap_new___afip5__FECAEARegInformativo(soap);
	if (_p)
	{	::soap_default___afip5__FECAEARegInformativo(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECAEARegInformativo * soap_new_set___afip5__FECAEARegInformativo(
	struct soap *soap,
	_afip3__FECAEARegInformativo *afip3__FECAEARegInformativo)
{
	struct __afip5__FECAEARegInformativo *_p = ::soap_new___afip5__FECAEARegInformativo(soap);
	if (_p)
	{	::soap_default___afip5__FECAEARegInformativo(soap, _p);
		_p->afip3__FECAEARegInformativo = afip3__FECAEARegInformativo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECAEARegInformativo(struct soap*, const struct __afip5__FECAEARegInformativo *, const char*, const char*);

inline int soap_write___afip5__FECAEARegInformativo(struct soap *soap, struct __afip5__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FECAEARegInformativo(soap, p)), 0) || ::soap_put___afip5__FECAEARegInformativo(soap, p, "-afip5:FECAEARegInformativo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip5__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEARegInformativo(soap, p)), 0) || ::soap_put___afip5__FECAEARegInformativo(soap, p, "-afip5:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip5__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAEARegInformativo(soap, p), 0) || ::soap_put___afip5__FECAEARegInformativo(soap, p, "-afip5:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip5__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAEARegInformativo(soap, p)), 0) || ::soap_put___afip5__FECAEARegInformativo(soap, p, "-afip5:FECAEARegInformativo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECAEARegInformativo * SOAP_FMAC4 soap_get___afip5__FECAEARegInformativo(struct soap*, struct __afip5__FECAEARegInformativo *, const char*, const char*);

inline int soap_read___afip5__FECAEARegInformativo(struct soap *soap, struct __afip5__FECAEARegInformativo *p)
{
	if (p)
	{	::soap_default___afip5__FECAEARegInformativo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECAEARegInformativo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip5__FECAEARegInformativo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECAEARegInformativo(struct soap *soap, struct __afip5__FECAEARegInformativo *p)
{
	if (::soap_read___afip5__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECompConsultar_DEFINED
#define SOAP_TYPE___afip5__FECompConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECompConsultar(struct soap*, struct __afip5__FECompConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECompConsultar(struct soap*, const struct __afip5__FECompConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECompConsultar(struct soap*, const char*, int, const struct __afip5__FECompConsultar *, const char*);
SOAP_FMAC3 struct __afip5__FECompConsultar * SOAP_FMAC4 soap_in___afip5__FECompConsultar(struct soap*, const char*, struct __afip5__FECompConsultar *, const char*);
SOAP_FMAC1 struct __afip5__FECompConsultar * SOAP_FMAC2 soap_instantiate___afip5__FECompConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECompConsultar * soap_new___afip5__FECompConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECompConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECompConsultar * soap_new_req___afip5__FECompConsultar(
	struct soap *soap)
{
	struct __afip5__FECompConsultar *_p = ::soap_new___afip5__FECompConsultar(soap);
	if (_p)
	{	::soap_default___afip5__FECompConsultar(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECompConsultar * soap_new_set___afip5__FECompConsultar(
	struct soap *soap,
	_afip3__FECompConsultar *afip3__FECompConsultar)
{
	struct __afip5__FECompConsultar *_p = ::soap_new___afip5__FECompConsultar(soap);
	if (_p)
	{	::soap_default___afip5__FECompConsultar(soap, _p);
		_p->afip3__FECompConsultar = afip3__FECompConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECompConsultar(struct soap*, const struct __afip5__FECompConsultar *, const char*, const char*);

inline int soap_write___afip5__FECompConsultar(struct soap *soap, struct __afip5__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FECompConsultar(soap, p)), 0) || ::soap_put___afip5__FECompConsultar(soap, p, "-afip5:FECompConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECompConsultar(struct soap *soap, const char *URL, struct __afip5__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECompConsultar(soap, p), 0) || ::soap_put___afip5__FECompConsultar(soap, p, "-afip5:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECompConsultar(struct soap *soap, const char *URL, struct __afip5__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECompConsultar(soap, p)), 0) || ::soap_put___afip5__FECompConsultar(soap, p, "-afip5:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECompConsultar(struct soap *soap, const char *URL, struct __afip5__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECompConsultar(soap, p)), 0) || ::soap_put___afip5__FECompConsultar(soap, p, "-afip5:FECompConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECompConsultar * SOAP_FMAC4 soap_get___afip5__FECompConsultar(struct soap*, struct __afip5__FECompConsultar *, const char*, const char*);

inline int soap_read___afip5__FECompConsultar(struct soap *soap, struct __afip5__FECompConsultar *p)
{
	if (p)
	{	::soap_default___afip5__FECompConsultar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECompConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECompConsultar(struct soap *soap, const char *URL, struct __afip5__FECompConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECompConsultar(struct soap *soap, struct __afip5__FECompConsultar *p)
{
	if (::soap_read___afip5__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECompUltimoAutorizado_DEFINED
#define SOAP_TYPE___afip5__FECompUltimoAutorizado_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECompUltimoAutorizado(struct soap*, struct __afip5__FECompUltimoAutorizado *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECompUltimoAutorizado(struct soap*, const struct __afip5__FECompUltimoAutorizado *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECompUltimoAutorizado(struct soap*, const char*, int, const struct __afip5__FECompUltimoAutorizado *, const char*);
SOAP_FMAC3 struct __afip5__FECompUltimoAutorizado * SOAP_FMAC4 soap_in___afip5__FECompUltimoAutorizado(struct soap*, const char*, struct __afip5__FECompUltimoAutorizado *, const char*);
SOAP_FMAC1 struct __afip5__FECompUltimoAutorizado * SOAP_FMAC2 soap_instantiate___afip5__FECompUltimoAutorizado(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECompUltimoAutorizado * soap_new___afip5__FECompUltimoAutorizado(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECompUltimoAutorizado(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECompUltimoAutorizado * soap_new_req___afip5__FECompUltimoAutorizado(
	struct soap *soap)
{
	struct __afip5__FECompUltimoAutorizado *_p = ::soap_new___afip5__FECompUltimoAutorizado(soap);
	if (_p)
	{	::soap_default___afip5__FECompUltimoAutorizado(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECompUltimoAutorizado * soap_new_set___afip5__FECompUltimoAutorizado(
	struct soap *soap,
	_afip3__FECompUltimoAutorizado *afip3__FECompUltimoAutorizado)
{
	struct __afip5__FECompUltimoAutorizado *_p = ::soap_new___afip5__FECompUltimoAutorizado(soap);
	if (_p)
	{	::soap_default___afip5__FECompUltimoAutorizado(soap, _p);
		_p->afip3__FECompUltimoAutorizado = afip3__FECompUltimoAutorizado;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECompUltimoAutorizado(struct soap*, const struct __afip5__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_write___afip5__FECompUltimoAutorizado(struct soap *soap, struct __afip5__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip5__FECompUltimoAutorizado(soap, p), 0) || ::soap_put___afip5__FECompUltimoAutorizado(soap, p, "-afip5:FECompUltimoAutorizado", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip5__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECompUltimoAutorizado(soap, p), 0) || ::soap_put___afip5__FECompUltimoAutorizado(soap, p, "-afip5:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip5__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECompUltimoAutorizado(soap, p)), 0) || ::soap_put___afip5__FECompUltimoAutorizado(soap, p, "-afip5:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip5__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECompUltimoAutorizado(soap, p)), 0) || ::soap_put___afip5__FECompUltimoAutorizado(soap, p, "-afip5:FECompUltimoAutorizado", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECompUltimoAutorizado * SOAP_FMAC4 soap_get___afip5__FECompUltimoAutorizado(struct soap*, struct __afip5__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_read___afip5__FECompUltimoAutorizado(struct soap *soap, struct __afip5__FECompUltimoAutorizado *p)
{
	if (p)
	{	::soap_default___afip5__FECompUltimoAutorizado(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECompUltimoAutorizado(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip5__FECompUltimoAutorizado *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECompUltimoAutorizado(struct soap *soap, struct __afip5__FECompUltimoAutorizado *p)
{
	if (::soap_read___afip5__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FEDummy_DEFINED
#define SOAP_TYPE___afip5__FEDummy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FEDummy(struct soap*, struct __afip5__FEDummy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FEDummy(struct soap*, const struct __afip5__FEDummy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FEDummy(struct soap*, const char*, int, const struct __afip5__FEDummy *, const char*);
SOAP_FMAC3 struct __afip5__FEDummy * SOAP_FMAC4 soap_in___afip5__FEDummy(struct soap*, const char*, struct __afip5__FEDummy *, const char*);
SOAP_FMAC1 struct __afip5__FEDummy * SOAP_FMAC2 soap_instantiate___afip5__FEDummy(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FEDummy * soap_new___afip5__FEDummy(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FEDummy(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FEDummy * soap_new_req___afip5__FEDummy(
	struct soap *soap)
{
	struct __afip5__FEDummy *_p = ::soap_new___afip5__FEDummy(soap);
	if (_p)
	{	::soap_default___afip5__FEDummy(soap, _p);
	}
	return _p;
}

inline struct __afip5__FEDummy * soap_new_set___afip5__FEDummy(
	struct soap *soap,
	_afip3__FEDummy *afip3__FEDummy)
{
	struct __afip5__FEDummy *_p = ::soap_new___afip5__FEDummy(soap);
	if (_p)
	{	::soap_default___afip5__FEDummy(soap, _p);
		_p->afip3__FEDummy = afip3__FEDummy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FEDummy(struct soap*, const struct __afip5__FEDummy *, const char*, const char*);

inline int soap_write___afip5__FEDummy(struct soap *soap, struct __afip5__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip5__FEDummy(soap, p), 0) || ::soap_put___afip5__FEDummy(soap, p, "-afip5:FEDummy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FEDummy(struct soap *soap, const char *URL, struct __afip5__FEDummy const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEDummy(soap, p)), 0) || ::soap_put___afip5__FEDummy(soap, p, "-afip5:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FEDummy(struct soap *soap, const char *URL, struct __afip5__FEDummy const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FEDummy(soap, p)), 0) || ::soap_put___afip5__FEDummy(soap, p, "-afip5:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FEDummy(struct soap *soap, const char *URL, struct __afip5__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FEDummy(soap, p), 0) || ::soap_put___afip5__FEDummy(soap, p, "-afip5:FEDummy", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FEDummy * SOAP_FMAC4 soap_get___afip5__FEDummy(struct soap*, struct __afip5__FEDummy *, const char*, const char*);

inline int soap_read___afip5__FEDummy(struct soap *soap, struct __afip5__FEDummy *p)
{
	if (p)
	{	::soap_default___afip5__FEDummy(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FEDummy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FEDummy(struct soap *soap, const char *URL, struct __afip5__FEDummy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FEDummy(struct soap *soap, struct __afip5__FEDummy *p)
{
	if (::soap_read___afip5__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECompTotXRequest_DEFINED
#define SOAP_TYPE___afip5__FECompTotXRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECompTotXRequest(struct soap*, struct __afip5__FECompTotXRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECompTotXRequest(struct soap*, const struct __afip5__FECompTotXRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECompTotXRequest(struct soap*, const char*, int, const struct __afip5__FECompTotXRequest *, const char*);
SOAP_FMAC3 struct __afip5__FECompTotXRequest * SOAP_FMAC4 soap_in___afip5__FECompTotXRequest(struct soap*, const char*, struct __afip5__FECompTotXRequest *, const char*);
SOAP_FMAC1 struct __afip5__FECompTotXRequest * SOAP_FMAC2 soap_instantiate___afip5__FECompTotXRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECompTotXRequest * soap_new___afip5__FECompTotXRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECompTotXRequest(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECompTotXRequest * soap_new_req___afip5__FECompTotXRequest(
	struct soap *soap)
{
	struct __afip5__FECompTotXRequest *_p = ::soap_new___afip5__FECompTotXRequest(soap);
	if (_p)
	{	::soap_default___afip5__FECompTotXRequest(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECompTotXRequest * soap_new_set___afip5__FECompTotXRequest(
	struct soap *soap,
	_afip3__FECompTotXRequest *afip3__FECompTotXRequest)
{
	struct __afip5__FECompTotXRequest *_p = ::soap_new___afip5__FECompTotXRequest(soap);
	if (_p)
	{	::soap_default___afip5__FECompTotXRequest(soap, _p);
		_p->afip3__FECompTotXRequest = afip3__FECompTotXRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECompTotXRequest(struct soap*, const struct __afip5__FECompTotXRequest *, const char*, const char*);

inline int soap_write___afip5__FECompTotXRequest(struct soap *soap, struct __afip5__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FECompTotXRequest(soap, p)), 0) || ::soap_put___afip5__FECompTotXRequest(soap, p, "-afip5:FECompTotXRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip5__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECompTotXRequest(soap, p)), 0) || ::soap_put___afip5__FECompTotXRequest(soap, p, "-afip5:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip5__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECompTotXRequest(soap, p), 0) || ::soap_put___afip5__FECompTotXRequest(soap, p, "-afip5:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip5__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECompTotXRequest(soap, p)), 0) || ::soap_put___afip5__FECompTotXRequest(soap, p, "-afip5:FECompTotXRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECompTotXRequest * SOAP_FMAC4 soap_get___afip5__FECompTotXRequest(struct soap*, struct __afip5__FECompTotXRequest *, const char*, const char*);

inline int soap_read___afip5__FECompTotXRequest(struct soap *soap, struct __afip5__FECompTotXRequest *p)
{
	if (p)
	{	::soap_default___afip5__FECompTotXRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECompTotXRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip5__FECompTotXRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECompTotXRequest(struct soap *soap, struct __afip5__FECompTotXRequest *p)
{
	if (::soap_read___afip5__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip5__FECAESolicitar_DEFINED
#define SOAP_TYPE___afip5__FECAESolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip5__FECAESolicitar(struct soap*, struct __afip5__FECAESolicitar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip5__FECAESolicitar(struct soap*, const struct __afip5__FECAESolicitar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip5__FECAESolicitar(struct soap*, const char*, int, const struct __afip5__FECAESolicitar *, const char*);
SOAP_FMAC3 struct __afip5__FECAESolicitar * SOAP_FMAC4 soap_in___afip5__FECAESolicitar(struct soap*, const char*, struct __afip5__FECAESolicitar *, const char*);
SOAP_FMAC1 struct __afip5__FECAESolicitar * SOAP_FMAC2 soap_instantiate___afip5__FECAESolicitar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip5__FECAESolicitar * soap_new___afip5__FECAESolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip5__FECAESolicitar(soap, n, NULL, NULL, NULL);
}

inline struct __afip5__FECAESolicitar * soap_new_req___afip5__FECAESolicitar(
	struct soap *soap)
{
	struct __afip5__FECAESolicitar *_p = ::soap_new___afip5__FECAESolicitar(soap);
	if (_p)
	{	::soap_default___afip5__FECAESolicitar(soap, _p);
	}
	return _p;
}

inline struct __afip5__FECAESolicitar * soap_new_set___afip5__FECAESolicitar(
	struct soap *soap,
	_afip3__FECAESolicitar *afip3__FECAESolicitar)
{
	struct __afip5__FECAESolicitar *_p = ::soap_new___afip5__FECAESolicitar(soap);
	if (_p)
	{	::soap_default___afip5__FECAESolicitar(soap, _p);
		_p->afip3__FECAESolicitar = afip3__FECAESolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip5__FECAESolicitar(struct soap*, const struct __afip5__FECAESolicitar *, const char*, const char*);

inline int soap_write___afip5__FECAESolicitar(struct soap *soap, struct __afip5__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip5__FECAESolicitar(soap, p)), 0) || ::soap_put___afip5__FECAESolicitar(soap, p, "-afip5:FECAESolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip5__FECAESolicitar(struct soap *soap, const char *URL, struct __afip5__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAESolicitar(soap, p), 0) || ::soap_put___afip5__FECAESolicitar(soap, p, "-afip5:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip5__FECAESolicitar(struct soap *soap, const char *URL, struct __afip5__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip5__FECAESolicitar(soap, p), 0) || ::soap_put___afip5__FECAESolicitar(soap, p, "-afip5:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip5__FECAESolicitar(struct soap *soap, const char *URL, struct __afip5__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip5__FECAESolicitar(soap, p)), 0) || ::soap_put___afip5__FECAESolicitar(soap, p, "-afip5:FECAESolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip5__FECAESolicitar * SOAP_FMAC4 soap_get___afip5__FECAESolicitar(struct soap*, struct __afip5__FECAESolicitar *, const char*, const char*);

inline int soap_read___afip5__FECAESolicitar(struct soap *soap, struct __afip5__FECAESolicitar *p)
{
	if (p)
	{	::soap_default___afip5__FECAESolicitar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip5__FECAESolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip5__FECAESolicitar(struct soap *soap, const char *URL, struct __afip5__FECAESolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip5__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip5__FECAESolicitar(struct soap *soap, struct __afip5__FECAESolicitar *p)
{
	if (::soap_read___afip5__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposPaises_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposPaises_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposPaises(struct soap*, struct __afip4__FEParamGetTiposPaises *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposPaises(struct soap*, const struct __afip4__FEParamGetTiposPaises *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposPaises(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposPaises *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposPaises * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposPaises(struct soap*, const char*, struct __afip4__FEParamGetTiposPaises *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposPaises * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposPaises(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposPaises * soap_new___afip4__FEParamGetTiposPaises(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposPaises(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposPaises * soap_new_req___afip4__FEParamGetTiposPaises(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposPaises *_p = ::soap_new___afip4__FEParamGetTiposPaises(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposPaises(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposPaises * soap_new_set___afip4__FEParamGetTiposPaises(
	struct soap *soap,
	_afip3__FEParamGetTiposPaises *afip3__FEParamGetTiposPaises)
{
	struct __afip4__FEParamGetTiposPaises *_p = ::soap_new___afip4__FEParamGetTiposPaises(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposPaises(soap, _p);
		_p->afip3__FEParamGetTiposPaises = afip3__FEParamGetTiposPaises;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposPaises(struct soap*, const struct __afip4__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposPaises(struct soap *soap, struct __afip4__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FEParamGetTiposPaises(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposPaises(soap, p, "-afip4:FEParamGetTiposPaises", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposPaises(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposPaises(soap, p, "-afip4:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposPaises(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposPaises(soap, p, "-afip4:FEParamGetTiposPaises", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposPaises const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposPaises(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposPaises(soap, p, "-afip4:FEParamGetTiposPaises", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposPaises * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposPaises(struct soap*, struct __afip4__FEParamGetTiposPaises *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposPaises(struct soap *soap, struct __afip4__FEParamGetTiposPaises *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposPaises(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposPaises(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposPaises(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposPaises *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposPaises(struct soap *soap, struct __afip4__FEParamGetTiposPaises *p)
{
	if (::soap_read___afip4__FEParamGetTiposPaises(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposDoc_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposDoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposDoc(struct soap*, struct __afip4__FEParamGetTiposDoc *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposDoc(struct soap*, const struct __afip4__FEParamGetTiposDoc *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposDoc(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposDoc *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposDoc * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposDoc(struct soap*, const char*, struct __afip4__FEParamGetTiposDoc *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposDoc * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposDoc(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposDoc * soap_new___afip4__FEParamGetTiposDoc(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposDoc(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposDoc * soap_new_req___afip4__FEParamGetTiposDoc(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposDoc *_p = ::soap_new___afip4__FEParamGetTiposDoc(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposDoc(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposDoc * soap_new_set___afip4__FEParamGetTiposDoc(
	struct soap *soap,
	_afip3__FEParamGetTiposDoc *afip3__FEParamGetTiposDoc)
{
	struct __afip4__FEParamGetTiposDoc *_p = ::soap_new___afip4__FEParamGetTiposDoc(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposDoc(soap, _p);
		_p->afip3__FEParamGetTiposDoc = afip3__FEParamGetTiposDoc;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposDoc(struct soap*, const struct __afip4__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposDoc(struct soap *soap, struct __afip4__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FEParamGetTiposDoc(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposDoc(soap, p, "-afip4:FEParamGetTiposDoc", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposDoc(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposDoc(soap, p, "-afip4:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposDoc(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposDoc(soap, p, "-afip4:FEParamGetTiposDoc", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposDoc const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposDoc(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposDoc(soap, p, "-afip4:FEParamGetTiposDoc", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposDoc * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposDoc(struct soap*, struct __afip4__FEParamGetTiposDoc *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposDoc(struct soap *soap, struct __afip4__FEParamGetTiposDoc *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposDoc(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposDoc(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposDoc(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposDoc *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposDoc(struct soap *soap, struct __afip4__FEParamGetTiposDoc *p)
{
	if (::soap_read___afip4__FEParamGetTiposDoc(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposCbte_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposCbte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposCbte(struct soap*, struct __afip4__FEParamGetTiposCbte *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposCbte(struct soap*, const struct __afip4__FEParamGetTiposCbte *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposCbte(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposCbte *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposCbte * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposCbte(struct soap*, const char*, struct __afip4__FEParamGetTiposCbte *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposCbte * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposCbte(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposCbte * soap_new___afip4__FEParamGetTiposCbte(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposCbte(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposCbte * soap_new_req___afip4__FEParamGetTiposCbte(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposCbte *_p = ::soap_new___afip4__FEParamGetTiposCbte(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposCbte(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposCbte * soap_new_set___afip4__FEParamGetTiposCbte(
	struct soap *soap,
	_afip3__FEParamGetTiposCbte *afip3__FEParamGetTiposCbte)
{
	struct __afip4__FEParamGetTiposCbte *_p = ::soap_new___afip4__FEParamGetTiposCbte(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposCbte(soap, _p);
		_p->afip3__FEParamGetTiposCbte = afip3__FEParamGetTiposCbte;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposCbte(struct soap*, const struct __afip4__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposCbte(struct soap *soap, struct __afip4__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposCbte(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposCbte(soap, p, "-afip4:FEParamGetTiposCbte", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposCbte(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposCbte(soap, p, "-afip4:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposCbte(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposCbte(soap, p, "-afip4:FEParamGetTiposCbte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposCbte const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposCbte(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposCbte(soap, p, "-afip4:FEParamGetTiposCbte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposCbte * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposCbte(struct soap*, struct __afip4__FEParamGetTiposCbte *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposCbte(struct soap *soap, struct __afip4__FEParamGetTiposCbte *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposCbte(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposCbte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposCbte(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposCbte *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposCbte(struct soap *soap, struct __afip4__FEParamGetTiposCbte *p)
{
	if (::soap_read___afip4__FEParamGetTiposCbte(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetPtosVenta_DEFINED
#define SOAP_TYPE___afip4__FEParamGetPtosVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetPtosVenta(struct soap*, struct __afip4__FEParamGetPtosVenta *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetPtosVenta(struct soap*, const struct __afip4__FEParamGetPtosVenta *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetPtosVenta(struct soap*, const char*, int, const struct __afip4__FEParamGetPtosVenta *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetPtosVenta * SOAP_FMAC4 soap_in___afip4__FEParamGetPtosVenta(struct soap*, const char*, struct __afip4__FEParamGetPtosVenta *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetPtosVenta * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetPtosVenta(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetPtosVenta * soap_new___afip4__FEParamGetPtosVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetPtosVenta(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetPtosVenta * soap_new_req___afip4__FEParamGetPtosVenta(
	struct soap *soap)
{
	struct __afip4__FEParamGetPtosVenta *_p = ::soap_new___afip4__FEParamGetPtosVenta(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetPtosVenta(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetPtosVenta * soap_new_set___afip4__FEParamGetPtosVenta(
	struct soap *soap,
	_afip3__FEParamGetPtosVenta *afip3__FEParamGetPtosVenta)
{
	struct __afip4__FEParamGetPtosVenta *_p = ::soap_new___afip4__FEParamGetPtosVenta(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetPtosVenta(soap, _p);
		_p->afip3__FEParamGetPtosVenta = afip3__FEParamGetPtosVenta;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetPtosVenta(struct soap*, const struct __afip4__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_write___afip4__FEParamGetPtosVenta(struct soap *soap, struct __afip4__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FEParamGetPtosVenta(soap, p)), 0) || ::soap_put___afip4__FEParamGetPtosVenta(soap, p, "-afip4:FEParamGetPtosVenta", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip4__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetPtosVenta(soap, p), 0) || ::soap_put___afip4__FEParamGetPtosVenta(soap, p, "-afip4:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip4__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetPtosVenta(soap, p), 0) || ::soap_put___afip4__FEParamGetPtosVenta(soap, p, "-afip4:FEParamGetPtosVenta", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip4__FEParamGetPtosVenta const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetPtosVenta(soap, p)), 0) || ::soap_put___afip4__FEParamGetPtosVenta(soap, p, "-afip4:FEParamGetPtosVenta", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetPtosVenta * SOAP_FMAC4 soap_get___afip4__FEParamGetPtosVenta(struct soap*, struct __afip4__FEParamGetPtosVenta *, const char*, const char*);

inline int soap_read___afip4__FEParamGetPtosVenta(struct soap *soap, struct __afip4__FEParamGetPtosVenta *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetPtosVenta(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetPtosVenta(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetPtosVenta(struct soap *soap, const char *URL, struct __afip4__FEParamGetPtosVenta *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetPtosVenta(struct soap *soap, struct __afip4__FEParamGetPtosVenta *p)
{
	if (::soap_read___afip4__FEParamGetPtosVenta(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposConcepto_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposConcepto_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposConcepto(struct soap*, struct __afip4__FEParamGetTiposConcepto *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposConcepto(struct soap*, const struct __afip4__FEParamGetTiposConcepto *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposConcepto(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposConcepto * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposConcepto(struct soap*, const char*, struct __afip4__FEParamGetTiposConcepto *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposConcepto * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposConcepto(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposConcepto * soap_new___afip4__FEParamGetTiposConcepto(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposConcepto(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposConcepto * soap_new_req___afip4__FEParamGetTiposConcepto(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposConcepto *_p = ::soap_new___afip4__FEParamGetTiposConcepto(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposConcepto(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposConcepto * soap_new_set___afip4__FEParamGetTiposConcepto(
	struct soap *soap,
	_afip3__FEParamGetTiposConcepto *afip3__FEParamGetTiposConcepto)
{
	struct __afip4__FEParamGetTiposConcepto *_p = ::soap_new___afip4__FEParamGetTiposConcepto(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposConcepto(soap, _p);
		_p->afip3__FEParamGetTiposConcepto = afip3__FEParamGetTiposConcepto;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposConcepto(struct soap*, const struct __afip4__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposConcepto(struct soap *soap, struct __afip4__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposConcepto(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposConcepto(soap, p, "-afip4:FEParamGetTiposConcepto", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposConcepto(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposConcepto(soap, p, "-afip4:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposConcepto(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposConcepto(soap, p, "-afip4:FEParamGetTiposConcepto", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposConcepto const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposConcepto(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposConcepto(soap, p, "-afip4:FEParamGetTiposConcepto", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposConcepto * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposConcepto(struct soap*, struct __afip4__FEParamGetTiposConcepto *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposConcepto(struct soap *soap, struct __afip4__FEParamGetTiposConcepto *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposConcepto(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposConcepto(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposConcepto(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposConcepto *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposConcepto(struct soap *soap, struct __afip4__FEParamGetTiposConcepto *p)
{
	if (::soap_read___afip4__FEParamGetTiposConcepto(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposOpcional_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposOpcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposOpcional(struct soap*, struct __afip4__FEParamGetTiposOpcional *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposOpcional(struct soap*, const struct __afip4__FEParamGetTiposOpcional *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposOpcional(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposOpcional * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposOpcional(struct soap*, const char*, struct __afip4__FEParamGetTiposOpcional *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposOpcional * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposOpcional(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposOpcional * soap_new___afip4__FEParamGetTiposOpcional(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposOpcional(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposOpcional * soap_new_req___afip4__FEParamGetTiposOpcional(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposOpcional *_p = ::soap_new___afip4__FEParamGetTiposOpcional(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposOpcional(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposOpcional * soap_new_set___afip4__FEParamGetTiposOpcional(
	struct soap *soap,
	_afip3__FEParamGetTiposOpcional *afip3__FEParamGetTiposOpcional)
{
	struct __afip4__FEParamGetTiposOpcional *_p = ::soap_new___afip4__FEParamGetTiposOpcional(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposOpcional(soap, _p);
		_p->afip3__FEParamGetTiposOpcional = afip3__FEParamGetTiposOpcional;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposOpcional(struct soap*, const struct __afip4__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposOpcional(struct soap *soap, struct __afip4__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FEParamGetTiposOpcional(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposOpcional(soap, p, "-afip4:FEParamGetTiposOpcional", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposOpcional(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposOpcional(soap, p, "-afip4:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposOpcional(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposOpcional(soap, p, "-afip4:FEParamGetTiposOpcional", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposOpcional const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposOpcional(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposOpcional(soap, p, "-afip4:FEParamGetTiposOpcional", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposOpcional * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposOpcional(struct soap*, struct __afip4__FEParamGetTiposOpcional *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposOpcional(struct soap *soap, struct __afip4__FEParamGetTiposOpcional *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposOpcional(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposOpcional(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposOpcional(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposOpcional *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposOpcional(struct soap *soap, struct __afip4__FEParamGetTiposOpcional *p)
{
	if (::soap_read___afip4__FEParamGetTiposOpcional(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposIva_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposIva(struct soap*, struct __afip4__FEParamGetTiposIva *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposIva(struct soap*, const struct __afip4__FEParamGetTiposIva *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposIva(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposIva *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposIva * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposIva(struct soap*, const char*, struct __afip4__FEParamGetTiposIva *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposIva * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposIva(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposIva * soap_new___afip4__FEParamGetTiposIva(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposIva(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposIva * soap_new_req___afip4__FEParamGetTiposIva(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposIva *_p = ::soap_new___afip4__FEParamGetTiposIva(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposIva(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposIva * soap_new_set___afip4__FEParamGetTiposIva(
	struct soap *soap,
	_afip3__FEParamGetTiposIva *afip3__FEParamGetTiposIva)
{
	struct __afip4__FEParamGetTiposIva *_p = ::soap_new___afip4__FEParamGetTiposIva(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposIva(soap, _p);
		_p->afip3__FEParamGetTiposIva = afip3__FEParamGetTiposIva;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposIva(struct soap*, const struct __afip4__FEParamGetTiposIva *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposIva(struct soap *soap, struct __afip4__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposIva(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposIva(soap, p, "-afip4:FEParamGetTiposIva", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposIva(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposIva(soap, p, "-afip4:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposIva(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposIva(soap, p, "-afip4:FEParamGetTiposIva", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposIva const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposIva(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposIva(soap, p, "-afip4:FEParamGetTiposIva", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposIva * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposIva(struct soap*, struct __afip4__FEParamGetTiposIva *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposIva(struct soap *soap, struct __afip4__FEParamGetTiposIva *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposIva(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposIva(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposIva(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposIva *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposIva(struct soap *soap, struct __afip4__FEParamGetTiposIva *p)
{
	if (::soap_read___afip4__FEParamGetTiposIva(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposMonedas_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposMonedas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposMonedas(struct soap*, struct __afip4__FEParamGetTiposMonedas *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposMonedas(struct soap*, const struct __afip4__FEParamGetTiposMonedas *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposMonedas(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposMonedas * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposMonedas(struct soap*, const char*, struct __afip4__FEParamGetTiposMonedas *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposMonedas * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposMonedas(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposMonedas * soap_new___afip4__FEParamGetTiposMonedas(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposMonedas(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposMonedas * soap_new_req___afip4__FEParamGetTiposMonedas(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposMonedas *_p = ::soap_new___afip4__FEParamGetTiposMonedas(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposMonedas(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposMonedas * soap_new_set___afip4__FEParamGetTiposMonedas(
	struct soap *soap,
	_afip3__FEParamGetTiposMonedas *afip3__FEParamGetTiposMonedas)
{
	struct __afip4__FEParamGetTiposMonedas *_p = ::soap_new___afip4__FEParamGetTiposMonedas(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposMonedas(soap, _p);
		_p->afip3__FEParamGetTiposMonedas = afip3__FEParamGetTiposMonedas;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposMonedas(struct soap*, const struct __afip4__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposMonedas(struct soap *soap, struct __afip4__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposMonedas(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposMonedas(soap, p, "-afip4:FEParamGetTiposMonedas", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposMonedas(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposMonedas(soap, p, "-afip4:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposMonedas(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposMonedas(soap, p, "-afip4:FEParamGetTiposMonedas", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposMonedas const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposMonedas(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposMonedas(soap, p, "-afip4:FEParamGetTiposMonedas", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposMonedas * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposMonedas(struct soap*, struct __afip4__FEParamGetTiposMonedas *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposMonedas(struct soap *soap, struct __afip4__FEParamGetTiposMonedas *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposMonedas(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposMonedas(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposMonedas(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposMonedas *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposMonedas(struct soap *soap, struct __afip4__FEParamGetTiposMonedas *p)
{
	if (::soap_read___afip4__FEParamGetTiposMonedas(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetTiposTributos_DEFINED
#define SOAP_TYPE___afip4__FEParamGetTiposTributos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetTiposTributos(struct soap*, struct __afip4__FEParamGetTiposTributos *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetTiposTributos(struct soap*, const struct __afip4__FEParamGetTiposTributos *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetTiposTributos(struct soap*, const char*, int, const struct __afip4__FEParamGetTiposTributos *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetTiposTributos * SOAP_FMAC4 soap_in___afip4__FEParamGetTiposTributos(struct soap*, const char*, struct __afip4__FEParamGetTiposTributos *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetTiposTributos * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetTiposTributos(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetTiposTributos * soap_new___afip4__FEParamGetTiposTributos(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetTiposTributos(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetTiposTributos * soap_new_req___afip4__FEParamGetTiposTributos(
	struct soap *soap)
{
	struct __afip4__FEParamGetTiposTributos *_p = ::soap_new___afip4__FEParamGetTiposTributos(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposTributos(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetTiposTributos * soap_new_set___afip4__FEParamGetTiposTributos(
	struct soap *soap,
	_afip3__FEParamGetTiposTributos *afip3__FEParamGetTiposTributos)
{
	struct __afip4__FEParamGetTiposTributos *_p = ::soap_new___afip4__FEParamGetTiposTributos(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetTiposTributos(soap, _p);
		_p->afip3__FEParamGetTiposTributos = afip3__FEParamGetTiposTributos;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetTiposTributos(struct soap*, const struct __afip4__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_write___afip4__FEParamGetTiposTributos(struct soap *soap, struct __afip4__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposTributos(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposTributos(soap, p, "-afip4:FEParamGetTiposTributos", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetTiposTributos(soap, p), 0) || ::soap_put___afip4__FEParamGetTiposTributos(soap, p, "-afip4:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposTributos(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposTributos(soap, p, "-afip4:FEParamGetTiposTributos", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposTributos const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetTiposTributos(soap, p)), 0) || ::soap_put___afip4__FEParamGetTiposTributos(soap, p, "-afip4:FEParamGetTiposTributos", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetTiposTributos * SOAP_FMAC4 soap_get___afip4__FEParamGetTiposTributos(struct soap*, struct __afip4__FEParamGetTiposTributos *, const char*, const char*);

inline int soap_read___afip4__FEParamGetTiposTributos(struct soap *soap, struct __afip4__FEParamGetTiposTributos *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetTiposTributos(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetTiposTributos(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetTiposTributos(struct soap *soap, const char *URL, struct __afip4__FEParamGetTiposTributos *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetTiposTributos(struct soap *soap, struct __afip4__FEParamGetTiposTributos *p)
{
	if (::soap_read___afip4__FEParamGetTiposTributos(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEParamGetCotizacion_DEFINED
#define SOAP_TYPE___afip4__FEParamGetCotizacion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEParamGetCotizacion(struct soap*, struct __afip4__FEParamGetCotizacion *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEParamGetCotizacion(struct soap*, const struct __afip4__FEParamGetCotizacion *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEParamGetCotizacion(struct soap*, const char*, int, const struct __afip4__FEParamGetCotizacion *, const char*);
SOAP_FMAC3 struct __afip4__FEParamGetCotizacion * SOAP_FMAC4 soap_in___afip4__FEParamGetCotizacion(struct soap*, const char*, struct __afip4__FEParamGetCotizacion *, const char*);
SOAP_FMAC1 struct __afip4__FEParamGetCotizacion * SOAP_FMAC2 soap_instantiate___afip4__FEParamGetCotizacion(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEParamGetCotizacion * soap_new___afip4__FEParamGetCotizacion(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEParamGetCotizacion(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEParamGetCotizacion * soap_new_req___afip4__FEParamGetCotizacion(
	struct soap *soap)
{
	struct __afip4__FEParamGetCotizacion *_p = ::soap_new___afip4__FEParamGetCotizacion(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetCotizacion(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEParamGetCotizacion * soap_new_set___afip4__FEParamGetCotizacion(
	struct soap *soap,
	_afip3__FEParamGetCotizacion *afip3__FEParamGetCotizacion)
{
	struct __afip4__FEParamGetCotizacion *_p = ::soap_new___afip4__FEParamGetCotizacion(soap);
	if (_p)
	{	::soap_default___afip4__FEParamGetCotizacion(soap, _p);
		_p->afip3__FEParamGetCotizacion = afip3__FEParamGetCotizacion;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEParamGetCotizacion(struct soap*, const struct __afip4__FEParamGetCotizacion *, const char*, const char*);

inline int soap_write___afip4__FEParamGetCotizacion(struct soap *soap, struct __afip4__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FEParamGetCotizacion(soap, p), 0) || ::soap_put___afip4__FEParamGetCotizacion(soap, p, "-afip4:FEParamGetCotizacion", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip4__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetCotizacion(soap, p)), 0) || ::soap_put___afip4__FEParamGetCotizacion(soap, p, "-afip4:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip4__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEParamGetCotizacion(soap, p)), 0) || ::soap_put___afip4__FEParamGetCotizacion(soap, p, "-afip4:FEParamGetCotizacion", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip4__FEParamGetCotizacion const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEParamGetCotizacion(soap, p), 0) || ::soap_put___afip4__FEParamGetCotizacion(soap, p, "-afip4:FEParamGetCotizacion", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEParamGetCotizacion * SOAP_FMAC4 soap_get___afip4__FEParamGetCotizacion(struct soap*, struct __afip4__FEParamGetCotizacion *, const char*, const char*);

inline int soap_read___afip4__FEParamGetCotizacion(struct soap *soap, struct __afip4__FEParamGetCotizacion *p)
{
	if (p)
	{	::soap_default___afip4__FEParamGetCotizacion(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEParamGetCotizacion(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEParamGetCotizacion(struct soap *soap, const char *URL, struct __afip4__FEParamGetCotizacion *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEParamGetCotizacion(struct soap *soap, struct __afip4__FEParamGetCotizacion *p)
{
	if (::soap_read___afip4__FEParamGetCotizacion(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECAEAConsultar_DEFINED
#define SOAP_TYPE___afip4__FECAEAConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECAEAConsultar(struct soap*, struct __afip4__FECAEAConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECAEAConsultar(struct soap*, const struct __afip4__FECAEAConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECAEAConsultar(struct soap*, const char*, int, const struct __afip4__FECAEAConsultar *, const char*);
SOAP_FMAC3 struct __afip4__FECAEAConsultar * SOAP_FMAC4 soap_in___afip4__FECAEAConsultar(struct soap*, const char*, struct __afip4__FECAEAConsultar *, const char*);
SOAP_FMAC1 struct __afip4__FECAEAConsultar * SOAP_FMAC2 soap_instantiate___afip4__FECAEAConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECAEAConsultar * soap_new___afip4__FECAEAConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECAEAConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECAEAConsultar * soap_new_req___afip4__FECAEAConsultar(
	struct soap *soap)
{
	struct __afip4__FECAEAConsultar *_p = ::soap_new___afip4__FECAEAConsultar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEAConsultar(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECAEAConsultar * soap_new_set___afip4__FECAEAConsultar(
	struct soap *soap,
	_afip3__FECAEAConsultar *afip3__FECAEAConsultar)
{
	struct __afip4__FECAEAConsultar *_p = ::soap_new___afip4__FECAEAConsultar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEAConsultar(soap, _p);
		_p->afip3__FECAEAConsultar = afip3__FECAEAConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECAEAConsultar(struct soap*, const struct __afip4__FECAEAConsultar *, const char*, const char*);

inline int soap_write___afip4__FECAEAConsultar(struct soap *soap, struct __afip4__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FECAEAConsultar(soap, p), 0) || ::soap_put___afip4__FECAEAConsultar(soap, p, "-afip4:FECAEAConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEAConsultar(soap, p)), 0) || ::soap_put___afip4__FECAEAConsultar(soap, p, "-afip4:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAEAConsultar(soap, p), 0) || ::soap_put___afip4__FECAEAConsultar(soap, p, "-afip4:FECAEAConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEAConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAEAConsultar(soap, p), 0) || ::soap_put___afip4__FECAEAConsultar(soap, p, "-afip4:FECAEAConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECAEAConsultar * SOAP_FMAC4 soap_get___afip4__FECAEAConsultar(struct soap*, struct __afip4__FECAEAConsultar *, const char*, const char*);

inline int soap_read___afip4__FECAEAConsultar(struct soap *soap, struct __afip4__FECAEAConsultar *p)
{
	if (p)
	{	::soap_default___afip4__FECAEAConsultar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECAEAConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECAEAConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEAConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECAEAConsultar(struct soap *soap, struct __afip4__FECAEAConsultar *p)
{
	if (::soap_read___afip4__FECAEAConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECAEASinMovimientoInformar_DEFINED
#define SOAP_TYPE___afip4__FECAEASinMovimientoInformar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECAEASinMovimientoInformar(struct soap*, struct __afip4__FECAEASinMovimientoInformar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECAEASinMovimientoInformar(struct soap*, const struct __afip4__FECAEASinMovimientoInformar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECAEASinMovimientoInformar(struct soap*, const char*, int, const struct __afip4__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC3 struct __afip4__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_in___afip4__FECAEASinMovimientoInformar(struct soap*, const char*, struct __afip4__FECAEASinMovimientoInformar *, const char*);
SOAP_FMAC1 struct __afip4__FECAEASinMovimientoInformar * SOAP_FMAC2 soap_instantiate___afip4__FECAEASinMovimientoInformar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECAEASinMovimientoInformar * soap_new___afip4__FECAEASinMovimientoInformar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECAEASinMovimientoInformar(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECAEASinMovimientoInformar * soap_new_req___afip4__FECAEASinMovimientoInformar(
	struct soap *soap)
{
	struct __afip4__FECAEASinMovimientoInformar *_p = ::soap_new___afip4__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEASinMovimientoInformar(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECAEASinMovimientoInformar * soap_new_set___afip4__FECAEASinMovimientoInformar(
	struct soap *soap,
	_afip3__FECAEASinMovimientoInformar *afip3__FECAEASinMovimientoInformar)
{
	struct __afip4__FECAEASinMovimientoInformar *_p = ::soap_new___afip4__FECAEASinMovimientoInformar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEASinMovimientoInformar(soap, _p);
		_p->afip3__FECAEASinMovimientoInformar = afip3__FECAEASinMovimientoInformar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECAEASinMovimientoInformar(struct soap*, const struct __afip4__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_write___afip4__FECAEASinMovimientoInformar(struct soap *soap, struct __afip4__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FECAEASinMovimientoInformar(soap, p)), 0) || ::soap_put___afip4__FECAEASinMovimientoInformar(soap, p, "-afip4:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEASinMovimientoInformar(soap, p)), 0) || ::soap_put___afip4__FECAEASinMovimientoInformar(soap, p, "-afip4:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAEASinMovimientoInformar(soap, p), 0) || ::soap_put___afip4__FECAEASinMovimientoInformar(soap, p, "-afip4:FECAEASinMovimientoInformar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoInformar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEASinMovimientoInformar(soap, p)), 0) || ::soap_put___afip4__FECAEASinMovimientoInformar(soap, p, "-afip4:FECAEASinMovimientoInformar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECAEASinMovimientoInformar * SOAP_FMAC4 soap_get___afip4__FECAEASinMovimientoInformar(struct soap*, struct __afip4__FECAEASinMovimientoInformar *, const char*, const char*);

inline int soap_read___afip4__FECAEASinMovimientoInformar(struct soap *soap, struct __afip4__FECAEASinMovimientoInformar *p)
{
	if (p)
	{	::soap_default___afip4__FECAEASinMovimientoInformar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECAEASinMovimientoInformar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECAEASinMovimientoInformar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoInformar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECAEASinMovimientoInformar(struct soap *soap, struct __afip4__FECAEASinMovimientoInformar *p)
{
	if (::soap_read___afip4__FECAEASinMovimientoInformar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECAEASinMovimientoConsultar_DEFINED
#define SOAP_TYPE___afip4__FECAEASinMovimientoConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECAEASinMovimientoConsultar(struct soap*, struct __afip4__FECAEASinMovimientoConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECAEASinMovimientoConsultar(struct soap*, const struct __afip4__FECAEASinMovimientoConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECAEASinMovimientoConsultar(struct soap*, const char*, int, const struct __afip4__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC3 struct __afip4__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_in___afip4__FECAEASinMovimientoConsultar(struct soap*, const char*, struct __afip4__FECAEASinMovimientoConsultar *, const char*);
SOAP_FMAC1 struct __afip4__FECAEASinMovimientoConsultar * SOAP_FMAC2 soap_instantiate___afip4__FECAEASinMovimientoConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECAEASinMovimientoConsultar * soap_new___afip4__FECAEASinMovimientoConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECAEASinMovimientoConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECAEASinMovimientoConsultar * soap_new_req___afip4__FECAEASinMovimientoConsultar(
	struct soap *soap)
{
	struct __afip4__FECAEASinMovimientoConsultar *_p = ::soap_new___afip4__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEASinMovimientoConsultar(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECAEASinMovimientoConsultar * soap_new_set___afip4__FECAEASinMovimientoConsultar(
	struct soap *soap,
	_afip3__FECAEASinMovimientoConsultar *afip3__FECAEASinMovimientoConsultar)
{
	struct __afip4__FECAEASinMovimientoConsultar *_p = ::soap_new___afip4__FECAEASinMovimientoConsultar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEASinMovimientoConsultar(soap, _p);
		_p->afip3__FECAEASinMovimientoConsultar = afip3__FECAEASinMovimientoConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECAEASinMovimientoConsultar(struct soap*, const struct __afip4__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_write___afip4__FECAEASinMovimientoConsultar(struct soap *soap, struct __afip4__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FECAEASinMovimientoConsultar(soap, p)), 0) || ::soap_put___afip4__FECAEASinMovimientoConsultar(soap, p, "-afip4:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAEASinMovimientoConsultar(soap, p), 0) || ::soap_put___afip4__FECAEASinMovimientoConsultar(soap, p, "-afip4:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEASinMovimientoConsultar(soap, p)), 0) || ::soap_put___afip4__FECAEASinMovimientoConsultar(soap, p, "-afip4:FECAEASinMovimientoConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEASinMovimientoConsultar(soap, p)), 0) || ::soap_put___afip4__FECAEASinMovimientoConsultar(soap, p, "-afip4:FECAEASinMovimientoConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECAEASinMovimientoConsultar * SOAP_FMAC4 soap_get___afip4__FECAEASinMovimientoConsultar(struct soap*, struct __afip4__FECAEASinMovimientoConsultar *, const char*, const char*);

inline int soap_read___afip4__FECAEASinMovimientoConsultar(struct soap *soap, struct __afip4__FECAEASinMovimientoConsultar *p)
{
	if (p)
	{	::soap_default___afip4__FECAEASinMovimientoConsultar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECAEASinMovimientoConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECAEASinMovimientoConsultar(struct soap *soap, const char *URL, struct __afip4__FECAEASinMovimientoConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECAEASinMovimientoConsultar(struct soap *soap, struct __afip4__FECAEASinMovimientoConsultar *p)
{
	if (::soap_read___afip4__FECAEASinMovimientoConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECAEASolicitar_DEFINED
#define SOAP_TYPE___afip4__FECAEASolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECAEASolicitar(struct soap*, struct __afip4__FECAEASolicitar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECAEASolicitar(struct soap*, const struct __afip4__FECAEASolicitar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECAEASolicitar(struct soap*, const char*, int, const struct __afip4__FECAEASolicitar *, const char*);
SOAP_FMAC3 struct __afip4__FECAEASolicitar * SOAP_FMAC4 soap_in___afip4__FECAEASolicitar(struct soap*, const char*, struct __afip4__FECAEASolicitar *, const char*);
SOAP_FMAC1 struct __afip4__FECAEASolicitar * SOAP_FMAC2 soap_instantiate___afip4__FECAEASolicitar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECAEASolicitar * soap_new___afip4__FECAEASolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECAEASolicitar(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECAEASolicitar * soap_new_req___afip4__FECAEASolicitar(
	struct soap *soap)
{
	struct __afip4__FECAEASolicitar *_p = ::soap_new___afip4__FECAEASolicitar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEASolicitar(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECAEASolicitar * soap_new_set___afip4__FECAEASolicitar(
	struct soap *soap,
	_afip3__FECAEASolicitar *afip3__FECAEASolicitar)
{
	struct __afip4__FECAEASolicitar *_p = ::soap_new___afip4__FECAEASolicitar(soap);
	if (_p)
	{	::soap_default___afip4__FECAEASolicitar(soap, _p);
		_p->afip3__FECAEASolicitar = afip3__FECAEASolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECAEASolicitar(struct soap*, const struct __afip4__FECAEASolicitar *, const char*, const char*);

inline int soap_write___afip4__FECAEASolicitar(struct soap *soap, struct __afip4__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FECAEASolicitar(soap, p), 0) || ::soap_put___afip4__FECAEASolicitar(soap, p, "-afip4:FECAEASolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip4__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEASolicitar(soap, p)), 0) || ::soap_put___afip4__FECAEASolicitar(soap, p, "-afip4:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip4__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEASolicitar(soap, p)), 0) || ::soap_put___afip4__FECAEASolicitar(soap, p, "-afip4:FECAEASolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip4__FECAEASolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAEASolicitar(soap, p), 0) || ::soap_put___afip4__FECAEASolicitar(soap, p, "-afip4:FECAEASolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECAEASolicitar * SOAP_FMAC4 soap_get___afip4__FECAEASolicitar(struct soap*, struct __afip4__FECAEASolicitar *, const char*, const char*);

inline int soap_read___afip4__FECAEASolicitar(struct soap *soap, struct __afip4__FECAEASolicitar *p)
{
	if (p)
	{	::soap_default___afip4__FECAEASolicitar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECAEASolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECAEASolicitar(struct soap *soap, const char *URL, struct __afip4__FECAEASolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECAEASolicitar(struct soap *soap, struct __afip4__FECAEASolicitar *p)
{
	if (::soap_read___afip4__FECAEASolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECAEARegInformativo_DEFINED
#define SOAP_TYPE___afip4__FECAEARegInformativo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECAEARegInformativo(struct soap*, struct __afip4__FECAEARegInformativo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECAEARegInformativo(struct soap*, const struct __afip4__FECAEARegInformativo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECAEARegInformativo(struct soap*, const char*, int, const struct __afip4__FECAEARegInformativo *, const char*);
SOAP_FMAC3 struct __afip4__FECAEARegInformativo * SOAP_FMAC4 soap_in___afip4__FECAEARegInformativo(struct soap*, const char*, struct __afip4__FECAEARegInformativo *, const char*);
SOAP_FMAC1 struct __afip4__FECAEARegInformativo * SOAP_FMAC2 soap_instantiate___afip4__FECAEARegInformativo(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECAEARegInformativo * soap_new___afip4__FECAEARegInformativo(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECAEARegInformativo(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECAEARegInformativo * soap_new_req___afip4__FECAEARegInformativo(
	struct soap *soap)
{
	struct __afip4__FECAEARegInformativo *_p = ::soap_new___afip4__FECAEARegInformativo(soap);
	if (_p)
	{	::soap_default___afip4__FECAEARegInformativo(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECAEARegInformativo * soap_new_set___afip4__FECAEARegInformativo(
	struct soap *soap,
	_afip3__FECAEARegInformativo *afip3__FECAEARegInformativo)
{
	struct __afip4__FECAEARegInformativo *_p = ::soap_new___afip4__FECAEARegInformativo(soap);
	if (_p)
	{	::soap_default___afip4__FECAEARegInformativo(soap, _p);
		_p->afip3__FECAEARegInformativo = afip3__FECAEARegInformativo;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECAEARegInformativo(struct soap*, const struct __afip4__FECAEARegInformativo *, const char*, const char*);

inline int soap_write___afip4__FECAEARegInformativo(struct soap *soap, struct __afip4__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FECAEARegInformativo(soap, p), 0) || ::soap_put___afip4__FECAEARegInformativo(soap, p, "-afip4:FECAEARegInformativo", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip4__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAEARegInformativo(soap, p)), 0) || ::soap_put___afip4__FECAEARegInformativo(soap, p, "-afip4:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip4__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAEARegInformativo(soap, p), 0) || ::soap_put___afip4__FECAEARegInformativo(soap, p, "-afip4:FECAEARegInformativo", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip4__FECAEARegInformativo const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAEARegInformativo(soap, p), 0) || ::soap_put___afip4__FECAEARegInformativo(soap, p, "-afip4:FECAEARegInformativo", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECAEARegInformativo * SOAP_FMAC4 soap_get___afip4__FECAEARegInformativo(struct soap*, struct __afip4__FECAEARegInformativo *, const char*, const char*);

inline int soap_read___afip4__FECAEARegInformativo(struct soap *soap, struct __afip4__FECAEARegInformativo *p)
{
	if (p)
	{	::soap_default___afip4__FECAEARegInformativo(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECAEARegInformativo(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECAEARegInformativo(struct soap *soap, const char *URL, struct __afip4__FECAEARegInformativo *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECAEARegInformativo(struct soap *soap, struct __afip4__FECAEARegInformativo *p)
{
	if (::soap_read___afip4__FECAEARegInformativo(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECompConsultar_DEFINED
#define SOAP_TYPE___afip4__FECompConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECompConsultar(struct soap*, struct __afip4__FECompConsultar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECompConsultar(struct soap*, const struct __afip4__FECompConsultar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECompConsultar(struct soap*, const char*, int, const struct __afip4__FECompConsultar *, const char*);
SOAP_FMAC3 struct __afip4__FECompConsultar * SOAP_FMAC4 soap_in___afip4__FECompConsultar(struct soap*, const char*, struct __afip4__FECompConsultar *, const char*);
SOAP_FMAC1 struct __afip4__FECompConsultar * SOAP_FMAC2 soap_instantiate___afip4__FECompConsultar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECompConsultar * soap_new___afip4__FECompConsultar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECompConsultar(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECompConsultar * soap_new_req___afip4__FECompConsultar(
	struct soap *soap)
{
	struct __afip4__FECompConsultar *_p = ::soap_new___afip4__FECompConsultar(soap);
	if (_p)
	{	::soap_default___afip4__FECompConsultar(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECompConsultar * soap_new_set___afip4__FECompConsultar(
	struct soap *soap,
	_afip3__FECompConsultar *afip3__FECompConsultar)
{
	struct __afip4__FECompConsultar *_p = ::soap_new___afip4__FECompConsultar(soap);
	if (_p)
	{	::soap_default___afip4__FECompConsultar(soap, _p);
		_p->afip3__FECompConsultar = afip3__FECompConsultar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECompConsultar(struct soap*, const struct __afip4__FECompConsultar *, const char*, const char*);

inline int soap_write___afip4__FECompConsultar(struct soap *soap, struct __afip4__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FECompConsultar(soap, p)), 0) || ::soap_put___afip4__FECompConsultar(soap, p, "-afip4:FECompConsultar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECompConsultar(struct soap *soap, const char *URL, struct __afip4__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECompConsultar(soap, p)), 0) || ::soap_put___afip4__FECompConsultar(soap, p, "-afip4:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECompConsultar(struct soap *soap, const char *URL, struct __afip4__FECompConsultar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECompConsultar(soap, p), 0) || ::soap_put___afip4__FECompConsultar(soap, p, "-afip4:FECompConsultar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECompConsultar(struct soap *soap, const char *URL, struct __afip4__FECompConsultar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECompConsultar(soap, p)), 0) || ::soap_put___afip4__FECompConsultar(soap, p, "-afip4:FECompConsultar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECompConsultar * SOAP_FMAC4 soap_get___afip4__FECompConsultar(struct soap*, struct __afip4__FECompConsultar *, const char*, const char*);

inline int soap_read___afip4__FECompConsultar(struct soap *soap, struct __afip4__FECompConsultar *p)
{
	if (p)
	{	::soap_default___afip4__FECompConsultar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECompConsultar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECompConsultar(struct soap *soap, const char *URL, struct __afip4__FECompConsultar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECompConsultar(struct soap *soap, struct __afip4__FECompConsultar *p)
{
	if (::soap_read___afip4__FECompConsultar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECompUltimoAutorizado_DEFINED
#define SOAP_TYPE___afip4__FECompUltimoAutorizado_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECompUltimoAutorizado(struct soap*, struct __afip4__FECompUltimoAutorizado *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECompUltimoAutorizado(struct soap*, const struct __afip4__FECompUltimoAutorizado *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECompUltimoAutorizado(struct soap*, const char*, int, const struct __afip4__FECompUltimoAutorizado *, const char*);
SOAP_FMAC3 struct __afip4__FECompUltimoAutorizado * SOAP_FMAC4 soap_in___afip4__FECompUltimoAutorizado(struct soap*, const char*, struct __afip4__FECompUltimoAutorizado *, const char*);
SOAP_FMAC1 struct __afip4__FECompUltimoAutorizado * SOAP_FMAC2 soap_instantiate___afip4__FECompUltimoAutorizado(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECompUltimoAutorizado * soap_new___afip4__FECompUltimoAutorizado(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECompUltimoAutorizado(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECompUltimoAutorizado * soap_new_req___afip4__FECompUltimoAutorizado(
	struct soap *soap)
{
	struct __afip4__FECompUltimoAutorizado *_p = ::soap_new___afip4__FECompUltimoAutorizado(soap);
	if (_p)
	{	::soap_default___afip4__FECompUltimoAutorizado(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECompUltimoAutorizado * soap_new_set___afip4__FECompUltimoAutorizado(
	struct soap *soap,
	_afip3__FECompUltimoAutorizado *afip3__FECompUltimoAutorizado)
{
	struct __afip4__FECompUltimoAutorizado *_p = ::soap_new___afip4__FECompUltimoAutorizado(soap);
	if (_p)
	{	::soap_default___afip4__FECompUltimoAutorizado(soap, _p);
		_p->afip3__FECompUltimoAutorizado = afip3__FECompUltimoAutorizado;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECompUltimoAutorizado(struct soap*, const struct __afip4__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_write___afip4__FECompUltimoAutorizado(struct soap *soap, struct __afip4__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FECompUltimoAutorizado(soap, p)), 0) || ::soap_put___afip4__FECompUltimoAutorizado(soap, p, "-afip4:FECompUltimoAutorizado", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip4__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECompUltimoAutorizado(soap, p), 0) || ::soap_put___afip4__FECompUltimoAutorizado(soap, p, "-afip4:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip4__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECompUltimoAutorizado(soap, p)), 0) || ::soap_put___afip4__FECompUltimoAutorizado(soap, p, "-afip4:FECompUltimoAutorizado", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip4__FECompUltimoAutorizado const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECompUltimoAutorizado(soap, p)), 0) || ::soap_put___afip4__FECompUltimoAutorizado(soap, p, "-afip4:FECompUltimoAutorizado", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECompUltimoAutorizado * SOAP_FMAC4 soap_get___afip4__FECompUltimoAutorizado(struct soap*, struct __afip4__FECompUltimoAutorizado *, const char*, const char*);

inline int soap_read___afip4__FECompUltimoAutorizado(struct soap *soap, struct __afip4__FECompUltimoAutorizado *p)
{
	if (p)
	{	::soap_default___afip4__FECompUltimoAutorizado(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECompUltimoAutorizado(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECompUltimoAutorizado(struct soap *soap, const char *URL, struct __afip4__FECompUltimoAutorizado *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECompUltimoAutorizado(struct soap *soap, struct __afip4__FECompUltimoAutorizado *p)
{
	if (::soap_read___afip4__FECompUltimoAutorizado(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FEDummy_DEFINED
#define SOAP_TYPE___afip4__FEDummy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FEDummy(struct soap*, struct __afip4__FEDummy *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FEDummy(struct soap*, const struct __afip4__FEDummy *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FEDummy(struct soap*, const char*, int, const struct __afip4__FEDummy *, const char*);
SOAP_FMAC3 struct __afip4__FEDummy * SOAP_FMAC4 soap_in___afip4__FEDummy(struct soap*, const char*, struct __afip4__FEDummy *, const char*);
SOAP_FMAC1 struct __afip4__FEDummy * SOAP_FMAC2 soap_instantiate___afip4__FEDummy(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FEDummy * soap_new___afip4__FEDummy(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FEDummy(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FEDummy * soap_new_req___afip4__FEDummy(
	struct soap *soap)
{
	struct __afip4__FEDummy *_p = ::soap_new___afip4__FEDummy(soap);
	if (_p)
	{	::soap_default___afip4__FEDummy(soap, _p);
	}
	return _p;
}

inline struct __afip4__FEDummy * soap_new_set___afip4__FEDummy(
	struct soap *soap,
	_afip3__FEDummy *afip3__FEDummy)
{
	struct __afip4__FEDummy *_p = ::soap_new___afip4__FEDummy(soap);
	if (_p)
	{	::soap_default___afip4__FEDummy(soap, _p);
		_p->afip3__FEDummy = afip3__FEDummy;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FEDummy(struct soap*, const struct __afip4__FEDummy *, const char*, const char*);

inline int soap_write___afip4__FEDummy(struct soap *soap, struct __afip4__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FEDummy(soap, p), 0) || ::soap_put___afip4__FEDummy(soap, p, "-afip4:FEDummy", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FEDummy(struct soap *soap, const char *URL, struct __afip4__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEDummy(soap, p), 0) || ::soap_put___afip4__FEDummy(soap, p, "-afip4:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FEDummy(struct soap *soap, const char *URL, struct __afip4__FEDummy const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FEDummy(soap, p)), 0) || ::soap_put___afip4__FEDummy(soap, p, "-afip4:FEDummy", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FEDummy(struct soap *soap, const char *URL, struct __afip4__FEDummy const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FEDummy(soap, p), 0) || ::soap_put___afip4__FEDummy(soap, p, "-afip4:FEDummy", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FEDummy * SOAP_FMAC4 soap_get___afip4__FEDummy(struct soap*, struct __afip4__FEDummy *, const char*, const char*);

inline int soap_read___afip4__FEDummy(struct soap *soap, struct __afip4__FEDummy *p)
{
	if (p)
	{	::soap_default___afip4__FEDummy(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FEDummy(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FEDummy(struct soap *soap, const char *URL, struct __afip4__FEDummy *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FEDummy(struct soap *soap, struct __afip4__FEDummy *p)
{
	if (::soap_read___afip4__FEDummy(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECompTotXRequest_DEFINED
#define SOAP_TYPE___afip4__FECompTotXRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECompTotXRequest(struct soap*, struct __afip4__FECompTotXRequest *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECompTotXRequest(struct soap*, const struct __afip4__FECompTotXRequest *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECompTotXRequest(struct soap*, const char*, int, const struct __afip4__FECompTotXRequest *, const char*);
SOAP_FMAC3 struct __afip4__FECompTotXRequest * SOAP_FMAC4 soap_in___afip4__FECompTotXRequest(struct soap*, const char*, struct __afip4__FECompTotXRequest *, const char*);
SOAP_FMAC1 struct __afip4__FECompTotXRequest * SOAP_FMAC2 soap_instantiate___afip4__FECompTotXRequest(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECompTotXRequest * soap_new___afip4__FECompTotXRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECompTotXRequest(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECompTotXRequest * soap_new_req___afip4__FECompTotXRequest(
	struct soap *soap)
{
	struct __afip4__FECompTotXRequest *_p = ::soap_new___afip4__FECompTotXRequest(soap);
	if (_p)
	{	::soap_default___afip4__FECompTotXRequest(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECompTotXRequest * soap_new_set___afip4__FECompTotXRequest(
	struct soap *soap,
	_afip3__FECompTotXRequest *afip3__FECompTotXRequest)
{
	struct __afip4__FECompTotXRequest *_p = ::soap_new___afip4__FECompTotXRequest(soap);
	if (_p)
	{	::soap_default___afip4__FECompTotXRequest(soap, _p);
		_p->afip3__FECompTotXRequest = afip3__FECompTotXRequest;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECompTotXRequest(struct soap*, const struct __afip4__FECompTotXRequest *, const char*, const char*);

inline int soap_write___afip4__FECompTotXRequest(struct soap *soap, struct __afip4__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___afip4__FECompTotXRequest(soap, p), 0) || ::soap_put___afip4__FECompTotXRequest(soap, p, "-afip4:FECompTotXRequest", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip4__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECompTotXRequest(soap, p)), 0) || ::soap_put___afip4__FECompTotXRequest(soap, p, "-afip4:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip4__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECompTotXRequest(soap, p)), 0) || ::soap_put___afip4__FECompTotXRequest(soap, p, "-afip4:FECompTotXRequest", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip4__FECompTotXRequest const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECompTotXRequest(soap, p), 0) || ::soap_put___afip4__FECompTotXRequest(soap, p, "-afip4:FECompTotXRequest", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECompTotXRequest * SOAP_FMAC4 soap_get___afip4__FECompTotXRequest(struct soap*, struct __afip4__FECompTotXRequest *, const char*, const char*);

inline int soap_read___afip4__FECompTotXRequest(struct soap *soap, struct __afip4__FECompTotXRequest *p)
{
	if (p)
	{	::soap_default___afip4__FECompTotXRequest(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECompTotXRequest(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECompTotXRequest(struct soap *soap, const char *URL, struct __afip4__FECompTotXRequest *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECompTotXRequest(struct soap *soap, struct __afip4__FECompTotXRequest *p)
{
	if (::soap_read___afip4__FECompTotXRequest(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip4__FECAESolicitar_DEFINED
#define SOAP_TYPE___afip4__FECAESolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip4__FECAESolicitar(struct soap*, struct __afip4__FECAESolicitar *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip4__FECAESolicitar(struct soap*, const struct __afip4__FECAESolicitar *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip4__FECAESolicitar(struct soap*, const char*, int, const struct __afip4__FECAESolicitar *, const char*);
SOAP_FMAC3 struct __afip4__FECAESolicitar * SOAP_FMAC4 soap_in___afip4__FECAESolicitar(struct soap*, const char*, struct __afip4__FECAESolicitar *, const char*);
SOAP_FMAC1 struct __afip4__FECAESolicitar * SOAP_FMAC2 soap_instantiate___afip4__FECAESolicitar(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip4__FECAESolicitar * soap_new___afip4__FECAESolicitar(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip4__FECAESolicitar(soap, n, NULL, NULL, NULL);
}

inline struct __afip4__FECAESolicitar * soap_new_req___afip4__FECAESolicitar(
	struct soap *soap)
{
	struct __afip4__FECAESolicitar *_p = ::soap_new___afip4__FECAESolicitar(soap);
	if (_p)
	{	::soap_default___afip4__FECAESolicitar(soap, _p);
	}
	return _p;
}

inline struct __afip4__FECAESolicitar * soap_new_set___afip4__FECAESolicitar(
	struct soap *soap,
	_afip3__FECAESolicitar *afip3__FECAESolicitar)
{
	struct __afip4__FECAESolicitar *_p = ::soap_new___afip4__FECAESolicitar(soap);
	if (_p)
	{	::soap_default___afip4__FECAESolicitar(soap, _p);
		_p->afip3__FECAESolicitar = afip3__FECAESolicitar;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip4__FECAESolicitar(struct soap*, const struct __afip4__FECAESolicitar *, const char*, const char*);

inline int soap_write___afip4__FECAESolicitar(struct soap *soap, struct __afip4__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip4__FECAESolicitar(soap, p)), 0) || ::soap_put___afip4__FECAESolicitar(soap, p, "-afip4:FECAESolicitar", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip4__FECAESolicitar(struct soap *soap, const char *URL, struct __afip4__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAESolicitar(soap, p)), 0) || ::soap_put___afip4__FECAESolicitar(soap, p, "-afip4:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip4__FECAESolicitar(struct soap *soap, const char *URL, struct __afip4__FECAESolicitar const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip4__FECAESolicitar(soap, p), 0) || ::soap_put___afip4__FECAESolicitar(soap, p, "-afip4:FECAESolicitar", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip4__FECAESolicitar(struct soap *soap, const char *URL, struct __afip4__FECAESolicitar const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip4__FECAESolicitar(soap, p)), 0) || ::soap_put___afip4__FECAESolicitar(soap, p, "-afip4:FECAESolicitar", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip4__FECAESolicitar * SOAP_FMAC4 soap_get___afip4__FECAESolicitar(struct soap*, struct __afip4__FECAESolicitar *, const char*, const char*);

inline int soap_read___afip4__FECAESolicitar(struct soap *soap, struct __afip4__FECAESolicitar *p)
{
	if (p)
	{	::soap_default___afip4__FECAESolicitar(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip4__FECAESolicitar(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip4__FECAESolicitar(struct soap *soap, const char *URL, struct __afip4__FECAESolicitar *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip4__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip4__FECAESolicitar(struct soap *soap, struct __afip4__FECAESolicitar *p)
{
	if (::soap_read___afip4__FECAESolicitar(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE___afip2__loginCms_DEFINED
#define SOAP_TYPE___afip2__loginCms_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___afip2__loginCms(struct soap*, struct __afip2__loginCms *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___afip2__loginCms(struct soap*, const struct __afip2__loginCms *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___afip2__loginCms(struct soap*, const char*, int, const struct __afip2__loginCms *, const char*);
SOAP_FMAC3 struct __afip2__loginCms * SOAP_FMAC4 soap_in___afip2__loginCms(struct soap*, const char*, struct __afip2__loginCms *, const char*);
SOAP_FMAC1 struct __afip2__loginCms * SOAP_FMAC2 soap_instantiate___afip2__loginCms(struct soap*, int, const char*, const char*, size_t*);

inline struct __afip2__loginCms * soap_new___afip2__loginCms(struct soap *soap, int n = -1)
{
	return soap_instantiate___afip2__loginCms(soap, n, NULL, NULL, NULL);
}

inline struct __afip2__loginCms * soap_new_req___afip2__loginCms(
	struct soap *soap)
{
	struct __afip2__loginCms *_p = ::soap_new___afip2__loginCms(soap);
	if (_p)
	{	::soap_default___afip2__loginCms(soap, _p);
	}
	return _p;
}

inline struct __afip2__loginCms * soap_new_set___afip2__loginCms(
	struct soap *soap,
	_afip1__loginCms *afip1__loginCms)
{
	struct __afip2__loginCms *_p = ::soap_new___afip2__loginCms(soap);
	if (_p)
	{	::soap_default___afip2__loginCms(soap, _p);
		_p->afip1__loginCms = afip1__loginCms;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___afip2__loginCms(struct soap*, const struct __afip2__loginCms *, const char*, const char*);

inline int soap_write___afip2__loginCms(struct soap *soap, struct __afip2__loginCms const*p)
{
	soap_free_temp(soap);
    if (soap_begin_send(soap) || (static_cast<void>(::soap_serialize___afip2__loginCms(soap, p)), 0) || ::soap_put___afip2__loginCms(soap, p, "-afip2:loginCms", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___afip2__loginCms(struct soap *soap, const char *URL, struct __afip2__loginCms const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___afip2__loginCms(soap, p), 0) || ::soap_put___afip2__loginCms(soap, p, "-afip2:loginCms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___afip2__loginCms(struct soap *soap, const char *URL, struct __afip2__loginCms const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip2__loginCms(soap, p)), 0) || ::soap_put___afip2__loginCms(soap, p, "-afip2:loginCms", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___afip2__loginCms(struct soap *soap, const char *URL, struct __afip2__loginCms const*p)
{
	soap_free_temp(soap);
    if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize___afip2__loginCms(soap, p)), 0) || ::soap_put___afip2__loginCms(soap, p, "-afip2:loginCms", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __afip2__loginCms * SOAP_FMAC4 soap_get___afip2__loginCms(struct soap*, struct __afip2__loginCms *, const char*, const char*);

inline int soap_read___afip2__loginCms(struct soap *soap, struct __afip2__loginCms *p)
{
	if (p)
	{	::soap_default___afip2__loginCms(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___afip2__loginCms(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___afip2__loginCms(struct soap *soap, const char *URL, struct __afip2__loginCms *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___afip2__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv___afip2__loginCms(struct soap *soap, struct __afip2__loginCms *p)
{
	if (::soap_read___afip2__loginCms(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	afip2__LoginFault *afip2__fault,
	int __type,
	void *fault,
	char *__any)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->afip2__fault = afip2__fault;
		_p->__type = __type;
		_p->fault = fault;
		_p->__any = __any;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
    if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (static_cast<void>(::soap_serialize_SOAP_ENV__Detail(soap, p)), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposPaises_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposPaises_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposPaises(struct soap*, _afip3__FEParamGetTiposPaises *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposPaises(struct soap*, const char *, int, _afip3__FEParamGetTiposPaises *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposPaises ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposPaises(struct soap*, const char*, _afip3__FEParamGetTiposPaises **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposPaises(struct soap*, _afip3__FEParamGetTiposPaises *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposPaises ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposPaises(struct soap*, _afip3__FEParamGetTiposPaises **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposDoc_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposDoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposDoc(struct soap*, _afip3__FEParamGetTiposDoc *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposDoc(struct soap*, const char *, int, _afip3__FEParamGetTiposDoc *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposDoc ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposDoc(struct soap*, const char*, _afip3__FEParamGetTiposDoc **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposDoc(struct soap*, _afip3__FEParamGetTiposDoc *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposDoc ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposDoc(struct soap*, _afip3__FEParamGetTiposDoc **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposCbte_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposCbte_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposCbte(struct soap*, _afip3__FEParamGetTiposCbte *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposCbte(struct soap*, const char *, int, _afip3__FEParamGetTiposCbte *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposCbte ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposCbte(struct soap*, const char*, _afip3__FEParamGetTiposCbte **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposCbte(struct soap*, _afip3__FEParamGetTiposCbte *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposCbte ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposCbte(struct soap*, _afip3__FEParamGetTiposCbte **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetPtosVenta_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetPtosVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetPtosVenta(struct soap*, _afip3__FEParamGetPtosVenta *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetPtosVenta(struct soap*, const char *, int, _afip3__FEParamGetPtosVenta *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetPtosVenta ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetPtosVenta(struct soap*, const char*, _afip3__FEParamGetPtosVenta **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetPtosVenta(struct soap*, _afip3__FEParamGetPtosVenta *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetPtosVenta ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetPtosVenta(struct soap*, _afip3__FEParamGetPtosVenta **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposConcepto_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposConcepto_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposConcepto(struct soap*, _afip3__FEParamGetTiposConcepto *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposConcepto(struct soap*, const char *, int, _afip3__FEParamGetTiposConcepto *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposConcepto ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposConcepto(struct soap*, const char*, _afip3__FEParamGetTiposConcepto **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposConcepto(struct soap*, _afip3__FEParamGetTiposConcepto *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposConcepto ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposConcepto(struct soap*, _afip3__FEParamGetTiposConcepto **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposOpcional_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposOpcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposOpcional(struct soap*, _afip3__FEParamGetTiposOpcional *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposOpcional(struct soap*, const char *, int, _afip3__FEParamGetTiposOpcional *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposOpcional ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposOpcional(struct soap*, const char*, _afip3__FEParamGetTiposOpcional **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposOpcional(struct soap*, _afip3__FEParamGetTiposOpcional *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposOpcional ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposOpcional(struct soap*, _afip3__FEParamGetTiposOpcional **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposIva_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposIva(struct soap*, _afip3__FEParamGetTiposIva *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposIva(struct soap*, const char *, int, _afip3__FEParamGetTiposIva *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposIva ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposIva(struct soap*, const char*, _afip3__FEParamGetTiposIva **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposIva(struct soap*, _afip3__FEParamGetTiposIva *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposIva ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposIva(struct soap*, _afip3__FEParamGetTiposIva **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposMonedas_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposMonedas_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposMonedas(struct soap*, _afip3__FEParamGetTiposMonedas *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposMonedas(struct soap*, const char *, int, _afip3__FEParamGetTiposMonedas *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposMonedas ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposMonedas(struct soap*, const char*, _afip3__FEParamGetTiposMonedas **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposMonedas(struct soap*, _afip3__FEParamGetTiposMonedas *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposMonedas ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposMonedas(struct soap*, _afip3__FEParamGetTiposMonedas **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetTiposTributos_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetTiposTributos_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetTiposTributos(struct soap*, _afip3__FEParamGetTiposTributos *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetTiposTributos(struct soap*, const char *, int, _afip3__FEParamGetTiposTributos *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetTiposTributos ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetTiposTributos(struct soap*, const char*, _afip3__FEParamGetTiposTributos **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetTiposTributos(struct soap*, _afip3__FEParamGetTiposTributos *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetTiposTributos ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetTiposTributos(struct soap*, _afip3__FEParamGetTiposTributos **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEParamGetCotizacion_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEParamGetCotizacion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEParamGetCotizacion(struct soap*, _afip3__FEParamGetCotizacion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEParamGetCotizacion(struct soap*, const char *, int, _afip3__FEParamGetCotizacion *const*, const char *);
SOAP_FMAC3 _afip3__FEParamGetCotizacion ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEParamGetCotizacion(struct soap*, const char*, _afip3__FEParamGetCotizacion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEParamGetCotizacion(struct soap*, _afip3__FEParamGetCotizacion *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEParamGetCotizacion ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEParamGetCotizacion(struct soap*, _afip3__FEParamGetCotizacion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECAEAConsultar_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECAEAConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECAEAConsultar(struct soap*, _afip3__FECAEAConsultar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECAEAConsultar(struct soap*, const char *, int, _afip3__FECAEAConsultar *const*, const char *);
SOAP_FMAC3 _afip3__FECAEAConsultar ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECAEAConsultar(struct soap*, const char*, _afip3__FECAEAConsultar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECAEAConsultar(struct soap*, _afip3__FECAEAConsultar *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECAEAConsultar ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECAEAConsultar(struct soap*, _afip3__FECAEAConsultar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECAEASinMovimientoInformar_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECAEASinMovimientoInformar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECAEASinMovimientoInformar(struct soap*, _afip3__FECAEASinMovimientoInformar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECAEASinMovimientoInformar(struct soap*, const char *, int, _afip3__FECAEASinMovimientoInformar *const*, const char *);
SOAP_FMAC3 _afip3__FECAEASinMovimientoInformar ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECAEASinMovimientoInformar(struct soap*, const char*, _afip3__FECAEASinMovimientoInformar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECAEASinMovimientoInformar(struct soap*, _afip3__FECAEASinMovimientoInformar *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECAEASinMovimientoInformar ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECAEASinMovimientoInformar(struct soap*, _afip3__FECAEASinMovimientoInformar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECAEASinMovimientoConsultar_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECAEASinMovimientoConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECAEASinMovimientoConsultar(struct soap*, _afip3__FECAEASinMovimientoConsultar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECAEASinMovimientoConsultar(struct soap*, const char *, int, _afip3__FECAEASinMovimientoConsultar *const*, const char *);
SOAP_FMAC3 _afip3__FECAEASinMovimientoConsultar ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECAEASinMovimientoConsultar(struct soap*, const char*, _afip3__FECAEASinMovimientoConsultar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECAEASinMovimientoConsultar(struct soap*, _afip3__FECAEASinMovimientoConsultar *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECAEASinMovimientoConsultar ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECAEASinMovimientoConsultar(struct soap*, _afip3__FECAEASinMovimientoConsultar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECAEASolicitar_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECAEASolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECAEASolicitar(struct soap*, _afip3__FECAEASolicitar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECAEASolicitar(struct soap*, const char *, int, _afip3__FECAEASolicitar *const*, const char *);
SOAP_FMAC3 _afip3__FECAEASolicitar ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECAEASolicitar(struct soap*, const char*, _afip3__FECAEASolicitar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECAEASolicitar(struct soap*, _afip3__FECAEASolicitar *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECAEASolicitar ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECAEASolicitar(struct soap*, _afip3__FECAEASolicitar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECAEARegInformativo_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECAEARegInformativo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECAEARegInformativo(struct soap*, _afip3__FECAEARegInformativo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECAEARegInformativo(struct soap*, const char *, int, _afip3__FECAEARegInformativo *const*, const char *);
SOAP_FMAC3 _afip3__FECAEARegInformativo ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECAEARegInformativo(struct soap*, const char*, _afip3__FECAEARegInformativo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECAEARegInformativo(struct soap*, _afip3__FECAEARegInformativo *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECAEARegInformativo ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECAEARegInformativo(struct soap*, _afip3__FECAEARegInformativo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECompConsultar_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECompConsultar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECompConsultar(struct soap*, _afip3__FECompConsultar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECompConsultar(struct soap*, const char *, int, _afip3__FECompConsultar *const*, const char *);
SOAP_FMAC3 _afip3__FECompConsultar ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECompConsultar(struct soap*, const char*, _afip3__FECompConsultar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECompConsultar(struct soap*, _afip3__FECompConsultar *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECompConsultar ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECompConsultar(struct soap*, _afip3__FECompConsultar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECompUltimoAutorizado_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECompUltimoAutorizado_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECompUltimoAutorizado(struct soap*, _afip3__FECompUltimoAutorizado *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECompUltimoAutorizado(struct soap*, const char *, int, _afip3__FECompUltimoAutorizado *const*, const char *);
SOAP_FMAC3 _afip3__FECompUltimoAutorizado ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECompUltimoAutorizado(struct soap*, const char*, _afip3__FECompUltimoAutorizado **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECompUltimoAutorizado(struct soap*, _afip3__FECompUltimoAutorizado *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECompUltimoAutorizado ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECompUltimoAutorizado(struct soap*, _afip3__FECompUltimoAutorizado **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FEDummy_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FEDummy_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FEDummy(struct soap*, _afip3__FEDummy *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FEDummy(struct soap*, const char *, int, _afip3__FEDummy *const*, const char *);
SOAP_FMAC3 _afip3__FEDummy ** SOAP_FMAC4 soap_in_PointerTo_afip3__FEDummy(struct soap*, const char*, _afip3__FEDummy **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FEDummy(struct soap*, _afip3__FEDummy *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FEDummy ** SOAP_FMAC4 soap_get_PointerTo_afip3__FEDummy(struct soap*, _afip3__FEDummy **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECompTotXRequest_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECompTotXRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECompTotXRequest(struct soap*, _afip3__FECompTotXRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECompTotXRequest(struct soap*, const char *, int, _afip3__FECompTotXRequest *const*, const char *);
SOAP_FMAC3 _afip3__FECompTotXRequest ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECompTotXRequest(struct soap*, const char*, _afip3__FECompTotXRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECompTotXRequest(struct soap*, _afip3__FECompTotXRequest *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECompTotXRequest ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECompTotXRequest(struct soap*, _afip3__FECompTotXRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip3__FECAESolicitar_DEFINED
#define SOAP_TYPE_PointerTo_afip3__FECAESolicitar_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip3__FECAESolicitar(struct soap*, _afip3__FECAESolicitar *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip3__FECAESolicitar(struct soap*, const char *, int, _afip3__FECAESolicitar *const*, const char *);
SOAP_FMAC3 _afip3__FECAESolicitar ** SOAP_FMAC4 soap_in_PointerTo_afip3__FECAESolicitar(struct soap*, const char*, _afip3__FECAESolicitar **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip3__FECAESolicitar(struct soap*, _afip3__FECAESolicitar *const*, const char*, const char*);
SOAP_FMAC3 _afip3__FECAESolicitar ** SOAP_FMAC4 soap_get_PointerTo_afip3__FECAESolicitar(struct soap*, _afip3__FECAESolicitar **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_afip1__loginCms_DEFINED
#define SOAP_TYPE_PointerTo_afip1__loginCms_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_afip1__loginCms(struct soap*, _afip1__loginCms *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_afip1__loginCms(struct soap*, const char *, int, _afip1__loginCms *const*, const char *);
SOAP_FMAC3 _afip1__loginCms ** SOAP_FMAC4 soap_in_PointerTo_afip1__loginCms(struct soap*, const char*, _afip1__loginCms **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_afip1__loginCms(struct soap*, _afip1__loginCms *const*, const char*, const char*);
SOAP_FMAC3 _afip1__loginCms ** SOAP_FMAC4 soap_get_PointerTo_afip1__loginCms(struct soap*, _afip1__loginCms **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip2__LoginFault_DEFINED
#define SOAP_TYPE_PointerToafip2__LoginFault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip2__LoginFault(struct soap*, afip2__LoginFault *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip2__LoginFault(struct soap*, const char *, int, afip2__LoginFault *const*, const char *);
SOAP_FMAC3 afip2__LoginFault ** SOAP_FMAC4 soap_in_PointerToafip2__LoginFault(struct soap*, const char*, afip2__LoginFault **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip2__LoginFault(struct soap*, afip2__LoginFault *const*, const char*, const char*);
SOAP_FMAC3 afip2__LoginFault ** SOAP_FMAC4 soap_get_PointerToafip2__LoginFault(struct soap*, afip2__LoginFault **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FEPaisResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FEPaisResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FEPaisResponse(struct soap*, afip3__FEPaisResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FEPaisResponse(struct soap*, const char *, int, afip3__FEPaisResponse *const*, const char *);
SOAP_FMAC3 afip3__FEPaisResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FEPaisResponse(struct soap*, const char*, afip3__FEPaisResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FEPaisResponse(struct soap*, afip3__FEPaisResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FEPaisResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FEPaisResponse(struct soap*, afip3__FEPaisResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__DocTipoResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__DocTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__DocTipoResponse(struct soap*, afip3__DocTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__DocTipoResponse(struct soap*, const char *, int, afip3__DocTipoResponse *const*, const char *);
SOAP_FMAC3 afip3__DocTipoResponse ** SOAP_FMAC4 soap_in_PointerToafip3__DocTipoResponse(struct soap*, const char*, afip3__DocTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__DocTipoResponse(struct soap*, afip3__DocTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__DocTipoResponse ** SOAP_FMAC4 soap_get_PointerToafip3__DocTipoResponse(struct soap*, afip3__DocTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__CbteTipoResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__CbteTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__CbteTipoResponse(struct soap*, afip3__CbteTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__CbteTipoResponse(struct soap*, const char *, int, afip3__CbteTipoResponse *const*, const char *);
SOAP_FMAC3 afip3__CbteTipoResponse ** SOAP_FMAC4 soap_in_PointerToafip3__CbteTipoResponse(struct soap*, const char*, afip3__CbteTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__CbteTipoResponse(struct soap*, afip3__CbteTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__CbteTipoResponse ** SOAP_FMAC4 soap_get_PointerToafip3__CbteTipoResponse(struct soap*, afip3__CbteTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FEPtoVentaResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FEPtoVentaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FEPtoVentaResponse(struct soap*, afip3__FEPtoVentaResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FEPtoVentaResponse(struct soap*, const char *, int, afip3__FEPtoVentaResponse *const*, const char *);
SOAP_FMAC3 afip3__FEPtoVentaResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FEPtoVentaResponse(struct soap*, const char*, afip3__FEPtoVentaResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FEPtoVentaResponse(struct soap*, afip3__FEPtoVentaResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FEPtoVentaResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FEPtoVentaResponse(struct soap*, afip3__FEPtoVentaResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ConceptoTipoResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__ConceptoTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ConceptoTipoResponse(struct soap*, afip3__ConceptoTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ConceptoTipoResponse(struct soap*, const char *, int, afip3__ConceptoTipoResponse *const*, const char *);
SOAP_FMAC3 afip3__ConceptoTipoResponse ** SOAP_FMAC4 soap_in_PointerToafip3__ConceptoTipoResponse(struct soap*, const char*, afip3__ConceptoTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ConceptoTipoResponse(struct soap*, afip3__ConceptoTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__ConceptoTipoResponse ** SOAP_FMAC4 soap_get_PointerToafip3__ConceptoTipoResponse(struct soap*, afip3__ConceptoTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__OpcionalTipoResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__OpcionalTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__OpcionalTipoResponse(struct soap*, afip3__OpcionalTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__OpcionalTipoResponse(struct soap*, const char *, int, afip3__OpcionalTipoResponse *const*, const char *);
SOAP_FMAC3 afip3__OpcionalTipoResponse ** SOAP_FMAC4 soap_in_PointerToafip3__OpcionalTipoResponse(struct soap*, const char*, afip3__OpcionalTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__OpcionalTipoResponse(struct soap*, afip3__OpcionalTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__OpcionalTipoResponse ** SOAP_FMAC4 soap_get_PointerToafip3__OpcionalTipoResponse(struct soap*, afip3__OpcionalTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__IvaTipoResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__IvaTipoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__IvaTipoResponse(struct soap*, afip3__IvaTipoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__IvaTipoResponse(struct soap*, const char *, int, afip3__IvaTipoResponse *const*, const char *);
SOAP_FMAC3 afip3__IvaTipoResponse ** SOAP_FMAC4 soap_in_PointerToafip3__IvaTipoResponse(struct soap*, const char*, afip3__IvaTipoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__IvaTipoResponse(struct soap*, afip3__IvaTipoResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__IvaTipoResponse ** SOAP_FMAC4 soap_get_PointerToafip3__IvaTipoResponse(struct soap*, afip3__IvaTipoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__MonedaResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__MonedaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__MonedaResponse(struct soap*, afip3__MonedaResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__MonedaResponse(struct soap*, const char *, int, afip3__MonedaResponse *const*, const char *);
SOAP_FMAC3 afip3__MonedaResponse ** SOAP_FMAC4 soap_in_PointerToafip3__MonedaResponse(struct soap*, const char*, afip3__MonedaResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__MonedaResponse(struct soap*, afip3__MonedaResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__MonedaResponse ** SOAP_FMAC4 soap_get_PointerToafip3__MonedaResponse(struct soap*, afip3__MonedaResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FETributoResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FETributoResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FETributoResponse(struct soap*, afip3__FETributoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FETributoResponse(struct soap*, const char *, int, afip3__FETributoResponse *const*, const char *);
SOAP_FMAC3 afip3__FETributoResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FETributoResponse(struct soap*, const char*, afip3__FETributoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FETributoResponse(struct soap*, afip3__FETributoResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FETributoResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FETributoResponse(struct soap*, afip3__FETributoResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECotizacionResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECotizacionResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECotizacionResponse(struct soap*, afip3__FECotizacionResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECotizacionResponse(struct soap*, const char *, int, afip3__FECotizacionResponse *const*, const char *);
SOAP_FMAC3 afip3__FECotizacionResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECotizacionResponse(struct soap*, const char*, afip3__FECotizacionResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECotizacionResponse(struct soap*, afip3__FECotizacionResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECotizacionResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECotizacionResponse(struct soap*, afip3__FECotizacionResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEASinMovResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEASinMovResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEASinMovResponse(struct soap*, afip3__FECAEASinMovResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEASinMovResponse(struct soap*, const char *, int, afip3__FECAEASinMovResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEASinMovResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEASinMovResponse(struct soap*, const char*, afip3__FECAEASinMovResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEASinMovResponse(struct soap*, afip3__FECAEASinMovResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEASinMovResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEASinMovResponse(struct soap*, afip3__FECAEASinMovResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEASinMovConsResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEASinMovConsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEASinMovConsResponse(struct soap*, afip3__FECAEASinMovConsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEASinMovConsResponse(struct soap*, const char *, int, afip3__FECAEASinMovConsResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEASinMovConsResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEASinMovConsResponse(struct soap*, const char*, afip3__FECAEASinMovConsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEASinMovConsResponse(struct soap*, afip3__FECAEASinMovConsResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEASinMovConsResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEASinMovConsResponse(struct soap*, afip3__FECAEASinMovConsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEAGetResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEAGetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEAGetResponse(struct soap*, afip3__FECAEAGetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEAGetResponse(struct soap*, const char *, int, afip3__FECAEAGetResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEAGetResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEAGetResponse(struct soap*, const char*, afip3__FECAEAGetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEAGetResponse(struct soap*, afip3__FECAEAGetResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEAGetResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEAGetResponse(struct soap*, afip3__FECAEAGetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEAResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEAResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEAResponse(struct soap*, afip3__FECAEAResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEAResponse(struct soap*, const char *, int, afip3__FECAEAResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEAResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEAResponse(struct soap*, const char*, afip3__FECAEAResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEAResponse(struct soap*, afip3__FECAEAResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEAResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEAResponse(struct soap*, afip3__FECAEAResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEARequest_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEARequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEARequest(struct soap*, afip3__FECAEARequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEARequest(struct soap*, const char *, int, afip3__FECAEARequest *const*, const char *);
SOAP_FMAC3 afip3__FECAEARequest ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEARequest(struct soap*, const char*, afip3__FECAEARequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEARequest(struct soap*, afip3__FECAEARequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEARequest ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEARequest(struct soap*, afip3__FECAEARequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECompConsultaResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECompConsultaResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECompConsultaResponse(struct soap*, afip3__FECompConsultaResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECompConsultaResponse(struct soap*, const char *, int, afip3__FECompConsultaResponse *const*, const char *);
SOAP_FMAC3 afip3__FECompConsultaResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECompConsultaResponse(struct soap*, const char*, afip3__FECompConsultaResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECompConsultaResponse(struct soap*, afip3__FECompConsultaResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECompConsultaResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECompConsultaResponse(struct soap*, afip3__FECompConsultaResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECompConsultaReq_DEFINED
#define SOAP_TYPE_PointerToafip3__FECompConsultaReq_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECompConsultaReq(struct soap*, afip3__FECompConsultaReq *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECompConsultaReq(struct soap*, const char *, int, afip3__FECompConsultaReq *const*, const char *);
SOAP_FMAC3 afip3__FECompConsultaReq ** SOAP_FMAC4 soap_in_PointerToafip3__FECompConsultaReq(struct soap*, const char*, afip3__FECompConsultaReq **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECompConsultaReq(struct soap*, afip3__FECompConsultaReq *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECompConsultaReq ** SOAP_FMAC4 soap_get_PointerToafip3__FECompConsultaReq(struct soap*, afip3__FECompConsultaReq **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FERecuperaLastCbteResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FERecuperaLastCbteResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FERecuperaLastCbteResponse(struct soap*, afip3__FERecuperaLastCbteResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FERecuperaLastCbteResponse(struct soap*, const char *, int, afip3__FERecuperaLastCbteResponse *const*, const char *);
SOAP_FMAC3 afip3__FERecuperaLastCbteResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FERecuperaLastCbteResponse(struct soap*, const char*, afip3__FERecuperaLastCbteResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FERecuperaLastCbteResponse(struct soap*, afip3__FERecuperaLastCbteResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FERecuperaLastCbteResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FERecuperaLastCbteResponse(struct soap*, afip3__FERecuperaLastCbteResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__DummyResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__DummyResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__DummyResponse(struct soap*, afip3__DummyResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__DummyResponse(struct soap*, const char *, int, afip3__DummyResponse *const*, const char *);
SOAP_FMAC3 afip3__DummyResponse ** SOAP_FMAC4 soap_in_PointerToafip3__DummyResponse(struct soap*, const char*, afip3__DummyResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__DummyResponse(struct soap*, afip3__DummyResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__DummyResponse ** SOAP_FMAC4 soap_get_PointerToafip3__DummyResponse(struct soap*, afip3__DummyResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FERegXReqResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FERegXReqResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FERegXReqResponse(struct soap*, afip3__FERegXReqResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FERegXReqResponse(struct soap*, const char *, int, afip3__FERegXReqResponse *const*, const char *);
SOAP_FMAC3 afip3__FERegXReqResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FERegXReqResponse(struct soap*, const char*, afip3__FERegXReqResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FERegXReqResponse(struct soap*, afip3__FERegXReqResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FERegXReqResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FERegXReqResponse(struct soap*, afip3__FERegXReqResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEResponse(struct soap*, afip3__FECAEResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEResponse(struct soap*, const char *, int, afip3__FECAEResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEResponse(struct soap*, const char*, afip3__FECAEResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEResponse(struct soap*, afip3__FECAEResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEResponse(struct soap*, afip3__FECAEResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAERequest_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAERequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAERequest(struct soap*, afip3__FECAERequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAERequest(struct soap*, const char *, int, afip3__FECAERequest *const*, const char *);
SOAP_FMAC3 afip3__FECAERequest ** SOAP_FMAC4 soap_in_PointerToafip3__FECAERequest(struct soap*, const char*, afip3__FECAERequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAERequest(struct soap*, afip3__FECAERequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAERequest ** SOAP_FMAC4 soap_get_PointerToafip3__FECAERequest(struct soap*, afip3__FECAERequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FEAuthRequest_DEFINED
#define SOAP_TYPE_PointerToafip3__FEAuthRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FEAuthRequest(struct soap*, afip3__FEAuthRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FEAuthRequest(struct soap*, const char *, int, afip3__FEAuthRequest *const*, const char *);
SOAP_FMAC3 afip3__FEAuthRequest ** SOAP_FMAC4 soap_in_PointerToafip3__FEAuthRequest(struct soap*, const char*, afip3__FEAuthRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FEAuthRequest(struct soap*, afip3__FEAuthRequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__FEAuthRequest ** SOAP_FMAC4 soap_get_PointerToafip3__FEAuthRequest(struct soap*, afip3__FEAuthRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__PaisTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__PaisTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__PaisTipo(struct soap*, afip3__PaisTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__PaisTipo(struct soap*, const char *, int, afip3__PaisTipo *const*, const char *);
SOAP_FMAC3 afip3__PaisTipo ** SOAP_FMAC4 soap_in_PointerToafip3__PaisTipo(struct soap*, const char*, afip3__PaisTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__PaisTipo(struct soap*, afip3__PaisTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__PaisTipo ** SOAP_FMAC4 soap_get_PointerToafip3__PaisTipo(struct soap*, afip3__PaisTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfPaisTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfPaisTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfPaisTipo(struct soap*, afip3__ArrayOfPaisTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfPaisTipo(struct soap*, const char *, int, afip3__ArrayOfPaisTipo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfPaisTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfPaisTipo(struct soap*, const char*, afip3__ArrayOfPaisTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfPaisTipo(struct soap*, afip3__ArrayOfPaisTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfPaisTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfPaisTipo(struct soap*, afip3__ArrayOfPaisTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__DocTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__DocTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__DocTipo(struct soap*, afip3__DocTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__DocTipo(struct soap*, const char *, int, afip3__DocTipo *const*, const char *);
SOAP_FMAC3 afip3__DocTipo ** SOAP_FMAC4 soap_in_PointerToafip3__DocTipo(struct soap*, const char*, afip3__DocTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__DocTipo(struct soap*, afip3__DocTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__DocTipo ** SOAP_FMAC4 soap_get_PointerToafip3__DocTipo(struct soap*, afip3__DocTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfDocTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfDocTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfDocTipo(struct soap*, afip3__ArrayOfDocTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfDocTipo(struct soap*, const char *, int, afip3__ArrayOfDocTipo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfDocTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfDocTipo(struct soap*, const char*, afip3__ArrayOfDocTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfDocTipo(struct soap*, afip3__ArrayOfDocTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfDocTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfDocTipo(struct soap*, afip3__ArrayOfDocTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__CbteTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__CbteTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__CbteTipo(struct soap*, afip3__CbteTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__CbteTipo(struct soap*, const char *, int, afip3__CbteTipo *const*, const char *);
SOAP_FMAC3 afip3__CbteTipo ** SOAP_FMAC4 soap_in_PointerToafip3__CbteTipo(struct soap*, const char*, afip3__CbteTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__CbteTipo(struct soap*, afip3__CbteTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__CbteTipo ** SOAP_FMAC4 soap_get_PointerToafip3__CbteTipo(struct soap*, afip3__CbteTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfCbteTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfCbteTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfCbteTipo(struct soap*, afip3__ArrayOfCbteTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfCbteTipo(struct soap*, const char *, int, afip3__ArrayOfCbteTipo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfCbteTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfCbteTipo(struct soap*, const char*, afip3__ArrayOfCbteTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfCbteTipo(struct soap*, afip3__ArrayOfCbteTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfCbteTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfCbteTipo(struct soap*, afip3__ArrayOfCbteTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__PtoVenta_DEFINED
#define SOAP_TYPE_PointerToafip3__PtoVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__PtoVenta(struct soap*, afip3__PtoVenta *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__PtoVenta(struct soap*, const char *, int, afip3__PtoVenta *const*, const char *);
SOAP_FMAC3 afip3__PtoVenta ** SOAP_FMAC4 soap_in_PointerToafip3__PtoVenta(struct soap*, const char*, afip3__PtoVenta **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__PtoVenta(struct soap*, afip3__PtoVenta *const*, const char*, const char*);
SOAP_FMAC3 afip3__PtoVenta ** SOAP_FMAC4 soap_get_PointerToafip3__PtoVenta(struct soap*, afip3__PtoVenta **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfPtoVenta_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfPtoVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfPtoVenta(struct soap*, afip3__ArrayOfPtoVenta *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfPtoVenta(struct soap*, const char *, int, afip3__ArrayOfPtoVenta *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfPtoVenta ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfPtoVenta(struct soap*, const char*, afip3__ArrayOfPtoVenta **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfPtoVenta(struct soap*, afip3__ArrayOfPtoVenta *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfPtoVenta ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfPtoVenta(struct soap*, afip3__ArrayOfPtoVenta **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ConceptoTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ConceptoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ConceptoTipo(struct soap*, afip3__ConceptoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ConceptoTipo(struct soap*, const char *, int, afip3__ConceptoTipo *const*, const char *);
SOAP_FMAC3 afip3__ConceptoTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ConceptoTipo(struct soap*, const char*, afip3__ConceptoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ConceptoTipo(struct soap*, afip3__ConceptoTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ConceptoTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ConceptoTipo(struct soap*, afip3__ConceptoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfConceptoTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfConceptoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfConceptoTipo(struct soap*, afip3__ArrayOfConceptoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfConceptoTipo(struct soap*, const char *, int, afip3__ArrayOfConceptoTipo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfConceptoTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfConceptoTipo(struct soap*, const char*, afip3__ArrayOfConceptoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfConceptoTipo(struct soap*, afip3__ArrayOfConceptoTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfConceptoTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfConceptoTipo(struct soap*, afip3__ArrayOfConceptoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__OpcionalTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__OpcionalTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__OpcionalTipo(struct soap*, afip3__OpcionalTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__OpcionalTipo(struct soap*, const char *, int, afip3__OpcionalTipo *const*, const char *);
SOAP_FMAC3 afip3__OpcionalTipo ** SOAP_FMAC4 soap_in_PointerToafip3__OpcionalTipo(struct soap*, const char*, afip3__OpcionalTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__OpcionalTipo(struct soap*, afip3__OpcionalTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__OpcionalTipo ** SOAP_FMAC4 soap_get_PointerToafip3__OpcionalTipo(struct soap*, afip3__OpcionalTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfOpcionalTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfOpcionalTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfOpcionalTipo(struct soap*, afip3__ArrayOfOpcionalTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfOpcionalTipo(struct soap*, const char *, int, afip3__ArrayOfOpcionalTipo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfOpcionalTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfOpcionalTipo(struct soap*, const char*, afip3__ArrayOfOpcionalTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfOpcionalTipo(struct soap*, afip3__ArrayOfOpcionalTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfOpcionalTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfOpcionalTipo(struct soap*, afip3__ArrayOfOpcionalTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__IvaTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__IvaTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__IvaTipo(struct soap*, afip3__IvaTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__IvaTipo(struct soap*, const char *, int, afip3__IvaTipo *const*, const char *);
SOAP_FMAC3 afip3__IvaTipo ** SOAP_FMAC4 soap_in_PointerToafip3__IvaTipo(struct soap*, const char*, afip3__IvaTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__IvaTipo(struct soap*, afip3__IvaTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__IvaTipo ** SOAP_FMAC4 soap_get_PointerToafip3__IvaTipo(struct soap*, afip3__IvaTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfIvaTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfIvaTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfIvaTipo(struct soap*, afip3__ArrayOfIvaTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfIvaTipo(struct soap*, const char *, int, afip3__ArrayOfIvaTipo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfIvaTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfIvaTipo(struct soap*, const char*, afip3__ArrayOfIvaTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfIvaTipo(struct soap*, afip3__ArrayOfIvaTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfIvaTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfIvaTipo(struct soap*, afip3__ArrayOfIvaTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Moneda_DEFINED
#define SOAP_TYPE_PointerToafip3__Moneda_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Moneda(struct soap*, afip3__Moneda *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Moneda(struct soap*, const char *, int, afip3__Moneda *const*, const char *);
SOAP_FMAC3 afip3__Moneda ** SOAP_FMAC4 soap_in_PointerToafip3__Moneda(struct soap*, const char*, afip3__Moneda **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Moneda(struct soap*, afip3__Moneda *const*, const char*, const char*);
SOAP_FMAC3 afip3__Moneda ** SOAP_FMAC4 soap_get_PointerToafip3__Moneda(struct soap*, afip3__Moneda **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfMoneda_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfMoneda_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfMoneda(struct soap*, afip3__ArrayOfMoneda *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfMoneda(struct soap*, const char *, int, afip3__ArrayOfMoneda *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfMoneda ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfMoneda(struct soap*, const char*, afip3__ArrayOfMoneda **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfMoneda(struct soap*, afip3__ArrayOfMoneda *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfMoneda ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfMoneda(struct soap*, afip3__ArrayOfMoneda **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__TributoTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__TributoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__TributoTipo(struct soap*, afip3__TributoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__TributoTipo(struct soap*, const char *, int, afip3__TributoTipo *const*, const char *);
SOAP_FMAC3 afip3__TributoTipo ** SOAP_FMAC4 soap_in_PointerToafip3__TributoTipo(struct soap*, const char*, afip3__TributoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__TributoTipo(struct soap*, afip3__TributoTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__TributoTipo ** SOAP_FMAC4 soap_get_PointerToafip3__TributoTipo(struct soap*, afip3__TributoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfTributoTipo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfTributoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfTributoTipo(struct soap*, afip3__ArrayOfTributoTipo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfTributoTipo(struct soap*, const char *, int, afip3__ArrayOfTributoTipo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfTributoTipo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfTributoTipo(struct soap*, const char*, afip3__ArrayOfTributoTipo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfTributoTipo(struct soap*, afip3__ArrayOfTributoTipo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfTributoTipo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfTributoTipo(struct soap*, afip3__ArrayOfTributoTipo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Cotizacion_DEFINED
#define SOAP_TYPE_PointerToafip3__Cotizacion_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Cotizacion(struct soap*, afip3__Cotizacion *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Cotizacion(struct soap*, const char *, int, afip3__Cotizacion *const*, const char *);
SOAP_FMAC3 afip3__Cotizacion ** SOAP_FMAC4 soap_in_PointerToafip3__Cotizacion(struct soap*, const char*, afip3__Cotizacion **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Cotizacion(struct soap*, afip3__Cotizacion *const*, const char*, const char*);
SOAP_FMAC3 afip3__Cotizacion ** SOAP_FMAC4 soap_get_PointerToafip3__Cotizacion(struct soap*, afip3__Cotizacion **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEASinMov_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEASinMov_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEASinMov(struct soap*, afip3__FECAEASinMov *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEASinMov(struct soap*, const char *, int, afip3__FECAEASinMov *const*, const char *);
SOAP_FMAC3 afip3__FECAEASinMov ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEASinMov(struct soap*, const char*, afip3__FECAEASinMov **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEASinMov(struct soap*, afip3__FECAEASinMov *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEASinMov ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEASinMov(struct soap*, afip3__FECAEASinMov **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfFECAEASinMov_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfFECAEASinMov_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfFECAEASinMov(struct soap*, afip3__ArrayOfFECAEASinMov *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfFECAEASinMov(struct soap*, const char *, int, afip3__ArrayOfFECAEASinMov *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfFECAEASinMov ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfFECAEASinMov(struct soap*, const char*, afip3__ArrayOfFECAEASinMov **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfFECAEASinMov(struct soap*, afip3__ArrayOfFECAEASinMov *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEASinMov ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfFECAEASinMov(struct soap*, afip3__ArrayOfFECAEASinMov **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEAGet_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEAGet_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEAGet(struct soap*, afip3__FECAEAGet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEAGet(struct soap*, const char *, int, afip3__FECAEAGet *const*, const char *);
SOAP_FMAC3 afip3__FECAEAGet ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEAGet(struct soap*, const char*, afip3__FECAEAGet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEAGet(struct soap*, afip3__FECAEAGet *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEAGet ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEAGet(struct soap*, afip3__FECAEAGet **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEADetResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEADetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEADetResponse(struct soap*, afip3__FECAEADetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEADetResponse(struct soap*, const char *, int, afip3__FECAEADetResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEADetResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEADetResponse(struct soap*, const char*, afip3__FECAEADetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEADetResponse(struct soap*, afip3__FECAEADetResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEADetResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEADetResponse(struct soap*, afip3__FECAEADetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfFECAEADetResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfFECAEADetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfFECAEADetResponse(struct soap*, afip3__ArrayOfFECAEADetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfFECAEADetResponse(struct soap*, const char *, int, afip3__ArrayOfFECAEADetResponse *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfFECAEADetResponse ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfFECAEADetResponse(struct soap*, const char*, afip3__ArrayOfFECAEADetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfFECAEADetResponse(struct soap*, afip3__ArrayOfFECAEADetResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEADetResponse ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfFECAEADetResponse(struct soap*, afip3__ArrayOfFECAEADetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEACabResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEACabResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEACabResponse(struct soap*, afip3__FECAEACabResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEACabResponse(struct soap*, const char *, int, afip3__FECAEACabResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEACabResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEACabResponse(struct soap*, const char*, afip3__FECAEACabResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEACabResponse(struct soap*, afip3__FECAEACabResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEACabResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEACabResponse(struct soap*, afip3__FECAEACabResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEADetRequest_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEADetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEADetRequest(struct soap*, afip3__FECAEADetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEADetRequest(struct soap*, const char *, int, afip3__FECAEADetRequest *const*, const char *);
SOAP_FMAC3 afip3__FECAEADetRequest ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEADetRequest(struct soap*, const char*, afip3__FECAEADetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEADetRequest(struct soap*, afip3__FECAEADetRequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEADetRequest ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEADetRequest(struct soap*, afip3__FECAEADetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfFECAEADetRequest_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfFECAEADetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfFECAEADetRequest(struct soap*, afip3__ArrayOfFECAEADetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfFECAEADetRequest(struct soap*, const char *, int, afip3__ArrayOfFECAEADetRequest *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfFECAEADetRequest ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfFECAEADetRequest(struct soap*, const char*, afip3__ArrayOfFECAEADetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfFECAEADetRequest(struct soap*, afip3__ArrayOfFECAEADetRequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEADetRequest ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfFECAEADetRequest(struct soap*, afip3__ArrayOfFECAEADetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEACabRequest_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEACabRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEACabRequest(struct soap*, afip3__FECAEACabRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEACabRequest(struct soap*, const char *, int, afip3__FECAEACabRequest *const*, const char *);
SOAP_FMAC3 afip3__FECAEACabRequest ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEACabRequest(struct soap*, const char*, afip3__FECAEACabRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEACabRequest(struct soap*, afip3__FECAEACabRequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEACabRequest ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEACabRequest(struct soap*, afip3__FECAEACabRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECompConsResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECompConsResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECompConsResponse(struct soap*, afip3__FECompConsResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECompConsResponse(struct soap*, const char *, int, afip3__FECompConsResponse *const*, const char *);
SOAP_FMAC3 afip3__FECompConsResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECompConsResponse(struct soap*, const char*, afip3__FECompConsResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECompConsResponse(struct soap*, afip3__FECompConsResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECompConsResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECompConsResponse(struct soap*, afip3__FECompConsResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Err_DEFINED
#define SOAP_TYPE_PointerToafip3__Err_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Err(struct soap*, afip3__Err *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Err(struct soap*, const char *, int, afip3__Err *const*, const char *);
SOAP_FMAC3 afip3__Err ** SOAP_FMAC4 soap_in_PointerToafip3__Err(struct soap*, const char*, afip3__Err **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Err(struct soap*, afip3__Err *const*, const char*, const char*);
SOAP_FMAC3 afip3__Err ** SOAP_FMAC4 soap_get_PointerToafip3__Err(struct soap*, afip3__Err **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Evt_DEFINED
#define SOAP_TYPE_PointerToafip3__Evt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Evt(struct soap*, afip3__Evt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Evt(struct soap*, const char *, int, afip3__Evt *const*, const char *);
SOAP_FMAC3 afip3__Evt ** SOAP_FMAC4 soap_in_PointerToafip3__Evt(struct soap*, const char*, afip3__Evt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Evt(struct soap*, afip3__Evt *const*, const char*, const char*);
SOAP_FMAC3 afip3__Evt ** SOAP_FMAC4 soap_get_PointerToafip3__Evt(struct soap*, afip3__Evt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Obs_DEFINED
#define SOAP_TYPE_PointerToafip3__Obs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Obs(struct soap*, afip3__Obs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Obs(struct soap*, const char *, int, afip3__Obs *const*, const char *);
SOAP_FMAC3 afip3__Obs ** SOAP_FMAC4 soap_in_PointerToafip3__Obs(struct soap*, const char*, afip3__Obs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Obs(struct soap*, afip3__Obs *const*, const char*, const char*);
SOAP_FMAC3 afip3__Obs ** SOAP_FMAC4 soap_get_PointerToafip3__Obs(struct soap*, afip3__Obs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfObs_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfObs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfObs(struct soap*, afip3__ArrayOfObs *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfObs(struct soap*, const char *, int, afip3__ArrayOfObs *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfObs ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfObs(struct soap*, const char*, afip3__ArrayOfObs **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfObs(struct soap*, afip3__ArrayOfObs *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfObs ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfObs(struct soap*, afip3__ArrayOfObs **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEDetResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEDetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEDetResponse(struct soap*, afip3__FECAEDetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEDetResponse(struct soap*, const char *, int, afip3__FECAEDetResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAEDetResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEDetResponse(struct soap*, const char*, afip3__FECAEDetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEDetResponse(struct soap*, afip3__FECAEDetResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEDetResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEDetResponse(struct soap*, afip3__FECAEDetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfErr_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfErr_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfErr(struct soap*, afip3__ArrayOfErr *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfErr(struct soap*, const char *, int, afip3__ArrayOfErr *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfErr ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfErr(struct soap*, const char*, afip3__ArrayOfErr **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfErr(struct soap*, afip3__ArrayOfErr *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfErr ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfErr(struct soap*, afip3__ArrayOfErr **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfEvt_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfEvt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfEvt(struct soap*, afip3__ArrayOfEvt *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfEvt(struct soap*, const char *, int, afip3__ArrayOfEvt *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfEvt ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfEvt(struct soap*, const char*, afip3__ArrayOfEvt **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfEvt(struct soap*, afip3__ArrayOfEvt *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfEvt ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfEvt(struct soap*, afip3__ArrayOfEvt **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfFECAEDetResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfFECAEDetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfFECAEDetResponse(struct soap*, afip3__ArrayOfFECAEDetResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfFECAEDetResponse(struct soap*, const char *, int, afip3__ArrayOfFECAEDetResponse *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfFECAEDetResponse ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfFECAEDetResponse(struct soap*, const char*, afip3__ArrayOfFECAEDetResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfFECAEDetResponse(struct soap*, afip3__ArrayOfFECAEDetResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEDetResponse ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfFECAEDetResponse(struct soap*, afip3__ArrayOfFECAEDetResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAECabResponse_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAECabResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAECabResponse(struct soap*, afip3__FECAECabResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAECabResponse(struct soap*, const char *, int, afip3__FECAECabResponse *const*, const char *);
SOAP_FMAC3 afip3__FECAECabResponse ** SOAP_FMAC4 soap_in_PointerToafip3__FECAECabResponse(struct soap*, const char*, afip3__FECAECabResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAECabResponse(struct soap*, afip3__FECAECabResponse *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAECabResponse ** SOAP_FMAC4 soap_get_PointerToafip3__FECAECabResponse(struct soap*, afip3__FECAECabResponse **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Comprador_DEFINED
#define SOAP_TYPE_PointerToafip3__Comprador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Comprador(struct soap*, afip3__Comprador *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Comprador(struct soap*, const char *, int, afip3__Comprador *const*, const char *);
SOAP_FMAC3 afip3__Comprador ** SOAP_FMAC4 soap_in_PointerToafip3__Comprador(struct soap*, const char*, afip3__Comprador **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Comprador(struct soap*, afip3__Comprador *const*, const char*, const char*);
SOAP_FMAC3 afip3__Comprador ** SOAP_FMAC4 soap_get_PointerToafip3__Comprador(struct soap*, afip3__Comprador **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Opcional_DEFINED
#define SOAP_TYPE_PointerToafip3__Opcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Opcional(struct soap*, afip3__Opcional *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Opcional(struct soap*, const char *, int, afip3__Opcional *const*, const char *);
SOAP_FMAC3 afip3__Opcional ** SOAP_FMAC4 soap_in_PointerToafip3__Opcional(struct soap*, const char*, afip3__Opcional **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Opcional(struct soap*, afip3__Opcional *const*, const char*, const char*);
SOAP_FMAC3 afip3__Opcional ** SOAP_FMAC4 soap_get_PointerToafip3__Opcional(struct soap*, afip3__Opcional **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__AlicIva_DEFINED
#define SOAP_TYPE_PointerToafip3__AlicIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__AlicIva(struct soap*, afip3__AlicIva *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__AlicIva(struct soap*, const char *, int, afip3__AlicIva *const*, const char *);
SOAP_FMAC3 afip3__AlicIva ** SOAP_FMAC4 soap_in_PointerToafip3__AlicIva(struct soap*, const char*, afip3__AlicIva **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__AlicIva(struct soap*, afip3__AlicIva *const*, const char*, const char*);
SOAP_FMAC3 afip3__AlicIva ** SOAP_FMAC4 soap_get_PointerToafip3__AlicIva(struct soap*, afip3__AlicIva **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__Tributo_DEFINED
#define SOAP_TYPE_PointerToafip3__Tributo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__Tributo(struct soap*, afip3__Tributo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__Tributo(struct soap*, const char *, int, afip3__Tributo *const*, const char *);
SOAP_FMAC3 afip3__Tributo ** SOAP_FMAC4 soap_in_PointerToafip3__Tributo(struct soap*, const char*, afip3__Tributo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__Tributo(struct soap*, afip3__Tributo *const*, const char*, const char*);
SOAP_FMAC3 afip3__Tributo ** SOAP_FMAC4 soap_get_PointerToafip3__Tributo(struct soap*, afip3__Tributo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__CbteAsoc_DEFINED
#define SOAP_TYPE_PointerToafip3__CbteAsoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__CbteAsoc(struct soap*, afip3__CbteAsoc *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__CbteAsoc(struct soap*, const char *, int, afip3__CbteAsoc *const*, const char *);
SOAP_FMAC3 afip3__CbteAsoc ** SOAP_FMAC4 soap_in_PointerToafip3__CbteAsoc(struct soap*, const char*, afip3__CbteAsoc **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__CbteAsoc(struct soap*, afip3__CbteAsoc *const*, const char*, const char*);
SOAP_FMAC3 afip3__CbteAsoc ** SOAP_FMAC4 soap_get_PointerToafip3__CbteAsoc(struct soap*, afip3__CbteAsoc **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfComprador_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfComprador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfComprador(struct soap*, afip3__ArrayOfComprador *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfComprador(struct soap*, const char *, int, afip3__ArrayOfComprador *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfComprador ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfComprador(struct soap*, const char*, afip3__ArrayOfComprador **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfComprador(struct soap*, afip3__ArrayOfComprador *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfComprador ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfComprador(struct soap*, afip3__ArrayOfComprador **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfOpcional_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfOpcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfOpcional(struct soap*, afip3__ArrayOfOpcional *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfOpcional(struct soap*, const char *, int, afip3__ArrayOfOpcional *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfOpcional ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfOpcional(struct soap*, const char*, afip3__ArrayOfOpcional **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfOpcional(struct soap*, afip3__ArrayOfOpcional *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfOpcional ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfOpcional(struct soap*, afip3__ArrayOfOpcional **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfAlicIva_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfAlicIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfAlicIva(struct soap*, afip3__ArrayOfAlicIva *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfAlicIva(struct soap*, const char *, int, afip3__ArrayOfAlicIva *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfAlicIva ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfAlicIva(struct soap*, const char*, afip3__ArrayOfAlicIva **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfAlicIva(struct soap*, afip3__ArrayOfAlicIva *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfAlicIva ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfAlicIva(struct soap*, afip3__ArrayOfAlicIva **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfTributo_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfTributo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfTributo(struct soap*, afip3__ArrayOfTributo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfTributo(struct soap*, const char *, int, afip3__ArrayOfTributo *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfTributo ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfTributo(struct soap*, const char*, afip3__ArrayOfTributo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfTributo(struct soap*, afip3__ArrayOfTributo *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfTributo ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfTributo(struct soap*, afip3__ArrayOfTributo **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfCbteAsoc_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfCbteAsoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfCbteAsoc(struct soap*, afip3__ArrayOfCbteAsoc *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfCbteAsoc(struct soap*, const char *, int, afip3__ArrayOfCbteAsoc *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfCbteAsoc ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfCbteAsoc(struct soap*, const char*, afip3__ArrayOfCbteAsoc **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfCbteAsoc(struct soap*, afip3__ArrayOfCbteAsoc *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfCbteAsoc ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfCbteAsoc(struct soap*, afip3__ArrayOfCbteAsoc **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAEDetRequest_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAEDetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAEDetRequest(struct soap*, afip3__FECAEDetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAEDetRequest(struct soap*, const char *, int, afip3__FECAEDetRequest *const*, const char *);
SOAP_FMAC3 afip3__FECAEDetRequest ** SOAP_FMAC4 soap_in_PointerToafip3__FECAEDetRequest(struct soap*, const char*, afip3__FECAEDetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAEDetRequest(struct soap*, afip3__FECAEDetRequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAEDetRequest ** SOAP_FMAC4 soap_get_PointerToafip3__FECAEDetRequest(struct soap*, afip3__FECAEDetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__ArrayOfFECAEDetRequest_DEFINED
#define SOAP_TYPE_PointerToafip3__ArrayOfFECAEDetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__ArrayOfFECAEDetRequest(struct soap*, afip3__ArrayOfFECAEDetRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__ArrayOfFECAEDetRequest(struct soap*, const char *, int, afip3__ArrayOfFECAEDetRequest *const*, const char *);
SOAP_FMAC3 afip3__ArrayOfFECAEDetRequest ** SOAP_FMAC4 soap_in_PointerToafip3__ArrayOfFECAEDetRequest(struct soap*, const char*, afip3__ArrayOfFECAEDetRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__ArrayOfFECAEDetRequest(struct soap*, afip3__ArrayOfFECAEDetRequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__ArrayOfFECAEDetRequest ** SOAP_FMAC4 soap_get_PointerToafip3__ArrayOfFECAEDetRequest(struct soap*, afip3__ArrayOfFECAEDetRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToafip3__FECAECabRequest_DEFINED
#define SOAP_TYPE_PointerToafip3__FECAECabRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToafip3__FECAECabRequest(struct soap*, afip3__FECAECabRequest *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToafip3__FECAECabRequest(struct soap*, const char *, int, afip3__FECAECabRequest *const*, const char *);
SOAP_FMAC3 afip3__FECAECabRequest ** SOAP_FMAC4 soap_in_PointerToafip3__FECAECabRequest(struct soap*, const char*, afip3__FECAECabRequest **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToafip3__FECAECabRequest(struct soap*, afip3__FECAECabRequest *const*, const char*, const char*);
SOAP_FMAC3 afip3__FECAECabRequest ** SOAP_FMAC4 soap_get_PointerToafip3__FECAECabRequest(struct soap*, afip3__FECAECabRequest **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__PaisTipo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__PaisTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__PaisTipo(struct soap*, std::vector<afip3__PaisTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__PaisTipo(struct soap*, const std::vector<afip3__PaisTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__PaisTipo(struct soap*, const char*, int, const std::vector<afip3__PaisTipo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__PaisTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__PaisTipo(struct soap*, const char*, std::vector<afip3__PaisTipo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__PaisTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__PaisTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__PaisTipo *>  * soap_new_std__vectorTemplateOfPointerToafip3__PaisTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__PaisTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__DocTipo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__DocTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__DocTipo(struct soap*, std::vector<afip3__DocTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__DocTipo(struct soap*, const std::vector<afip3__DocTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__DocTipo(struct soap*, const char*, int, const std::vector<afip3__DocTipo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__DocTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__DocTipo(struct soap*, const char*, std::vector<afip3__DocTipo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__DocTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__DocTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__DocTipo *>  * soap_new_std__vectorTemplateOfPointerToafip3__DocTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__DocTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__CbteTipo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__CbteTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__CbteTipo(struct soap*, std::vector<afip3__CbteTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__CbteTipo(struct soap*, const std::vector<afip3__CbteTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__CbteTipo(struct soap*, const char*, int, const std::vector<afip3__CbteTipo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__CbteTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__CbteTipo(struct soap*, const char*, std::vector<afip3__CbteTipo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__CbteTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__CbteTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__CbteTipo *>  * soap_new_std__vectorTemplateOfPointerToafip3__CbteTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__CbteTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__PtoVenta_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__PtoVenta_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__PtoVenta(struct soap*, std::vector<afip3__PtoVenta *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__PtoVenta(struct soap*, const std::vector<afip3__PtoVenta *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__PtoVenta(struct soap*, const char*, int, const std::vector<afip3__PtoVenta *> *, const char*);
SOAP_FMAC3 std::vector<afip3__PtoVenta *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__PtoVenta(struct soap*, const char*, std::vector<afip3__PtoVenta *> *, const char*);
SOAP_FMAC1 std::vector<afip3__PtoVenta *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__PtoVenta(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__PtoVenta *>  * soap_new_std__vectorTemplateOfPointerToafip3__PtoVenta(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__PtoVenta(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__ConceptoTipo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__ConceptoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__ConceptoTipo(struct soap*, std::vector<afip3__ConceptoTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__ConceptoTipo(struct soap*, const std::vector<afip3__ConceptoTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__ConceptoTipo(struct soap*, const char*, int, const std::vector<afip3__ConceptoTipo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__ConceptoTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__ConceptoTipo(struct soap*, const char*, std::vector<afip3__ConceptoTipo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__ConceptoTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__ConceptoTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__ConceptoTipo *>  * soap_new_std__vectorTemplateOfPointerToafip3__ConceptoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__ConceptoTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__OpcionalTipo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__OpcionalTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__OpcionalTipo(struct soap*, std::vector<afip3__OpcionalTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__OpcionalTipo(struct soap*, const std::vector<afip3__OpcionalTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__OpcionalTipo(struct soap*, const char*, int, const std::vector<afip3__OpcionalTipo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__OpcionalTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__OpcionalTipo(struct soap*, const char*, std::vector<afip3__OpcionalTipo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__OpcionalTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__OpcionalTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__OpcionalTipo *>  * soap_new_std__vectorTemplateOfPointerToafip3__OpcionalTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__OpcionalTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__IvaTipo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__IvaTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__IvaTipo(struct soap*, std::vector<afip3__IvaTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__IvaTipo(struct soap*, const std::vector<afip3__IvaTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__IvaTipo(struct soap*, const char*, int, const std::vector<afip3__IvaTipo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__IvaTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__IvaTipo(struct soap*, const char*, std::vector<afip3__IvaTipo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__IvaTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__IvaTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__IvaTipo *>  * soap_new_std__vectorTemplateOfPointerToafip3__IvaTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__IvaTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Moneda_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Moneda_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__Moneda(struct soap*, std::vector<afip3__Moneda *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__Moneda(struct soap*, const std::vector<afip3__Moneda *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__Moneda(struct soap*, const char*, int, const std::vector<afip3__Moneda *> *, const char*);
SOAP_FMAC3 std::vector<afip3__Moneda *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__Moneda(struct soap*, const char*, std::vector<afip3__Moneda *> *, const char*);
SOAP_FMAC1 std::vector<afip3__Moneda *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__Moneda(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__Moneda *>  * soap_new_std__vectorTemplateOfPointerToafip3__Moneda(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__Moneda(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__TributoTipo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__TributoTipo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__TributoTipo(struct soap*, std::vector<afip3__TributoTipo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__TributoTipo(struct soap*, const std::vector<afip3__TributoTipo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__TributoTipo(struct soap*, const char*, int, const std::vector<afip3__TributoTipo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__TributoTipo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__TributoTipo(struct soap*, const char*, std::vector<afip3__TributoTipo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__TributoTipo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__TributoTipo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__TributoTipo *>  * soap_new_std__vectorTemplateOfPointerToafip3__TributoTipo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__TributoTipo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEASinMov_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEASinMov_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__FECAEASinMov(struct soap*, std::vector<afip3__FECAEASinMov *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__FECAEASinMov(struct soap*, const std::vector<afip3__FECAEASinMov *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__FECAEASinMov(struct soap*, const char*, int, const std::vector<afip3__FECAEASinMov *> *, const char*);
SOAP_FMAC3 std::vector<afip3__FECAEASinMov *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__FECAEASinMov(struct soap*, const char*, std::vector<afip3__FECAEASinMov *> *, const char*);
SOAP_FMAC1 std::vector<afip3__FECAEASinMov *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEASinMov(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__FECAEASinMov *>  * soap_new_std__vectorTemplateOfPointerToafip3__FECAEASinMov(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEASinMov(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEADetResponse_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEADetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__FECAEADetResponse(struct soap*, std::vector<afip3__FECAEADetResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__FECAEADetResponse(struct soap*, const std::vector<afip3__FECAEADetResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__FECAEADetResponse(struct soap*, const char*, int, const std::vector<afip3__FECAEADetResponse *> *, const char*);
SOAP_FMAC3 std::vector<afip3__FECAEADetResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__FECAEADetResponse(struct soap*, const char*, std::vector<afip3__FECAEADetResponse *> *, const char*);
SOAP_FMAC1 std::vector<afip3__FECAEADetResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEADetResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__FECAEADetResponse *>  * soap_new_std__vectorTemplateOfPointerToafip3__FECAEADetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEADetResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEADetRequest_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEADetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__FECAEADetRequest(struct soap*, std::vector<afip3__FECAEADetRequest *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__FECAEADetRequest(struct soap*, const std::vector<afip3__FECAEADetRequest *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__FECAEADetRequest(struct soap*, const char*, int, const std::vector<afip3__FECAEADetRequest *> *, const char*);
SOAP_FMAC3 std::vector<afip3__FECAEADetRequest *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__FECAEADetRequest(struct soap*, const char*, std::vector<afip3__FECAEADetRequest *> *, const char*);
SOAP_FMAC1 std::vector<afip3__FECAEADetRequest *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEADetRequest(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__FECAEADetRequest *>  * soap_new_std__vectorTemplateOfPointerToafip3__FECAEADetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEADetRequest(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Err_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Err_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__Err(struct soap*, std::vector<afip3__Err *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__Err(struct soap*, const std::vector<afip3__Err *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__Err(struct soap*, const char*, int, const std::vector<afip3__Err *> *, const char*);
SOAP_FMAC3 std::vector<afip3__Err *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__Err(struct soap*, const char*, std::vector<afip3__Err *> *, const char*);
SOAP_FMAC1 std::vector<afip3__Err *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__Err(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__Err *>  * soap_new_std__vectorTemplateOfPointerToafip3__Err(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__Err(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Evt_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Evt_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__Evt(struct soap*, std::vector<afip3__Evt *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__Evt(struct soap*, const std::vector<afip3__Evt *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__Evt(struct soap*, const char*, int, const std::vector<afip3__Evt *> *, const char*);
SOAP_FMAC3 std::vector<afip3__Evt *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__Evt(struct soap*, const char*, std::vector<afip3__Evt *> *, const char*);
SOAP_FMAC1 std::vector<afip3__Evt *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__Evt(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__Evt *>  * soap_new_std__vectorTemplateOfPointerToafip3__Evt(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__Evt(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Obs_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Obs_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__Obs(struct soap*, std::vector<afip3__Obs *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__Obs(struct soap*, const std::vector<afip3__Obs *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__Obs(struct soap*, const char*, int, const std::vector<afip3__Obs *> *, const char*);
SOAP_FMAC3 std::vector<afip3__Obs *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__Obs(struct soap*, const char*, std::vector<afip3__Obs *> *, const char*);
SOAP_FMAC1 std::vector<afip3__Obs *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__Obs(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__Obs *>  * soap_new_std__vectorTemplateOfPointerToafip3__Obs(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__Obs(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEDetResponse_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEDetResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__FECAEDetResponse(struct soap*, std::vector<afip3__FECAEDetResponse *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__FECAEDetResponse(struct soap*, const std::vector<afip3__FECAEDetResponse *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__FECAEDetResponse(struct soap*, const char*, int, const std::vector<afip3__FECAEDetResponse *> *, const char*);
SOAP_FMAC3 std::vector<afip3__FECAEDetResponse *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__FECAEDetResponse(struct soap*, const char*, std::vector<afip3__FECAEDetResponse *> *, const char*);
SOAP_FMAC1 std::vector<afip3__FECAEDetResponse *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEDetResponse(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__FECAEDetResponse *>  * soap_new_std__vectorTemplateOfPointerToafip3__FECAEDetResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEDetResponse(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Comprador_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Comprador_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__Comprador(struct soap*, std::vector<afip3__Comprador *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__Comprador(struct soap*, const std::vector<afip3__Comprador *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__Comprador(struct soap*, const char*, int, const std::vector<afip3__Comprador *> *, const char*);
SOAP_FMAC3 std::vector<afip3__Comprador *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__Comprador(struct soap*, const char*, std::vector<afip3__Comprador *> *, const char*);
SOAP_FMAC1 std::vector<afip3__Comprador *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__Comprador(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__Comprador *>  * soap_new_std__vectorTemplateOfPointerToafip3__Comprador(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__Comprador(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Opcional_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Opcional_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__Opcional(struct soap*, std::vector<afip3__Opcional *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__Opcional(struct soap*, const std::vector<afip3__Opcional *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__Opcional(struct soap*, const char*, int, const std::vector<afip3__Opcional *> *, const char*);
SOAP_FMAC3 std::vector<afip3__Opcional *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__Opcional(struct soap*, const char*, std::vector<afip3__Opcional *> *, const char*);
SOAP_FMAC1 std::vector<afip3__Opcional *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__Opcional(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__Opcional *>  * soap_new_std__vectorTemplateOfPointerToafip3__Opcional(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__Opcional(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__AlicIva_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__AlicIva_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__AlicIva(struct soap*, std::vector<afip3__AlicIva *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__AlicIva(struct soap*, const std::vector<afip3__AlicIva *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__AlicIva(struct soap*, const char*, int, const std::vector<afip3__AlicIva *> *, const char*);
SOAP_FMAC3 std::vector<afip3__AlicIva *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__AlicIva(struct soap*, const char*, std::vector<afip3__AlicIva *> *, const char*);
SOAP_FMAC1 std::vector<afip3__AlicIva *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__AlicIva(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__AlicIva *>  * soap_new_std__vectorTemplateOfPointerToafip3__AlicIva(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__AlicIva(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Tributo_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__Tributo_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__Tributo(struct soap*, std::vector<afip3__Tributo *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__Tributo(struct soap*, const std::vector<afip3__Tributo *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__Tributo(struct soap*, const char*, int, const std::vector<afip3__Tributo *> *, const char*);
SOAP_FMAC3 std::vector<afip3__Tributo *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__Tributo(struct soap*, const char*, std::vector<afip3__Tributo *> *, const char*);
SOAP_FMAC1 std::vector<afip3__Tributo *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__Tributo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__Tributo *>  * soap_new_std__vectorTemplateOfPointerToafip3__Tributo(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__Tributo(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__CbteAsoc_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__CbteAsoc_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__CbteAsoc(struct soap*, std::vector<afip3__CbteAsoc *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__CbteAsoc(struct soap*, const std::vector<afip3__CbteAsoc *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__CbteAsoc(struct soap*, const char*, int, const std::vector<afip3__CbteAsoc *> *, const char*);
SOAP_FMAC3 std::vector<afip3__CbteAsoc *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__CbteAsoc(struct soap*, const char*, std::vector<afip3__CbteAsoc *> *, const char*);
SOAP_FMAC1 std::vector<afip3__CbteAsoc *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__CbteAsoc(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__CbteAsoc *>  * soap_new_std__vectorTemplateOfPointerToafip3__CbteAsoc(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__CbteAsoc(soap, n, NULL, NULL, NULL);
}
#endif

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEDetRequest_DEFINED
#define SOAP_TYPE_std__vectorTemplateOfPointerToafip3__FECAEDetRequest_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToafip3__FECAEDetRequest(struct soap*, std::vector<afip3__FECAEDetRequest *> *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToafip3__FECAEDetRequest(struct soap*, const std::vector<afip3__FECAEDetRequest *> *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToafip3__FECAEDetRequest(struct soap*, const char*, int, const std::vector<afip3__FECAEDetRequest *> *, const char*);
SOAP_FMAC3 std::vector<afip3__FECAEDetRequest *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToafip3__FECAEDetRequest(struct soap*, const char*, std::vector<afip3__FECAEDetRequest *> *, const char*);
SOAP_FMAC1 std::vector<afip3__FECAEDetRequest *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEDetRequest(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<afip3__FECAEDetRequest *>  * soap_new_std__vectorTemplateOfPointerToafip3__FECAEDetRequest(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__vectorTemplateOfPointerToafip3__FECAEDetRequest(soap, n, NULL, NULL, NULL);
}
#endif

#endif

/* End of soapH.h */
